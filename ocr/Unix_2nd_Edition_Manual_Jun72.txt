[Page: 1]
- ; en /- 7 : |
( UNIX PROGRAMMER’S MANUAL
Second Edition
K,. Thompson
| | D. M, Ritchie .
| | June 12, 1972 ,
fs
é . .
Copyright © 1972
Bell Telephone Laboratories, Inc.
No part of this document may be reproduced,
or distributed outside the Laboratories, without
the written permission of Bell Telephone Laboratories,
[Page: 2]
Suwe L2 \ (TPZ
PREFACE
to the Second Edition .
oe In the months since this manual first appeared, many changes have
- occurred both in the system itself and in the way it is used.
Perhaps most obviously, there have been additions, deletions, and
modifications to the system and its software, It is these
changes, of course, that caused the appearance of this revised
manual.
{ Second, the number of people spending an appreciable amount of
. time writing UNIX software has increased. Credit is due to
L. Le. Cherry, M. D. McIlroy, L. E. McMahon, R, Morris, and
J. F. Ossanna for their contributions.
Finally, the number of UNIX installations has grown to 10, with
more expected. None of these has exactly the same complement of
hardware or software. Therefore, at any particular installation,
it is quite possible that this manual will give inappropriate
information, One area to watch concerns commands which deal with
special files (1/0 Gevices), Another is places which talk about
such things as absolute core locations which are likely to vary
with the memory configuration and existence of protection
hardware. Also, not all installations have the latest versions
of all the software. In particular, the assembler and loader
have just undergone ma jor reorganizations in anticipation of a
UNIX for the PDP-11/45.
i
-ii-
[Page: 3]
\
INTRODUCT ION
This manual gives descriptions of the publicly available features
: of UNIX. It provides neither a general overview (see The UNIX
T4ime—-shar ing System for that) nor details of the implement ation
of the system (which remain to be disclosed).
Within the area it surveys, this manual attempts to be as com—

; plete and timely as possible. A conscious decision was made to
describe each program in exactly the state it was in at the time
its manual section was prepared, in particular, the desire to

: describe something as it should be, not as it is, was resisted.
Inevitably, this means that many sections will soon be out of
date, (The rate of change of the system is so great that a
dismayingly large number of early sections had to be mod if ied
while the rest were being written. The unbounded effort required
to stay up-to-date 4s best indicated by the fact that several of
the programs described were written specifically to aid in
preparation of this manual ! )

ae This manual is divided into seven sections:
|
\ I. Commands
II. System calls
III. Subroutines
Iv. Special files
Ve File formats
vi. User-maintained programs
VII. Miscellaneous
GCommands are programs intended to be invoked directly by the
user, in contradistinction to subroutines, which are intended to
be called by the user’s programs. Commands generally reside in
directory /bin (for binary programs). This directory is searched
automatically by the command line interpreter. Some programs
classified as commands are located elsewhere; this fact is indi-
: cated in the appropriate sections.
System calls are entries into the UNIX supervisor. jin assembly
language, they are coded with the use of the opcode “sys , a
- synonym for the trap instruction.
A small assortment of subroutines is available; they are .
described in section III, The binary form of most of them is
kept in the system library /usr/lib/liba.a.
(
The special files section Iv discusses the characteristics of
each system file which actually refers to an I/o device.
The file formats section V documents the structure of particular
kinds of files; for example, the form of the output of the loader
and assembler is given. Excluded are files used by only one com—
mand, for example the assembler’s intermediate files.
= dii -
[Page: 4]
User-maintained programs (section VI) are not considered part of
the UNIX system, and the principal reason for listing them is to
indicate their existence without necessarily giving a complete
description. The author should be consulted for information.
The miscellaneous section (VII) gathers odds and ends.
{ ;
Each section consists of a number of independent entries of a
page or so each. The name of the entry is in the upper right
corner of its pages, its preparation date in the upper left.
Entries within each section are alphabetized. It was thought
better to avoid running page numbers, since it is hoped that the
manual will be updated frequently. Therefore each entry is nun-
- | pered starting at page 1.
All entries have a common format.
The name section repeats the entry name and gives a very
short description of its purpose. .
; The synopsis summarizes the use of the program being
described. A few conventions are used, particularly in the
Commands section:
Underlined words are considered literals, and are typed
just as they appear.
Square brackets ({]) around an argument indicate that the
argument is optional, When an argument is given as
name:, it always refers to a file name.
Ell ipses "4. are used to show that the previous
argument-—prototype may be repeated.
A final convention is used by the commands themselves.
An argument beginning with a minus sign - is often tak-
en to mean some sort of flag argument even if it appears
in a position where a file name could appear. Therefore,
, it is unwise to have files whose names begin with —- .
The description section discusses in detail the subject at
hand.
The files section gives the names of files which are built
into the program,
A see also section gives pointers to related information.
A diagnostics section discusses the diagnostics that may be
produced. This section tends to be as terse as the diagnos-—
tics themselves,
The bugs section gives known bugs and sometimes deficien-
cies, occasionally also the suggested fix is described.
-~ iv-
[Page: 5]
The owner section gives the name of the person or persons to
pe consulted in case of aifficulty. The rule has been that
the last one to modify something owns it, so the owner is
not necessarily the author. The owner’s nicknames stand
for:
i ken K, Thompson
: amr D. M. Ritchie .
jfo J. F. ossanna
rhm R, Morris
doug M, D. McIlroy
lem L. E. McMahon
lic L, L. Cherry
csr Cc. S. Roberts
These nicknames also happen to be UNIX user ID’s, so mes—
sages may be transmitted by the mail command or, if the
addressee is logged in, by write.
At the peginning of this document is a table of contents, organ-
ized by section and alphabetically within each section. There is
also a permuted index derived from the table of contents. Within
each index entry, the title of the writeup to which it refers is
followed by the appropriate section number in parentheses. This
fact is important because there is considerable name duplication
; among the sections, arising principally from commands which exist
only to exercise a part icular system call.
This manual was prepared using the UNIX text editor ed and the
formatting program roff.
{
it
- V=-—
[Page: 6]
—— TABLE OF CONTENTS
I. COMMANDS |
. b wer cc ccccccccccce sc sssssee® place label
if : ACCE cecccccccccsessveseseeer® get connect—time account ing
: AY ceocesecsesesessseserere® &% archive ( comb ine) files .
AS seccccccccccccccscoseserr® assembl er
bas PP a ee ee ed BASIC dialect
Cat cccccccccccccccecccssese® concatenate (or print) files
ce eocccccecesceveresseerree® compile Cc program
chdir wececvecceosevesesrrre% change working directory
check aera ee ane check consistency of file system
{ ChHMOd eecccseccceesccsssereee® change access mode of files
\ ;
CHOWN ceccccvccccseecerserere® change owner of files
cmp PP ee compare file contents
CP csvecccccsccesecessscrere® copy file
Gate cececccccsoesescssssere® get date and time of day
. db ecerceccrsscesesrsereereee® symbolic debugger
dc Pa ee desk calculator
at occ ececccorssoseresseree® find free disk space
dpd Pee ee spawn data-phone daemon
GS cocccccccccssccsesesesese® verify directory hierarchy
GSW ceoccccccccccsccseseseese® delete files interactively
GU cevscccscesesesesseererer? find disk usage
echo eccccccccscesecesesserse® print command arguments
; CA ceccccvcccccvcvccsesssses® text editor
EXIC ceocccccccccccccscsscere® end command sequence
Ec sce cccesveccssseosesseerre® compile Fortran program
LEI cecccvcccccccccsccseesse® form-letter editor
Find cecccccccccscccecseserr® find file with given name
form a ee es generate form letter
goto Pe ee a command transfer
if eccceccevesesesesesreseree® conditional command
istat eo cece sesoceseseesser er? file status by i-—number
1d eccrescccccsesceseoseerere® link editor (loader )
: in weccrcccccesccosessesseee® link to file
login ecco scesoosseseesereere® log on to system
i ls ececcccccseveceeseserese ee list contents of airectory
, MALL cecccccecccsssoesserres® send mail to another user
man Pe run off manual section
MEST covcccceccvccseessererer® permit or deny messages
MKGLL cocccccccsesssreserese® create directory
mount eocccceecvesereseerere® mount detachable file system
Mt cccccccccccscccccesceesrr® save/restore files on magtape
mv ae ee ne move or rename file
M6 ccocccccccssvcesseesesser® macroprocessor
‘ nm ccc cece ce escccsscssecseee® print namelist
nroff eee ecco seccoeresesseee® format text for printing
od wcccccccecoeseesesesrrree® octal dump of file .
OPL cecccccsccccsescrssrrere® print file off-line
ov wee ccc eecesesecoveseseseee® page overlay file print
pr Pe ee ee print file with headings
LOW ceoccsscessesesereseeree%® rewind DECt ape
rm cc cccceececcescocccsccseses FEMOVE (delete) file
- vi -
[Page: 7]
; _ rmdir accceceveseoseseserrre%® remove (delete) directory
LOFE cecccccccecccsosssrerre® format text for printing
salv wcccsecccccssesesrrrrre® repair damaged file system
sh wocccecccccsecssssesrrre %® command interpreter
sort Pe ne sort ASCII file
Stat cccccccccesescesssseeee® get file status
x SCLAP eoscecscccessessrrrrre® remove symbols, relocation bits
° stty ee ens set typewriter modes
su ne become super—user
sum pec c cece cccecsesessseeee® sum file
LACCE ceccccscccccscessesere® connect-time accounting oe
tap sec e re ccsccveesseeseser%® manipulate DECt ape
tm ee ee nee get time information
tss Pe ne communicate with MH-TSS (GCOS )
i CLY cocccccccccsccoeesresere® find name of terminal
type PP ee print file page-by-page
uUMOUNt eeccecceccceserrsrsee® dismount removable file system
un Pe es find undef ined symbols
WC ccccccccccccsssceesssesee® get (English) word count
WNO cocccvcccceserssseserere® who is on the system
WLICS secccccccscssecssrreee® write to another user
II. SYSTEM CALLS
br eak sec ccceccvcsccsesesese® set program br eak
Cemt sececccccecscssseeerere® catch EMT traps
chd ir ee ee change working directory
chmod sec ccccceseeesseeseere® change mode of file
chown ee cscccccssccssseseree® change owner of file
CLOSE aecccccsccseererreerree® close open file
creat Pe create file
ex ec wcccscccccoesssseserers® execute program file
exit cece ceecsccsscossecsee® terminate execution
FOLK cocccescscescsssesesere® create new process
fstat ccc cccccccceoossserseee® status of open file
getuid eccccccsccossereeeeree® get user ID
Gtty eecccccaccecsscssererees get typewriter mode
hog ec cccccccscesesesesseree® set low-priority status
GIGINS coceesceeosesesererre® catch illegal instruction trap
A ee catch or inhibit interrupts
Link ceccccceccsesoersererer® link to file
Kill ceccccccccccesosesesese® destroy process
makdir wove ccccseecsssesserre® create directory
MA ALE covccccccecscssecsesee® set date modified of file
mount Pe ne mount file system
OPEN socccoccessceesesrseree® open file
quit eee cesncccscseocsesoerer® catch or inhibit quits
( read Pr ee es read file \
TELE cecccsccccccsescsserere® release processor
SCCK ceccccccccscssssererere® move read or write pointer
setuid woes cccescceseseserrs® set user ID
sleep ec ccccosscseceserserrre® delay execution
stat ceaccccccceeevecess Get file status
Stime cecccccccosssecseesserr® set system time
stty Pe ee set mode of typewriter
- vii -
[Page: 8]
: sync ee ee assure synchronization
tell eccccccccccsesosooserree® find read or write pointer
LIME cocccvecccseseosssserrrr® get time of year
UMOUNE cecccccesccosreerrree® Gismount file system
unl ink eocescscevesssesreree® remove (delete) file
Walt cecccccccccsccscesecrer® wait for process
7 Write .ccceccecccccccccorses WITS file
IIl. SUBROUTINES
ALAN ceovecccccessessssrerree® arctangent
ALOE coccccccccccsocccsesese® convert ASCII to floating
atoi sce ccc cscccesoesseseee® conv ert ASCII to integer
i const coerce cccceseesseseeeee® floating-point constants
ctime eccccccsseseseeserere® © convert time to ASCII
exp woe cscs ccccssesseoseseree® exponent ial function
£ptrap ee ccccccceesecssereee® floating-point simulator
ftoa ecccccvccvecscsesersrsree® convert floating to ASCII
GEES cocccecvecessrrsreecree® communicate with GCOS
getc weer ccc esccseesersereeee® get character
Hypot secccccecscesesssrsrre® compute hypotenuse
itoa ecrcccccccnsesesesereeer® convert integer to ASCII
log eccccccevccseseeerereree® logarithm pase e
mesg Pe print string on typewriter .
nlist eorrcccccccssssesesreee® read name list |
ptime ee ee ee print time
putc cece ccc cccecccsssceesee® write character or word
qsort eccccccsecccssoererrrr® quicker sort
salloc Pee ee ee ns storage allocator
sin wcccccccscesessceseorrre® sine, cosine
SQIt coccccceccsseessrrseree® square root
switch ecccccccccsseseeseree® transfer depending on value
Iv. SPECIAL FILES
dnd ccc ccc ceseos eevee sesree® 801 ACU
dpO sececccccccscsseerseseee® 201 Dataphone
| lpr ecccccccccoscesesererrre® line printer
. mem PP core memory
mtO wcccccccccsecesoseresesee® magtape
, Ppt ceoccccccccacssseserserr’® punched paper tape
rf£0 wc cccccceccoscesorerss ee ® RF disk
rkO cece csescccssessrsrsrere’® RK disk
rpO we cc cs cccccsccseseresere® RP disk
tapd cece cccsevceseseoererre® DECt ape
ELY coccccccccccsscrssrsssre® console typewriter
{ tty0O wee ec ccccceccsveossserere® remote typewriter
Vv. FILE FORMATS
A,OUL eoccccecccescesseerere® assembler and loader output
ArChive escccceceseseseseeerer® archive file
core ccc ccccccccveseossseeee® core image file
- viii -
[Page: 9]
GirectOry ecccescccccesssere® directory format
File SYStEM woceceeceoeesres® file system format
GGONt eocccscccsccssesererre® Gcos ident cards
passwd Pre ee password file
tap Pee ne DECt ape format
uids wee cccscccecesesseerrr® map names to user ID’s
L UEMP eecccceccoccesesssrrsrr® logged-in user information
. wtmp eccccccsecccesesesserer® accounting files
VI. USER MAINTAINED PROGRAMS
basic ecccseccceesesessree%% & DEC supplied BASIC
DC ceccscceccssesveseserrrre® compile B program
{ bj eer cccsecccsoosersserere%® the game of black jack
. cal wc c cee cccccveseereserree® print calendar
chash eocccceccseseesssrser ee ® prepare symbol table
cref Pe eee ne cross-reference table
GAS secccccscccccccsssssseee® disassembl er
. ALi cocccccccccccsssserseere® load DEC binary paper tapes
apt aoc eeeoscessecreseserseee® read DEC ASCII paper tapes
moo woccccccecesoveseesserrce® the game of MOO
ptx weer cccccscveressoeseseee® permuted index ;
EMG ccccccecscccsscessscrese® compile tmgl program
ttt sec eceeseeveseseseserere® the game of tic-tac-—toe
vii. MISCELLANEOUS
ASCLIL eecsesvevceessseereeee® map of ASCII :
bproc Pe ee nes boot procedure
Getty coceecccesscsessrccese® adapt to typewriter
glob. eceseccccscsccsossrsereree® argument expander ,
init ec cccccccesosesssessoee® initializer process
kbd coc ccccccccssseseseesere® map of TTY 37 keyboard
LOGIN cecvcccoccescrsesereer® how to log onto system
msh eee cecsvccscesssesesesee® mini Shell
LADS ceoccsecccccsscsesresere® set tab stops on typewriter ,
(
{
- ix -
[Page: 10]
INDEX
3(I): place label
a,out(V): assembler and loader output
{ chmod(I): change access mode of files
7 wtmp(V): accounting files
acct(I): get connect-time account ing
tacct(I): connect-time accounting
acct(I): get connect-time account ing
anO(Iv): 801 ACU
getty(VII): adapt to typewriter
salloc( III): storage allocator
4 mail(I): send mail to another user
write(I): write to another user
ar(I): archive (combine) files
archive(v): archive file
archive(V): archive file
atan(III): arctangent .
. glob(VII): argument expander
. echo(I): print command arguments
. ar(I): archive (combine) files
sort(I): sort aAscil file
; apt(VI): read DEC ASCII paper tapes
atof(III): convert ascil to floating
atoi(III): convert ASCII to integer
ascii(VII): map of ASCII
ascii(VII): map of ascil
etime(III): convert time to ASCII .
convert floating to ASCII...ftoa( III):
jtoa(III): convert integer to ASCII
as(I): assembler
a,out(V): assembler and loader output
as(I): assembler —
syne(II): assure synchronization
atan(III): arctangent
atof (III): convert ASCII to floating
atoi(III): convert ASCII to integer
pbe(VI): compile B program
{ log(III): logarithm base e
pas(I): BASIC dialect
bas(I): BASIC dialect
basic(VI): DEC supplied BASIC
pasic(VI): DEC supplied BASIC
be(VI): compile B program
j su(I): become super—user
@li(VI): load DEC binary paper tapes
remove symbols, relocation bits...strip(I):
| bj(VI): the game of black jack
| bj(VI): the game of black jack
pproc(VII): boot procedure
bproc( VII): boot procedure
break(II): set program br eak
preak( II): set program br eak
istat(I): file status by i—number
—_ x -_
[Page: 11]
cce(I): compile C program
dc(I): desk calculator
cal(ViI): print calendar
cal(VI): print calendar
ident(V): GCos ident cards
cemt(II):| catch EMT traps
iY ilgins(II): catch illegal instruction trap
7 intr( II): catch or inhibit interrupts
quit(II): catch or inhibit quits
cat(I): concatenate (or print) files
cc(I): compile C program
cemt(II): catch EMT traps
chmod(I): change access mode of files
chmod(II): change mode of file
i chown(I): change owner of files
: chown(II): change owner of file
chdir(I): change working directory
chdir(II): change working directory
putc( III): write Character or word
getc(III): get character
chash(VI): prepare symbol table
chair(I): change working directory
chair(II): change working directory
check(I): check consistency of file system
check(I): check consistency of file system
chmod(I): change access mode of files
chmod( II): change mode of file
chown(I): change owner of files
chown(II): change owner of file
close(II): close open file
close(II): close open file
emp(I): compare file contents
ar(I): archive (combine) files
echo(I): print command arguments
sh(I): command interpreter
exit(I): end command sequence
goto(I): command transfer
if(I): conditional command
gerts(III): communicate with GCOS
tss(I): communicate with MH-TSS (GCOS)
‘ cmp(I): compare file contents
be(VI): compile B program
cc(I): compile C program
fce(1I): compile Fortran program
tmg(VI): compile tmgl program
hypot(III): compute hypotenuse
cat(I): concatenate (or print) files
if(I): conditional command
( acct(I): get connect-time account ing
tacct(I): connect—time accounting
check(I): check consistency of file system
tty(Iv): console typewriter
const( III): floating-point constants
const( III): floating-point constants
ls(I): list contents of directory
cmp(I): compare file contents
- Xi-
[Page: 12]
atof(III): convert ASCII to floating
atoi(III): convert ASCII to integer
ftoa(III): convert floating to ASCII
jtoa(III): convert integer to ASCII
ctime(III): convert time to ASCII
; cp(I): copy file
{ core(V): core image file
: mem(IV): core memory
core(V): core image file
sin(III): sine, cosine
we(I): get (English) word count
cp(I): copy file
makdir(II): create directory
mkdir(I): create directory
: creat(II): create file
: : fork(II): create new process
creat(II): create file
cref(VI): cross-reference table
cref(VI): cross-reference table
ctime(III): convert time to ASCII
apd(I): spawn data-phone daemon
salv(I): repair damaged file system
das(VI): disassembler
a@pd(I): spawn data-phone daemon
apO(Iv): 201 Dataphone
date(I): get date and time of day
mdate(II): set date modified of file
date(I): get date and time of day
date(I): get date and time of day
db(I): symbolic debugger
dc(I): desk calculator
db(I): symbolic debugger
apt(VI): read DEC ASCII paper tapes
ali(VI): load DEC binary paper tapes
pasic(VI): DEC supplied BASIC .
tap(V): DECtape format
rew(I): rewind DECtape
tap(I): manipulate DECtape
tapO(IV): DECtape
sleep(II): delay execution
rmdir(I): remove (delete) directory
dsw(I): delete files interactively
rm(I): remove (delete) file
unlink( II): remove (delete) file
mesg(I): permit or deny messages
switch(III): transfer depending on value
dce(I): desk calculator
. kill(II): destroy process
t mount (I): mount detachable file system
af(I): find free disk space
bas(I): BASIC dialect .
directory(V): directory format
ds(I): verify directory hierarchy
directory(V):; directory format
chair(I): change working directory
chdir(II): change working direc: ory
- xii -
[Page: 13]
is(I): list contents of directory
makdir(II): create directory
mkdir(I): create directory
rmdir(I): remove (delete) directory
das(VI): disassembler
af(1I): find free disk space
iN du(I): find disk usage
° rfO(IV): RF disk
rkO(IV): RK disk
rpO(Iv): RP disk
umount (II): dismount file system
umount(I): dismount removable file system
ali(VI): load DEC binary paper tapes
dnO(Iv): 801 ACU
{ apd(I): spawn data-phone daemon
° dpt(VI): read DEC ASCII paper tapes
apoO(IV): 201 Dataphone
ds(I): verify directory hierarchy
dsw(I): delete files interactively
- qgu(I): find disk usage
oa(I): octal dump of file
echo(I): print command arguments
ed(I): text editor
1d(I): link editor (loader )
ed(I): text editor
fed(I): form—letter editor
cemt(II): catch EMT traps
exit(I): end command sequence
we(I): get (English) word count
exec(II): execute program file
exec(II): execute program file
exit(II): terminate execution
sleep(II): delay execution
exit(I): end command sequence
exit(II); terminate execution
glob(VII): argument expand er
exp(III): exponential function
exp(III): exponential function
log( III): logarithm base e¢
fc(I): compile Fortran program
‘ fed(I): form-letter editor
emp(I): compare file contents
opr(I): print file off-line
type(I): print file page-by-page
ov(I): page overlay file print
istat(I):; file status by i—numb er
stat(I): get file status
: stat(II): get file status
( file system(V): file system format
file system(V): file system format
. check consistency of file system...check(I):
mount (I): mount detachable file system
mount (II): mount file system
salv(I): repair damaged file system
umount(I): dismount removable file system
umount(II): dismount file system
- xiii -
[Page: 14]
find(I): find file with given name
pr( I): print file with headings
dsw(I): delete files interactively
mt(I): save/restore files on magtape
ar(I): archive (combine) files
concatenate (or print) files...cat(I):
( change access mode of files...chmod(I):
chown(I): change owner of files
wtmp(V): accounting files
archive(V): archive file
chmod( II): change mode of file
chown( II): change owner of file
close(II): close open file
core(V): core image file
‘ cp(I): copy file
‘. creat(II): create file
exec( II): execute program file
fstat(II): status of open file
link(II): link to file
in(I): link to file .
set date modified of file...mdate(II):
mv(I): move or rename file
od(I): octal dump of file
open(II): open file
passwd(V): password file
read(II): read file
rm(I): remove (delete) file
sort(I): sort Ascit file
sum(I): sum file
unlink( II): remove (delete) file
write(II): write file
du(I): find disk usage
find(I): find file with given name
af(I): find free disk space
tty(I): find name of terminal
tell(II): find read or write pointer
un(I): find undefined symbols
find(I): find file with given name
ftoa(III): convert floating to ASCII
_ const( III): floating-point constants
\ fptrap( III): floating-point simulator
atof(III): convert ASCII to floating
fork(II): create new process
form(I): generate form letter
fed(1I): form-letter editor
nroff(I): format text for printing
roff(I): format text for printing
directory(V): directory format
file system(V): file system format
tap(V): DECtape format
form(I): generate form letter
fe(I): compile Fortran program
fptrap( III): floating-point simulator
af(I): find free @isk space
fstat(II): status of open file
ftoa( III): convert floating to ASCII
- xiv -
[Page: 15]
exp (III): exponent ial function
bj(VI): the game of black jack
moo(VI): the game of MOO
ttt(VI): the game of tic-—tac-toe
jaent(V): GCOS ident cards
. gerts(III): communicate with GCOS
if communicate with MH-TSS (Gcos)...tss(I):
. form(I): generate form letter
gerts( III): communicate with GCOS
getc(III): get character
acct(I): get connect—time account ing
date(I): get date and time of day
we(I): get (English) word count
stat(I): get file status
‘ stat(II): get file status
tm(I): get time information
time(II): get time of year
gtty(II): get typewriter mode
getuid(II): get user ID
getc(III): get character
getty(VII): adapt to typewriter
getuid(II): get user ID
find(I): find file with given name
glob(VII): argument expander
goto(I): command transfer
gtty(II): get typewriter mode
pr(I)s print file with headings
ds(I): verify directory hierarchy
hog(II): set low-priority status
login(VII): how to log onto system
hypot( III): compute hypotenuse
hypot(III): compute hypotenuse
istat(I): file status by i—number
uids(V): map names to user ID’s ,
jdent(V): GCOS ident cards
jaent(V): GCOS ident cards
getuid(II): get user ID
setuid(II): set user ID
4£(I): conditional command
/ ilgins(II): catch illegal instruction trap
ilgins(II): catch illegal instruction trap
core(V): core image file
ptx(VI): permuted index
tm( I): get time information
utmp(V): logged-in user information
intr(II): catch or inhibit interrupts
quit( II): catch or inhibit quits
; jnit(VII):; initializer process
( {nit(VII): initializer process
, ilgins(II): catch jllegal instruction trap
jtoa(III): convert integer to ASCII
atoi( III): convert ASCII to integer
dsw(I): delete files interactively
sh(I): command interpreter
intr(II): catch or inhibit interrupts
intr(II): catch or inhibit interrupts
[Page: 16]
istat(I): file status by i-—number
jtoa(III): convert integer to ASCII
bj(VI): the game of black jack
kba(VII): map of TTY 37 keyboard
kbd(VII): map of TTY 37 keyboard
: kill(II): destroy process
{ :(I): place label
; la(I): link editor (loader )
form(I): generate form letter
lpr(IV): line printer
1a(I)s: link editor (loader )
link(II): link to file
In(I): link to file
link(II): link to file
4 ls(I): list contents of directory
, nlist(III): read name list
in(I): link to file
ali(VI): load DEC binary paper tapes
a,out(V): assembler and loader output
1a(1I): link editor (loader ) .
login(I): log on to system
login(VII): how to log onto system
log(III): logarithm base e
utmp(V): logged-in user information
log(III): logarithm base e
login(I): log on to system
login(VII): how to log onto system
hog(II): set low-priority status
Ipr(Iv): line printer
1s(I): list contents of directory
. m6(I): macroprocessor
mt(I): save/restore files on magtape
mtO(IV): magtape
mail(I): send mail to another user
mail(I): send mail to another user
makdir(II): create directory
man(I): run off manual section
tap(I): manipulate DECtape
man(I): run off manual section
uids(V): map names to user ID’s
( | ascii(VII): map of ASCII
kbd(VII): map of TTY 37 keyboard
mdate(II): set date modified of file
, mem(IV): core memory
mem(IV): core memory
mesg(I): permit or deny messages
mesg(III): print string on typewriter
mesg(I): permit or deny messages
tss(I): communicate with MH-TSS (GCOS )
msh(VII): mini Shell
mkdir(I): create directory
chmod(I): change access mode of files
Chmod(II): change mode of file
stty(II): set mode of typewriter
stty(I): set typewriter modes
gtty(II): get typewriter mode
- xvi -
[Page: 17]
mdate(II): set date modified of file
moo(VI): the game of MOO
moo(VI): the game of MOO
mount(I): mount detachable file system
mount (II): mount file system
- mount(I): mount detachable file system
\ mount (II): mount file system
. mv(I): move or rename file
. seek(II): move read or write pointer
msh( VII): mini Shell
mt(I): save/restore files on magtape
mtO(IV): magtape
mv(I): move or rename file
m6(I): macroprocessor
( nlist(III): read name list
tty(I): find name of .terminal
nm(I): print. namelist
vuids(V): map names to user ID’s
find(1I): find file with given name
fork(II): create new process
nlist(III): read name list °
nm(I): print namelist
nroff(I): format text for printing
od(I): octal dump of file
od(I): octal dump of file
man(I): run off manual section
opr(I): print file off-line
login(VII): how to log onto system
close(II): close open file
fstat(II): status of open file
open(II): open file
open(II): open file
opr(I): print file off—line
cat(I): concatenate (or print) files.
assembler and loader output...a,out(V):
ov(I): page overlay file print
ov(I): page overlay file print
chown(I): change owner of files
chown(II): change owner of file
; ov(I): page overlay file print
type(I): print file page-by-page
a@li(VI): load DEC binary paper tapes
apt(VviI): read DEC ASCII paper tapes
ppt(Iv): punched paper tape
passwd(V): password file
passwd(V): password file
mesg(I): permit or deny messages
ptx(VI): permuted index
( 3(I): place label
seek(II): move read or write pointer
tell(II): find read or write pointer
ppt(Iv): punched paper tape
chash(VI): prepare symbol table
pr(I): print file with headings
cal(VI): print calendar
echo(I): print command arguments
- xvii -
[Page: 18]
opr(I): print file off-line
type(I): print file page-by-page
pr(I): print file with headings
cat(I): concatenate (or print) files
nm(I): print namelist
mesg(III):. print string on typewriter
t ptime(III): print time
7 lpr(Iv): line printer
nroff(I): format text for printing
roff(I): format text for printing
ov(I): page overlay file print
pproc(VII): boot procedure
rele(II): release processor
fork(II): create new process
( jnit(VII): initializer process
kill(II): destroy process
wait(II): wait for process
preak(II): set program break
exec(II): execute program file
be(VI): compile B program
ec(I): compile C program
fe(I): compile Fortran program
tmg(VI): compile tmgl program
ptime(III): print time
‘ptx(VI): permuted index
ppt(Iv): punched paper tape
putc(III): write character or word
qsort(III): quicker sort
qsort(III): quicker sort
quit(II): catch or inhibit quits
quit( II): catch or inhibit quits
apt(VI): read DEC ASCII paper tapes
read(II): read file
nlist(III): read name list
seek(II): move read or write pointer
tell(II): find read or write pointer
read(II): read file
rele(II): release processor
rele(II): release processor
/ strip(I): remove symbols, relocation bits
( ttyO(IV): remote typewriter
umount(I): dismount removable file system
rmdir(I): remove (delete) directory
rm(I): remove (delete) file
unlink(II): remove (delete) file
strip(I): remove symbols, relocation bits
mv(I): move or rename file
salv(I): repair damaged file system
\ rew(I): rewind DECtape
rew(I): rewind DECtape
rfO(IV): RF disk
rfO(IV): RF. disk °
rkO(IV): RK disk
rkO(IV): RK disk
rmdir(I): remove (delete) directory
rm(I): remove (delete) file
- xviii -
[Page: 19]
roff(I): format text for printing
. sqrt(III): square root
rpO(Iv): RP disk
rpO(IV): RP disk
man(I): run off manual section
salloc( III): storage allocator
t salv(I): repair damaged file system
. mt(I): save/restore files on magtape
man(I): run off manual section
seek(II): move read or write pointer
mail(I): send mail to another user
exit( I): end command sequence
mdate(II): set date modified of file
hog(II): set low-priority status
( stty(II): set mode of typewriter
break(II): set program break
stime(II): set system time
tabs(VII): set tab stops on typewriter
stty(I): set typewriter modes
setuid(II): set user ID
setuid(II): set user ID
msh(VII): mini Shell
sh(I): command interpreter
fptrap(III): floating-point simulator
sin(III): sine, cosine
sin(III): sine, cosine
sleep(II): delay execution
sort(I): sort ASCII file
sort(I): sort ASCII file
qsort(III): quicker sort
af(I): find free disk space
@pd(I): spawn data-phone daemon
sqrt(III): square root
sqrt(III): square root
stat(I): get file status
stat(II): get file status
istat(I): file status by i-number
-fstat(II): status of open file
hog( II): set low-priority status-
( stat(I): get file status
stat(II): get file status
stime(II): set system time
tabs(VII): set tab stops on typewriter
salloc(III): storage allocator
mesg( III): print string on typewriter
strip(I): remove symbols, relocation bits
stty(I): set typewriter modes
stty(II): set mode of typewriter
( su(I): become super-user
| sum(I): sum file
sum(I): sum file
su(I): become super-user
basic(VI): DEC supplied BASIC
switch(III): transfer depending on value
. chash(VI): prepare symbol table
G@b(I): symbolic debugger
- xix -
[Page: 20]
strip(I): remove symbols, relocation bits
un(I): find undefined symbols
sync(II): assure synchronization
sync(II): assure synchronization
file system(V): file system format
stime(II): set system time
{ file system(v): file system format
. check consistency of file system...check(I):
login(I): log on to system
login(VII): how to log onto system
mount detachable file system...mount (I):
mount (II): mount file system
salv(I): repair damaged file system
dismount removable file system,,.umount(TI):
: - ymount( II): dismount file system
who(I): who is on the system
tabs(VII): set tab stops on typewriter
cChash(VI): prepare symbol table
cref(VI): cross-reference table
tabs(VII): set tab stops on typewr iter
tacct(I): connect-—time account ing
load DEC binary paper tapes...dli(VI):
a@pt(VI): read DEC ASCII paper tapes
ppt( Iv): punched paper tape
tap(I): manipulate DECt ape
tap(V): DECtape format
tapO(Iv): DECtape
tell(II): find read or write pointer
tty(I): find name of terminal
exit(II): terminate execution
ed(I): text editor
nroff(I): format text for printing
roff(I): format text for printing
ttt(VI): the game of tic-tac-—toe
tm(I): get time information
date(I): get date and time of day
time(II): get time of year
ctime(III): convert time to ASCII
time(II): get time of year
ptime( III): print time
stime(II): set system time
tmg(VI): compile tmgl program
tmg(VI): compile tmgl program
tm(I): get time information
switch( III): transfer depending on value
goto(I): command transfer
cemt(II): catch EMT traps =
catch illegal instruction trap...ilgins(II):
7 tss(I): communicate with MH-TSS (GCOS)
ttt(VI): the game of tic-tac-—toe
kbd(VII): map of TTY 37 keyboard
tty(I): find name of terminal
tty(IV): console typewr iter
ttyO( Iv): remote typewr iter
type(I): print file page-by-page
stty(I): set typewriter modes
_~ XX —
[Page: 21]
gtty(II): get typewriter mode
getty(VII): adapt to typewr iter
mesg( III): print string on typewriter
stty(II): set mode of typewriter
tabs(VII): set tab stops on typewriter
tty(IV): console typewr iter
ttyO(Iv): remote typewriter —
uids(V): map names to user ID’s
umount(I): dismount removable file system
umount (II): dismount file system
un(I): find undefined symbols
un(I): find undefined symbols
unlink( II): remove (delete) file
du(I): find disk usage
i uids(V): map names to user ID’s
: getuid(II): get user D
setuid(II): set user ID
utmp(V): logged-in user information
mail(I): send mail to another user
write(I): write to another user ;
utmp(V): logged-in user information
transfer depending on value...switch( III):
ds(I): verify directory hierarchy
wait(II): wait for process
wait(II): wait for process
we(I): get (English) word count
who(I): who is on the system
who(I): who is on the system
gerts( III): communicate with GCOS
fina(I): find file with given name
pr(I): print file with headings
tss(I): communicate with MH-TSS (GCOS )
we(I): get (English) word count
putc(III): write character or word
chair(I): change working directory
chdir(II): change working directory
putc(III): write character or word
write(II): write file
seek(II): move read or write pointer
( tell(II): find read or write pointer
write(I): write to another user
write(I): write to another user
write(II): write file
wtmp(V): accounting files
time(II): get time of year
anO(IvV): 801 ACU
apO(Iv): 201 Dataphone
kbd(VII): map of TTY 37 keyboard
—- xxi -
[Page: 22]
[Page: 23]
3/15/72 ; : (I)
NAME : --— place a label
| SYNOPSIS 3 [ label ]
DESCR IPT ION 3 does nothing, Its only function is to place a
. label for the.goto command. 3 is a command so
( the Shell doesn’t have to be fixed to ignore
lines with :°s.
FILES --
SEE ALSO goto( TI)
DIAGNOSTICS -— ;
BUGS --
OWNER dmr
(
{
-1-
[Page: 24]
3/15/72 accT (I)
NAME acct -- login account ing
SYNOPSIS acct [{ wtmp ]
DESCRIPTION acct produces 4 printout giving connect time and
total number of connects for each user who has
logged in during the life of the current wtmp
file. aA total is also produced, If no wtmp file
is given, /tmp/wtmp is used.
FILES /tmp/wtmp
SEE ALSO init(VII), tacct(I), login(T), wtmp(V).
. DIAGNOST ICS “cannot open ‘wtmp’” if argument is unreadable.
BUGS --
OWNER dmr, ken
; _ae
[Page: 25]
3/15/72 AR (I)
NAME ar -- archive
SYNOPSIS ar key afile name, .--
DESCR IPT ION ar maintains groups of files combined into a sin-
gle archive file, Its main use is to create and
‘ update library files as used by the loader, It
a can be used, though, for any similar purpose.
key is one character from the set artux, option-
ally concatenated with v. afile is the archive
file, The names are constituent files in the
archive file. The meanings of the key characters
are;
d means delete the named files from the archive
file.
xy means replace the named files in the archive
file. If the archive file does not exist, I will
create it. If the named files are not in the
archive file, they are app ended,
t prints a table of contents of the archive file,
If no names are given, all files in the archive
are tabled. If names are given, only those files
are tabled.
u is similar tor except that only those files
that have been modified are replaced. If no
names are given, all files in the archive that
have been modified will be replaced by the mod i-
fied version.
x will extract the named files. If no names are
given, all files in the archive are extracted.
In neither case does x alter the archive file.
v means verbose, Under the verbose option, ar
gives a file-by-file description of the making of
a new archive file from the old archive and the
constituent files. The following abbreviations
are used:
& copy
a append
a delete
xr replace
( x extract
FILES /tmp/vt m? temporary
SEE ALSO ld( I), archive(V )
DIAGNOST Ics “pad usage”, “afile --,nof in archiv6 format’,
cannot open temp file , name —— cannot open ,
-i-
[Page: 26]
3/15/72 AR (I)
“name -- phase error’, “name -- cannot create’,
wre archive file ,. cannot create archive file ,
name —- not found .
BUGS Option vt should be implemented as a table with
more information.

{

‘. There should be a way to specify the placement of
a new file in an archive. Currently, it is
placed at the end.

OWNER ken, dmr
i
{
-2-
[Page: 27]
6/15/72 AS (TI)
NAME as -- assembler
. SYNOPSIS as [- ] name, ...
DESCR IPT ION as assembles the concatenation of name), «ees as
is based on the DEC-provided assembler PAL-11R
[1], although it was coded locally. Therefore,
& ; only the differences will be recorded,

If the optional first argument — is used, all
undefined symbols in the assembly are treated as
global.

Character changes are:
i . for use
. @ ¥
# $
; /
In as, the character "." as a logical new line;
several operations may appear on one line if
separated by 3; . Several new expression opera—
tors have been provided:
\> right shift (logical)
\< left shift .
* multiplication
\/ division . .
% remainder (no longer means register )
! one’s complement
Q parentheses for grouping
result has value of left, type of right
- For example location 0 (relocatable) can be writ—
ten e) . 3 another way to denote register 2 is
2 r0 .
All of the preceding operators are binary; if a
left operand is missing, it is taken to be 0.
The "{! operator adds its left operand to the
; one’s complement of its right operand.
There is a conditional assembly operation code
different from that of PAL-11R (whose condition-
als are not provided):
.if expression
( endif
If the expression evaluates to non-zero, the sec—
tion of code between the .if and the ,endif
is assembled; otherwise it is ignored. if s
may be nested.
~-1-
[Page: 28]
6/15/72 AS (I)
Temporary labels like those {introduced by Knuth
[2] may be employed. A temporary label is de-
fined as follows:
one
. where n is a digit 0... 9. Symbols of the form
( "nf" refer to the first label “n:”" following the
use of the symbol; those of the form nb refer
to the last nm: . The same n may be used many
times. Labels of this form are less taxing poth
on the imagination of the programmer and on the
symbol table space of the assembler.
The PAL-11R opcodes " word”, " eot” and " end-
are redundant and are omitted.
The symbols .
rO ... Yd
frO ... fr5 (floating-point registers)
sp .
pc .
ac
mq
div
mul
lsh
ash
nor
csw .
are predefined with appropriate values. The sym-
bol ‘csw refers to the console switches. ee
is the relocation constant and is added to each
relocatable reference. On a PpP-11 with reloca-
tion hardware, its value is 0; on most systems
without protection, its value is 40000(8).
The new opcode “sys” is used to specify system
calls, Names for system calls are predefined.
See section (II).
The opcodes “pes” (branch on error set) and "bec"
(branch on error clear) are defined to test the
error status bit set on return from system calls.
; Strings of characters May be assembl ed in a way
more convenient than PAL-11’s  .ascii operation
(which is, therefore, omitted). Strings are ,,
included between the string quotes <" and > :
<here is a string?
Escape sequences exist to enter non graphic and
-~-2-
[Page: 29]
6/15/72 AS (TI)
other difficult characters. These sequences are
also effective in single and double character
constants introduced by single (°) and double (")
quotes respectively.
| use for
\n newline (012)
: \O NULL (000)
\> ?
\t TAB (011)
\a ACK (006)
\r cR (015)
\p ESC (033)
\\A \ (134)
i as provides a primitive segmentation facility.
There are three segments: text, data and bss.
The text segment is ordinarily used for code,
The data segment is provided for initialized but
variable data. The bss segment cannot be ini-
tialized, but symbols may be defined to lie
within this segment. In the future, it is ex-
pected that the text segment will be write-
protected and sharable. assembly begins in the
text segment. The pseudo-operations
etext
edata
~bss

cause the assembler to switch to the text, data,

or bss segment respectively. Segmentation is

useful at present for two reasons: Non—-
initialized tables and variables, if placed in
the bss segment, occupy no space in the output
file. Also, alternative use of the text and data
segment S provides a primitive dual location—-
counter feature.

In the output file, all text-segment information
comes first, followed by all data-segment infor-
mation, and finally bss information. Within each

segment, information appears in the order writ-

ten.

Note: since nothing explicit can be assembled

into the bss segment, the usual appearance of

this segment is in the following style:
{ ~bss
vari: e=et2
tabi: .=e+100.
That is, space is reserved but nothing explicit
is placed in it.
-3-
[Page: 30]
6/15/72 AS (TI)
As is evident from the example, it is legal to
assign to the location counter ".". It is also
permissible in segments other than ebss . The
restriction is made, however, that the value s0
assigned must be defined in the first pass and it
must be a value associated with the same segment
as ee
(
The pseudo-op .
.~comm symbol, expression
makes -Ssymbol an undefined global symbol, and °
places the value of the expression in the value
field of the symbol’s definition. Thus the above
‘ declaration is equivalent to
~globl symbol .
symbol = expression symbol
The treatment of such a symbol by the loader
jd(I) is as follows: If another routine in the
same load defines the symbol to be an ordinary
text, data, bss, or absolute symbol, that defini-
tion takes precedence and the symbol acts like a
normal undefined external. If however no other
routine defines the symbol, the loader defines it
as an external bss-segment symbol and reserves n
bytes after its location, where n is the value of |
the expression in the ,comm operation, Thus
.comm x,100 effectively declares x|to be a com-
mon region 100 bytes long. Note: all such de-
clarations for the same symbol in various
routines should request the same amount of space.
The binary output of the assembler is placed on
the file a.out. in the current directory. a,out
also contains the symbol table from the assembly
and relocation bits, The output of the assembler
is executable immediately if the assembly was
error-free and if there were no unresolved exter-
: nal references. The link editor 1d may be used
to combine several assembly outputs and resolve
global symbols.
The assembler does not produce a listing of the
source program, This is not a serious drawback;
the debugger db discussed below is sufficiently
powerful to render a printed octal translation of
‘ the source unnecessary.
on the last pages of this section is alist of .
all the assembler’s built-in symbols, In the
case of instructions, the addressing modes are as
follows:
-4-
[Page: 31]
6/15/72 AS (TI)
src, dst source, destination
r general register
fsrce,fdst floating source, destination
fr floating register
exp expression
The names of certain 41/45 opcodes are aifferent
t from those in the 11/45 manual; some were changed
to avoid conflict with EAE register names, others
to draw analogies with existing 11/20 instruc—
tions.
FILES /etc/as2 pass 2 of the assembler
/tmp/atm1? temporary
/tmp/atm2? temporary
i /tmp/atm3? temporary
a,out object
SEE ALSO la(I), nm(TI), sh(I), un(I), a@b(I), a.out(V),
fptrap(III), [1] PAL-11R Assembler; DEC-11-ASDE—
; p, [2] Knuth, The Art of Computer Programming,
vol. T3 Fundamental Algorithms.
D IAGNOST ICS when an input file cannot be read, its name fol-
lowed by a question mark is typed and assembly
ceases. When syntactic or semantic errors occur,
a single-character diagnostic is typed out to-
gether with the line number and the file name in
which it occurred, Errors in pass 1 cause can-
cellation of pass 2. The possible errors are:
) parentheses error
|} parentheses error
< String not terminated properly
* YIndirection ( * ) used illegally
. Illegal assignment to a
A error in Address
B Branch instruction is odd or too remote
E error in Expression wo.
F error in local ( F or b ) type symbol
G Garbage (unknown) character
I End of file inside an if
M Multiply defined symbol as label
Oo Odd-- word quant ity assembled at odd address
p Phase error-— + aifferent in pass 1 and ‘2
R Relocation error
U Undefined symbol
X syntaX error
BUGS Symbol table overflow is not checked.
tf "." is moved backwards by an odd number of
bytes, relocation pits are corrupted.
OWNER amr
-5-
[Page: 32]
6/15/72 AS (TI)
Special variables: tell
mount
e umount
oe setuid
getuid
Register: stime
‘ quit
N rO intr
ri fstat
r2 cemt
r3 mdate
r4 stty
r5 gtty
sp ilgins
, pc hog
‘ fro
fri Double operand:
fr2
fr3 , mov src,dst
fr4 movb 7
fr5 cmp .
cmpb "
Fae & switches: bit .
bitb .
csw bic
div bicb .
ac bis "
mq bisb *
mul add .
sc sub
sr
nor Branch:
ish
ash br
bne -
System calls: beq
bge
exit blt
fork bgt
. read ble
{ write bpl
open bmi
close bhi
wait blos
creat bve
link bvs
unlink bhis
exec . bec (= bec)
; chdir bec
time blo
makdir bes ;
chmod bes (= bes)
chown
br eak
stat
seek
~6-
[Page: 33]
6/15/72 AS (I)
Single operand: tstf fsre
movt fsrc,fr (= ldf)
clr ast movf fr,fdst (= stf )
clrb " movif src,fr (= ldcif)
com " movfi fr,dst (= stcfi)
comb movoft fsrce,fr (= ldcdf )
a inc " movfo fr,fdst (= stcfd)
incb " ~  addft fsrc,fr
dec - subf fsrc,fr
decb mulf fscr,fr
neg " aivf fsrc,fr
negb " empf fsre,fr
adc . modf fsrc,fr
adcb .
sbc ; 141/45 operations
: sbcb "
ror . als src,r (= ash)
rorb alsc src,r (= ashc)
rol " mpy src,r (= mul)
rolb " avd src,r (= div)
asr xor src,r
asrb " sxt dst
asl " mark exp
aslb " sob r,exp
: jmp .
swab os Specials
tst src
tstb src ~byte
.even
Miscellaneous: if
.endif
jsr r,dst .globl
rts xr etext
. ; sys exp (= trap) .data
; bss
Flag-setting: - comm
clc ;
clv
clz
{ cin
sec
sev
sez
sen
' Floating point Ops:
( cfcc
setf
setd
seti
setl
clrf fdst
negf fdst
absf fdst
-7-
[Page: 34]
3/15/72 BAS (I)
NAME bas -- basic
SYNOPSIS pas [ file ]
DESCRIPTION pas is a dialect of basic [1]. If a file argu-
ment is provided, the file is used for input
{ pefore the console is read.
pas accepts lines of the form: |
statement
integer statement
Int eger numbered statements (Known as internal
statements) are stored for later execution. They
' are stored in sorted ascending order, Non-
numbered statements are immediately executed.
The result of an immediate expression statement
(that does not have ‘=’ as its highest operator )
is printed.
Statements have the following syntax: (expr is
short for expression)
expr
The expression is executed for its side
effects (assignment or function call) or
for printing as described above.
done : .
Return to system level.
for name = expr expr statement
for name = expr expr
next
The for statement repetitively executes a
statement (first form) or a group of state-
ments (second form) under control of a |
named variable, The yariable takes on the
{ value of the first expression, then is
incremented by one on each loop, not to
exceed the value of the second expression.
goto expr
The expression is evaluated, truncated to
an integer and execution goes to the
corresponding integer numbered statment.
If executed from {mmediate mode, the int er-
nal statements are compiled first.
if expr statement
The statement is executed if the expression
; evaluates to non-zero.
list [expr [expr] ]
-i1-
[Page: 35]
3/15/72 BAS (TI) .
list is used to print out the stored inter-
nal statements. If no arguments are given,
all internal statements are printed. Tf
one argument is given, only that internal
statement is listed. If two arguments are
given, all internal statement s inclusively

jos between the arguments are printed.
print expr
The expression is evaluated and printed.
return expr
The expression is evaluated and the result
is passed back as the value of a function
; call.
run
The internal statements are compiled. The
symbol table js re-initialized. The random
number generator is re-set, control is
passed to the lowest numbered internal
statement.
Expressions have the following syntax:
name
A name is used to specify a variable,
Names are composed of a letter (’a° - ‘2°)
followed by letters and digits, The first
four characters of a name are significant.
; numb er
A number is used to represent a constant
value, A number is composed of digits, at
most one decimal point (‘.’) and possibly a
scale factor of the form e.digits or &=
digits.
( expr )
Parentheses are used to alter normal order
{ of evaluation.
expr op expr
Common functions of two arguments are ab-
breviated by the two arguments separated by
an operator denoting the function. A com—
: plete list of operators is given below.
. expr ( [expr L. expr weed] 2
Functions of an arbitrary number of argu-
ments can be called by an’ expression fol-
lowed by the arguments in parentheses
separated by commas. The expression evalu-
ates to the line number of the entry of the
function in the internally stored state-
ments. This causes the internal statement Ss
-2-
[Page: 36]
3/15/72 BAS (I)
to be compiled. If the expression evalu-
ates negative, 4 puiltin function is
called, The list of puiltin functions
appears below.

name [ expr [, expr wed
- Arrays are not yet implement ed.
The following is the list of operators:
= is the assignment operator. The left
operand must be a name or an array element.
The result is. the right operand. Assign-
: ment binds right to left, all other opera-
: tors bind left to right.
. & |
& (logical and) has result zero if either
of its arguments are Zero. It has result
one if both its arguments are non-zero.
(logical or) has result zero if both of its
arguments are zero. It has result one if
aw either of its arguments are non-zero.
| {<= > >= == O :
The relational operators (< less than, <=
less than or equal, > greater than, >=
greater than or equal, == equal to, <> not
~ equal to) return one 4f their arguments are
in the specified relation, They return
zero otherwise. Relational operators at
the same level extend as follows: a>boc is
the same as a>b&b>c.
+ =
Add and subtract.
* /
Multiply and divide.
. Exponent iation.
The following is a list of builtin functions:
; arg
aArg(i) is the value of the ith actual
parameter on the current level of function
call.
exp
Exp(x) is the exponential function of x.
' log
Log(x) is the logarithm base e of x.
-3-
[Page: 37]
3/15/72 BAS (I)
sin
Sin(x) is the sine of x (radians).
cos
cos(x) is the cosine of x (radians).
atn
Atn(x) is the arctangent of x. (Not imple-
ment ed. )
rnd
Rnd() is 4 uniformly distributed random
number between zero and one.
expr .

( Expr() is the only form of program input.
A line is read from the input and evaluated
as an expression. The resultant value is
returned.

int
Int(x) returns x truncated to an integer.
FILES /tmp/bt m? temporary
SEE ALSO [1] DEC-11-AJPB-D
DIAGNOSTICS Syntax errors cause the incorrect line to be
typed with an underscore where the parse failed.
All other diagnostics are self explanatory.
BUGS arrays [] are not yet implemented, In general,
program sizes, recursion, etc are not checked,
and cause trouble.
OWNER ken
{
~4-
[Page: 38]
3/15/72 CAT (T)
NAME cat —- concatenate and print
SYNOPSIS cat file, «+.
DESCRIPTION cat reads each file in sequence and writes it on
the standard output stream, Thus:
| cat file :
is about the easiest way to print a file. Also:
cat file! file2 pfile3
is about the easiest way to concatenate files.
If no input file is given cat reads from the
standard input file.
FILES --
SEE ALSO pr(I), cp( I) |
DIAGNOSTICS none; if a file cannot be found it is ignored.
BUGS --
OWNER ken, amr ;
(
‘
-1-
[Page: 39]
3/15/72 ce (TI)
NAME ce -— Cc compiler
SYNOPSIS ec [=-c ] sfile,.c¢ --- ofile, «--
DESCRIPTION ec is the UNIX C compiler. It accepts three
types of arguments:
i arguments whose names end with ".c are assumed
. to be C source programs}; they are compiled, and
the object program is left on the file sfile,.o
(i.e. the file whose name is that of the source
with .0O substituted for .C¢ ).
Other arguments (except for “_e") are assumed to
pe either loader flag arguments, of C-compatible
: object programs, typically produced by an earlier
cc run, or perhaps libraries of c-compatible
routines. These programs, together with the
results of any compilations specified, are loaded
(in the order given) to produce an executable
program with name a,out.
The "-c" argument suppresses the loading phase,
as does any syntax error in any of the routines
being compiled.
FILES file.c input file
a,out loaded output
c.tmp temporary (deleted)
/sys/c/ne compiler
/usr /lib/crt0.o runtime startoff
/usr/lib/libc.a puiltin functions, etc.
/usr/lib/liba.a system library
SEE ALSO c reference manual (in preparation), pe(VI)
DIAGNOSTICS Diagnostics are intended to be self-explanatory.
BUGS -—
7 OWNER dmr
’
| -1-
[Page: 40]
3/15/72 CHDIR (I)
NAME chdir -- change working directory
SYNOPSIS chair directory
DESCRIPTION Girectory becomes the new working directory.
Because a new process is created to execute each
command, chdir would be ineffective if it were
written as a normal command. It is therefore
recognized and executed by the shell.
FILES --
SEE ALSO sh( I)
DIAGNOSTICS “pad directory if the girectory cannot be
changed to.
BUGS —
OWNER ken, dmr
{
-1-
[Page: 41]
3/15/72 CHECK (TI)

NAME check -- file system consistency check

SYNOPSIS . check [ filesystem [ blockno, -«-- ] ]

DESCRIPTION check will examine a file system, build a bit map

of used blocks, and compare this bit map against

' the bit map maintained on the file system, If
the file system is not specified, a check of all
of the normally mounted file systems is per-
formed, Output includes the number of files on
the file system, the number of these that are
‘large’, the number of used blocks, and the
number of free blocks.

FILES /dev/rf?, /aev/rk?, /dev/rp?

| SEE ALSO find(I), as(Z)

DIAGNOSTICS Diagnostics are produced for blocks missing,
duplicated, and bad block addresses. Diagnostics
are also produced for block numbers passed as
parameters, In each case, the block number,
i-number, and block class (i = inode, x indirect,
f£ free) is printed.

BUGS The checking process is two pass in nature. If
checking is done on an active file system, ©x-
traneous diagnostics may occur.

The swap space on the RF file system is not ac-
counted for and will therefore show up as “miss-—
ing’.

OWNER ken, amr

{
;
-1-
[Page: 42]
3/15/72 © CHMOD (TI)
NAME chmod -- change mode
SYNOPSIS chmod octal file, ese
DESCRIPTION The octal mode replaces the mode of each of the
files, The mode is constructed from the OR of
{ the following modes:
01 write for non-owner
02 read for non-owner
04 write for owner
40 read for owner
20 executable
40 set—UID
; only the owner of a file may change its mode.
FILES —
SEE ALSO stat(I), 1s(T)
DIAGNOST ICS "en
BUGS -—
OWNER ken, amr
( .
ae
[Page: 43]
NAME chown -- change owner
SYNOPSIS chown owner file, eee
DESCRIPTION owner becomes the new owner of the files. The
owner may be either a decimal UID or a name found
in fetc/uids.
Only the owner of a file is allowed to change the
owner, It is illegal to change the owner of a
file with the set-user-ID mode.
FILES /etc/uids
SEE ALSO st at( I)
DIAGNOST ICS “who?” if owner cannot be found, “file?” if file
cannot be found.
BUGS --
OWNER ken, amr
{
_4-
[Page: 44]
3/15/72 CMP (TI)

NAME emp -- compare two files

SYNOPSIS cmp file, file,

DESCRIPTION The two files are compared for identical con-
tents. Discrepancies are noted by giving the

( offset and the differing words.

FILES --

SEE ALSO --

DIAGNOSTICS Messages are given for inability to open either
argument, premature EOF on either argument, and

j incorrect usage.

BUGS If the two files differ in length by one byte,
the extra byte does not enter into the compari-
son.

OWNER dmr

{
-i-
[Page: 45]
3/15/72 cP (TI)
NAME cp -- Copy
SYNOPSIS ep file, file,
DESCRIPTION The first file is opened for reading, the second
created mode 17. Then the first is copied into
Fj the second.
FILES --
SEE ALSO cat(I), pr(T)
DIAGNOSTICS Error returns are checked at every system call,
and appropriate diagnostics are produced,
BUGS The second file should be created in the mode of
the first.
A directory convention as used in mv should be
adopted for Cp.
OWNER ken, amr .
-i-
[Page: 46]
3/15/72, _ DATE (T)
NAME date -- print and set the date
SYNOPSIS date [ mmddhhmm J
DESCRIPTION If no argument is given, the current date is
printed to the second, If an argument is given,
H the current date is set, mm is the month number;
. dad is the day number in the month; hh is the hour
number (24 hour system); mm is the minute number.
For example:
date 10080045
sets the date to oct 8, 12:45 AM.
: FILES ~-
SEE ALSO --
DIAGNOSTICS “"o" 4£ the argument is syntactically incorrect.
BUGS —
OWNER amr |
| -i1-
[Page: 47]
3/15/72 DB (I)
NAME ab -- debug
SYNOPSIS db [ core { namelist ee 7]
DESCRIPTION Unlike many debugging packages (including DEC’s \
ODT, on which db is loosely based) db is not |
loaded as part of the core image which it is used
‘ to examine; instead it examines files. Typical-
ly, the file will be either a core image produced
after a fault or the binary output of the assem—
bler, Core is the file being debugged; if omit-
ted "core is assumed. namelist is 4 file con-
taining a symbol table. if it is omitted, the
symbol table is obtained from the file being
debugged, or 4£f not there from aout. If no
‘ appropriate name list file can be found, db can
still be used but some of its symbolic facilities
become unavailable.
For the meaning of the optional third argument,
see the last paragraph below. .
The format for most db requests is an address
followed by a one character command.
Addresses are expressions built up as follows:

4. A name has the value assigned to it when
the input file was assembled. It may be
relocatable or not depending on the use of
the name during the assembly.

2. An octal number is an absolute quantity
with the appropriate value.

3. An octal number immediately followed by "y"
4s a relocatable quantity with the ap-
propriate value.

4. The symbol “ " indicates the current

i pointer of db. The current pointer is set
by many db requests.

5, Expressions separated by "se" or ” ” (blank )
are expressions with value equal to the sum
of the components.. At most one of the com-
ponents may be relocatable.

; 6. Expressions separated by "_" form an ex~
‘ pression with value equal to the aifference
to the components. If the right component
is relocatable, the left component must be
relocatable.
| 7, Expressions are evaluated left to right.
| -4-
[Page: 48]
"3/45/72 — DB (I)
Names for registers are built in:
rO eee ©5
sp
pe
ac
{ mq
These may be examined. Their values are deduced
from the contents of the stack in a core image
file. They are meaningless in a file that is not
a core image.
If no address is given for a command, the current
address (also specified by . ) is assumed. In
t general, . points to the last word or byte
printed by db.
There are db commands for examining locations
interpreted as octal numbers, machine instruc—
tions, ASCII characters, and addresses. For
numbers and characters, either bytes or words may
be examined. The following commands are used to
examine the specified file.
/ The addressed word is printed in octal.
\. The addressed byte is printed in octal.
“ The addressed word is printed as two ASCII
me characters.
* mhe addressed byte is printed as an ASCII
character.
*’ he addressed word is multiplied by 2, then
printed in octal (used with B programs,
whose addresses are word addresses )e
> he addressed word is interpreted as a
{ machine instruction and a symbolic form of
, the instruction, including symbolic ad-
dresses, is printed. often, the result
will appear exactly as it was written in
the source program.
& The addressed word is interpreted as a sym—
bolic address and is printed as the name of
the symbol whose value is closest to the
addressed word, possibly followed by a
signed offset.
<nl> (ie ee, the character “new line’) This
command advances the current location
counter ".” and prints the resulting loca-
tion in the mode last specified by one of
-~- 2-
[Page: 49]
3/15/72 DB (I)
the above requests.

* This character decrements "." and prints

the resulting location in the mode last
selected one of the above requests. It is
a converse to <nl>.

% Exit.

It is illegal for the word-oriented commands to
have odd addresses. The incrementing and decre-
menting of . done py the <nl> and requests is
by one or two depending on whether the last com—
mand was word or byte oriented.

t The address portion of any of the above commands .
may be followed by a comma and then by an expres—
sion. In this case that number of sequential
words or bytes specified by the expression is
printed. . is advanced so that it points at
the last thing printed.

There are two commands to interpret the value of
expressions.

. = When preceded by an expression, the value
of the expression is typed in octal. When
not preceded by an expression, the value of

.” is indicated. This command does not
. change the value of « -e
: An attempt is made to print the given ex-
pression as a symbolic address. If the
expression is relocatable, that symbol is
found whose value is nearest that of the
expression, and the symbol is typed, fol
lowed by a sign and the appropriate offset.
- I£ the value of the expression is absolute,
a symbol with exactly the indicated value
is sought and printed if found; if no
i matching symbol is discovered, the octal
value of the expression is given.
The following command may be used to patch the
file being debugged. ,
1 This command must be preceded by an expres—
sion. The value of the expression is
stored at the location addressed by the
current value Of « « The opcodes do not
appear in the symbol table, so the user
must assemble them by hand. .
The following command is used after a fault has
caused a core image file to be produced.
-3-
[Page: 50]
3/15/72 DB (TI)
$ causes the fault type and the contents of
the general registers and several other
registers to be printed both in octal and
symbolic format. The values are as they
were at the time of the fault.

Db should not be used to examine special files,
for example disks and tapes, since it reads one
byte at a time. Use od(I) instead.

For some purposes, it is important to know how
addresses typed by the user correspond with loca-
tions in the file being debugged. The mapping
algorithm employed by db is non-trivial for two

; reasons: First, in an a.out file, there is a

\ 20(8) byte header which will not appear when the

file is loaded into core for execution. There-
fore, apparent location 0 should correspond with
actual file offset 20. Second, some systems
cause a squashed core image to be written. In
such a core image, addresses in the stack must be
mapped according to the degree of squashing which
has been employed. Db obeys the following rules:
If exactly one argument is given, and if it ap-
pears to be an aout file, the 20-byte header is
skipped during addressing, i.e., 20 is added to
all addresses typed. As a consequence, the
header can be examined beginning at location -20.
If exactly one argument is given and if the file
does not appear to be an a.out file, no mapping
is done.
If zero or two arguments are given, the mapping
appropriate to a core image file is employed.
This means that locations above the program break
and below the stack effectively do not exist (and
are not, in fact, recorded in the core file).
Locations above the user’s stack pointer are
i ; mapped, in looking at the core file, to the place
where they are really stored. The per-process
data kept by the system, which is stored in the
last 512(10) bytes of the core file, can be ad-
dressed at apparent locations 460000-160777.
If one wants to examine a file which has an asso-
ciated name list, but is not a core image file,
; the last argument """ Gan be used (actually the
, only purpose of the last argument is to make the
number of arguments not equal to two). This
feature is used most frequently in examining the
memory file /dev/mem.
FILES -—
- 4 -
[Page: 51]
3/15/72 . DB (I)
SEE ALSO as(I), core(V), a.out(v), od(T)
DIAGNOSTICS “File not founda” if the first argument cannot be
read; otherwise ? e
BUGS The "~" request always decrements ". by 2, even
( ; in byte mode.
OWNER . dmr
{
i
-5-
[Page: 52]
3/15/72 pc (TI)
NAME dc -— desk calculator
SYNOPSIS de
DESCRIPTION dc is an arbitrary precision integer arithmetic
package. The overall structure of de is a stack—
a ing (reverse Polish) calculator. The following
constructions are recognized by the calculator:
number
The value of the number is pushed on the
stack, If the number starts with a zero, it
is taken to be octal, otherwise it is decimal.
{ +-o* Lh
. The top two values on the stack are added (+),
subtracted (-), multiplied (*), divided (J),
or remaindered (%). The two entries are
poppped off of the stack, the result is pushed
on the stack in their place.
Sx
The top of the stack is popped and stored into
: a register named x, where x may be any charac-—
ter.
ix
The value in register x is pushed on the
stack, The register x is not altered.
a
The top value on the stack is pushed on the
. stack. Thus the top value is duplicated.
. Pp
The top value on the stack is printed in de-
cimal. The top value remains unchanged. .
£
; All values on the stack are popped off and
printed in decimal,
g
exits the program
x |
treats the top element of the stack as a char-
acter string and executes it as a string of dc
commands
i
interprets the rest of the line as a UNIX com-
mand,
x
All values on the stack are popped.
, _4-
[Page: 53]
3/15/72 pc (I)
nk n
A scale factor of 10" is set for all subse-
quent multiplication and division.
new-line
space
‘ ignored.
An examole to calculate the monthly, weekly and
hourly rates for a $10,000/year salary.
40000 .
400* (now in cents)
dasa (non-destructive store)
i 12/ (pennies per month)
. 1a52/ (pennies per week)
ai0* (deci-pennies per week )
375/ (pennies per hour )
f (print all results)
(3) 512
(2) 19230 .
(1) 83333
FILES -—
SEE ALSO --
; DIAGNOSTICS (x) 2? for unrecognized character xX.
(x) 2? for not enough elements on the stack to do
what was asked.
. Out of space when the free list is exhausted.
BUGS f is not implemented
¥ is not implemented
OWNER rhm
’
(
t
| _o-
[Page: 54]
3/15/72 DF (I)
NAME | af -- disk free
SYNOPSIS af [ filesystem ]
DESCRIPTION af prints out the number of free blocks available
on a file system. If the file system is unspeci-
f fied, the free space on all of the normally
; mounted file systems is printed.
FILES /aev/rf?, /aev/rk?, /aev/rp?
SEE ALSO check ( I)
. | DIAGNOSTICS --
BUGS --
OWNER ken, dmr
{
(
-1-
[Page: 55]
3/15/72 DPD (I)
NAME apa -- spawn data phone daemon
SYNOPSIS fetc/dpa
DESCRIPTION dpd is the 201 data phone daemon. It is designed
to submit jobs to the Honeywell 6070 computer via
i the gerts interface.
dpd uses the directory /usr/dpd. The file lock
in that directory is used to prevent two daemons
from becoming active. After the daemon has suc—
cessfully set the lock, {4t forks and the main
path exits, thus spawning the daemon. /usr/dpd
is scanned for any file beginning with df. Each
; such file is submitted as a job. Each line of a
‘ job file must begin with a key character to
specify what to do with the remainder of the line
S directs apd to generate a unique snumb card.
This card is generated by inerementing the
first word of the file /usr/dapa/snumb and con-
verting that to decimal concatenated with the
station ID.
L specifies that the remainder of the line is
to be sent as a literal,
B specifies that the rest of the line is a
file name, That file is to be sent as binary
cards,
F is the same as B except the file is pr epend—
ed with a form feed.
uU specifies that the rest of the line isa
file name. After the job has been transmit—
ted, the file is unlinked.
Any error encountered will cause the daemon to
drop the call, wait up to 20 minutes and start
i over. This means that an improperly constructed
af file may cause the same job to pe submitted
every 20 minutes.
While waiting, the daemon checks to see that the
lock file still exists. If the lock is gone, the
daemon will exit. .
a FILES /dev/ano, /aev/ap0, /usr /apa/*
SEE ALSO opr (I)
DIAGNOSTICS --
| BUGS -- .
-~1-
[Page: 56]
3/15/72 pp (7)
OWNER ken
{
wa!
-2--
[Page: 57]
3/15/72 Ds (I)

NAME ds --— directory consistency check

SYNOPSIS ds [ output ]

DESCR IPT ION ds will walk the girectory tree from the root
keeping a list of every file encountered, The

second pass will read the i-list and compare the

number of links there with the actual number
found, All discrepancies are noted,
If an argument is given, a complete printout of
file names by {—-number is output on the argument.

FILES /, /aev/rk0, /tmp/dastmp

SEE ALSO check (I)

D IAGNOST ICS inconsistent {-numbers

BUGS the root is noted as inconsistent due to the fact
that / exists in no directory. (Its i—number is
41.)
das should take an alternate file system argument.

OWNER ken
Negi
-i-
[Page: 58]
3/15/72 psw (TI)

NAME asw -- delete interactively

SYNOPSIS asw [ directory ]

DESCRIPTION For each file in the given directory ("." if not
specified) dsw types its name. If “y is typed,

. the file is aeleted; if xs; asw exits; if any-

thing else, the file is not removed.

FILES -
SEE ALSO rm( I)
DIAGNOST ICS “9”

BUGS The name “dsw” is a carryover from the ancient
past, Its etymology is amusing but the name is
nonetheless ill-advised.

OWNER amr, ken
4
‘ _ 4 _
[Page: 59]
3/15/72 DU (TI)
NAME du — summarize Gisk usage
SYNOPSIS au [zs ] [ -a ] [ name .-- ]
DESCRIPTION du gives the number of blocks contained in all
files and (recursively) directories within each
( specified directory or file name. If name is
missing, . is used.
The optional argument -—S causes only the grand
total to be given. The optional argument —&
causes an entry to pe generated for each file.
Absence of either causes an entry to be generated
for each directory only.
7 a £ile which has two links to it is only counted
once.
FILES °
SEE ALSO -- .
DIAGNOSTICS --
BUGS Non-directories given as arguments (not under -&a
option) are not listed.
Removable file systems do not work correctly
since i-numbers may be repeated while the
corr esponding files are distinct. pu should
maintain an j-number list per root directory
_ encount ered.
| OWNER amr
(
{
| -i-
[Page: 60]
3/15/72 ECHO (TI)
| NAME echo -- echo arguments
SYNOPSIS echo [ arg, es. j
DESCRIPTION echo writes all its arguments in order as a line
on the standard output file, It is mainly useful
for producing diagnostics in command files.
FILES --
SEE ALSO --
DIAGNOSTICS -—— |
; BUGS -—
| OWNER doug
-1-
[Page: 61]
6/12/72 ED (I)

NAME ed -—- editor

SYNOPSIS ed [ name ]

DESCRIPTION ed is the standard text editor.
If the optional argument is givens ed simulates |

. an e command on the named file; that is to say,

the file is read into ed’s buffer 50 that it can
be edited.

ed operates on a copy of any file it is editing;
changes made in the copy have no effect on the
file until an explicit write (w) command is
given. The copy of the text being edited resides

( in a temporary file called the puffer. There is

only one puffer.
Commands to ed have a simple and regular
structure: zero or more addresses followed by 4
single character command, possibly followed by
parameters to the command. These addresses
specify one or more lines in the buffer. Every
command which requires addresses has default
addresses, so that the addresses can often be
omitted.
In general only one command may appear on a line.
Certain commands allow the input of text. This
text is placed in the appropriate place in the
puffer. While ed is accepting text, it is said
to be in input mode. In this mode, no commands
are recognized; all input is merely collected.
Input mode is left by typing 4 period (.) alone
at the beginning of a line.
ed supports 4 limited form of regular expression
notation. A regular expression is an expression
which specifies 4 set of strings of characters.
A member of this set of strings is said to be
matched by the regular expression. The regular
expressions allowed by ed are constructed as
follows: \

4. An ordinary character (not one of those
discussed pelow) is a regular expression
and matches that character.

2. A circumflex (~) at the beginning of a reg-
ular expression matches the null character
at the beginning of a line.

3. A currency symbol ($) at the end of a regu—-
lar expression matches the null character
at the end of a line.

-i-
[Page: 62]
6/12/72 ED (I)

4. A period (,) matches any character but a
new-line character.

5. A regular expression followed by an aster-—
isk (*) matches any number of adjacent
occurrences (including zero) of the regular

) expression it. follows.

6. A string of characters enclosed in square
prackets ({]) matches any character in the
string but no others. If, however, the
first character of the string is 2 circum—
flex () the regular expression matches any
character but new-line and the characters

. in the string.

i

7. The concatenation of regular expressions is
a regular expression which matches the con—
catenation of the strings matched by the
components of the regular expression.

8. The null regular expression standing alone
is equivalent to the last regular expres—
sion encountered.

; Regular expressions are used in addresses to
specify lines and in one command (s, see below)
to specify 4 portion of a line which is to be

replaced.

If it is desired to use one of the regular ex-
pression metacharacters as an ordinary character,
that character may be preceded py \-e This also
applies to the character pound ing the regular

. expression (often /) and to \" itself.
Addresses are constructed as follows. TO under-

stand addressing in ed it is necessary to know

that at any time there is a current line. Gen-

4 erally speaking, the current line is the last

line affected by 4 command; however, the exact

7 effect on the current line by each command is
discussed under the description of the command.
4. The character " " addresses the current
line.
2. The character na" .qdresses the line im-
mediately before the current line.
3. The character “"s" addresses the last line
of the buffer.
. 4. A decimal number B addresses the nth line
of the buffer.
| - 2 -
[Page: 63]
6/12/72 ED (I)
6. A regular expression enclosed in slashes

/" addresses the first line found by
searching toward the end of the buffer and
stopping at the first line containing a
string matching the regular expression. If
necessary the search wraps around to the
beginning of the puffer.

5. A regular expression enclosed in queries
2" addresses the first line found by
searching toward the beginning of the
puffer and stopping at the first line found
containing a string matching the regular
expression. If necessary the search wraps
around to the end of the buffer.

{

. 7, An address followed by a plus sign "4" or a
minus sign — followed by a decimal number
specifies that address plus (resp. minus )
the indicated number of lines. The plus
sign may be omitted.

g, "‘’x" addresses the line associated (marked )
with the mark name character x which must
be a printable character. Lines may be
marked with the "k’ command described
below,

Commands may require zero, One, or two addresses.
Commands which require no addresses regard the
presence of an address as an error. Commands
which accept one or two addresses assume default
addresses when insufficient are given. If more
addresses are given than such a command requires,
the last one or two (depending on what is accept-—
. ed) are used.
Addresses are separated from each other typically
by a comma (,). They may also be separated by, a,
semicolon (;)..iIn this case the current line .
is set to the the previous address before the
( next address is interpreted. This feature can be
used to determine the starting, line for forward
and backward searches (/, ? ). The second
address of any two-address sequence must
correspond to a line following the line
corresponding to the first address.

In the following list of ed commands, the default

a addresses are shown in parentheses. The

parentheses are not part of the address, but are.

used to show that the given addresses are the

default.

As mentioned, it is generally illegal for more

than one command to appear on a line. However,
—- 3-
[Page: 64]
6/12/72 ED (I)
any command may be suffixed by "p" (for “print’).
In that case, the current line is printed after
the command is complete.
(.)a
mo <text>
\ The append command reads the given text and
appends it after the addressed line. “.”
is left on the last line input, if there
were any, otherwise at the addressed line.
Address 0” is legal for this command; text
| is placed at the beginning of the buffer.
(.,-)¢
i <text>
| The change command deletes the addressed
+ lines, then accepts input text which re-
places these lines. *.' is left at the
last line input; if there were none, it is
left at the first line not changed.
(.,-)d
The delete command deletes the addressed
lines from the buffer. The line originally
, after the last line deleted becomes the
current line; if the lines deleted were
originally at the end, the new last line
becomes the current line.
e filename
The edit command causes the entire contents
of the buffer to be deleted, and then the
, named file to be read in. . is set to
' ; the last line of the buffer, The number of
characters read is typed. filename is
remembered for possible use as a default
file name in a subsequent r or w command.
; £ filename
| The filename command prints the currently
remembered file name. If filename is
given, the currently remembered file name
is changed to filename .
(1,$)g/regular expression/command list
In the global command, the first step is to
mark every line which matches the given
( regular expression. Then for every such
line, the given command list is executed
with ".” initially set to that line. A
single command or the first of multiple
commands appears on the same line with the
global command. All lines of a multi-line
| list except the last line must be ended
-4-
t
[Page: 65]
6/12/72 ED (I)
with "\". a, i, and ¢ commands and associ-
ated input are permitted; the ",. terminat—
ing input mode may be omitted if it would
be on the last line of the command list.
The (global) commands, g and v, are not
permitted in the command list.
we (.)i .
<text>
This command inserts the given text before
the addressed ‘line. . is left at the
last line input; if there were none, at the .
addressed line. This command differs from
the a command only in the placement of the
(.)kx
The mark command associates or marks the
addressed line with the single character
mark name x. The ‘en most rec&gt mark
names are remembered, The current mark
names may be printed with the n command.
(.,-)1 ;
‘ The list command prints the addressed lines
in an unambiguous Way. Non-printing char- ;
‘acters are oyer-struck as follows: _
. char rints 5 7
bs Ee . é
tab >
. ret <
st = ‘
So e
All characters preceded by 4 prefix (ESC)
character are printed over-struck with
without the prefix. Long lines are folded
“. with the sequence \newline.
(.,-)mA .
The move command will reposition the ad—
t dressed lines after the line addressed by
"a". The line originally after the last
line moved becomes the current line; if the
lines moved were originally at the end, the
new last line becomes the current line.
n
The marknames command will print the
t current mark names.
(.,-)P
The print command prints the addressed .
lines. .” is left at the last line print-
ed. The p command may be placed on the
same line after any command.
-5-
[Page: 66]
3/15/72 op (TI)
NAME od —- octal dump
SYNOPSIS od name { origin 7
DESCRIPTION od dumps 4 file in octal, eight words per line |
with the origin of the line on the left. If @™
octal origin is given it js truncated to 0 mod 16
and dumping starts from there, otherwise from O.
Printing continues until an end-of-file condition
or until halted py sending an interrupt signal.
Since od does not seek, but reads to the desired
starting point, od (rather than db) should be
used. to dump special files.
5 FILES --
SEE ALSO db(I) | .
DIAGNOSTICS "9"
BUGS —
OWNER ken, amr
t
-i-
[Page: 67]
6/12/72 ED (I)
S
The guit command causes ed to exit. No
automatic write of a file is done.
($)xr filename
The read command reads in the given file
after the addressed line. If no file name
{ is given, the remembered file name, if any,
is used (see e and £ commands). The remem-
bered file name is not changed unless
filename is the, very first file name men-
tioned. Address O is legal for x and
j causes the file to be read at the beginning
of the buffer. If the read is successful,
the number of characters read is typed.
: . is left at the last line read in from
| the file.
\ ,
(.,-)s/regular expression/replacement/ Or,
(.,.)s/regular expression/replacement/g
) The substitute command searches each ad—
dressed line for an occurrence of the
' specified regular expression. On each line
in which a match is found, all matched
strings are replaced by the replacement
specified, if the global replacement indi-
cator “g appears after the command. If
the global indicator does not appear, only
the first occurrence of the matched string
is replaced. It is an error for the sub-—
stitution to fail on all addressed lines.
Any character other than space or new-line
may be used instead of "/" to delimit the
regular expression and the replacement.
. is left at the last line substituted.
The ampersand “&" appearing in the replace-
ment is replaced by the regular expression
that was matched. The special meaning of
& in this context may be suppressed by
preceding it by \.
(1,$)v/regular expression/command list
This command is the same as the global com- _~
mand except that the command list is exe-
cuted with ".” initially set to every line
except those matching the regular expres—
sion
(1,$)w filename
The write command writes the addressed
lines onto the given file. If the file
does not exist, it is created mode 17
(readable and writeable by everyone). The
remembered file name is not changed unless
“filename” is the very first file name
-6-
[Page: 68]
6/12/72 ED (I)
mentioned. If no file name is given, the
remembered file name, if any, is used (see
e and ft commands) « . ais unchanged. If
the command is successful, the number of
characters written is typed.

($)= .
{ The line number of the addressed line is
typed. . is unchanged by this command.
{UNIX command ; now
The remainder of the line after the ! is
sent to UNIX to be interpreted as a com—
mand. . jis unchanged.
i (.+1)<newline>
— An address alone on a line causes that line
to be printed. A blank line alone is
equivalent to .+1p ; it is useful for
stepping through text.
If an interrupt signal (ASCII DEL) is sent, ed
will print a ? and return to its command level.
If invoked with the command name ‘-", (see init),
ed will sign,on with the message Editing system
’ and print "*" as the command level prompt charac-—
ter.
Ed has size limitations on the maximum number of
lines that can be edited, and on the maximum
number of characters in a line, in a4 global’s
command list, and in a remembered file name.
These limitations vary with the physical core
size of the PDP11 computer on which ed is being
used. The range of limiting sizes for the above
mentioned items is; 1300 - 4000 lines per file,
256 — 512 characters per line, 63 -— 256 charac—
ters per global command list, and 64 characters
per file name.
FILES /tmp/etm? _ temporary aon
/etc/msh to implement the ! command.
SEE ALSO -- |
DIAGNOSTICS “o" for any error
BUGS -_
OWNER ken, dmr, jfo
-7-
[Page: 69]
3/15/72 EXIT( I) .
NAME exit -- terminate command file
SYNOPSIS exit .
DESCRIPTION exit performs a seek to the end of its standard
input file, Thus, if it is invoked inside a file
F of commands, upon return from exit the shell will
i discover an end-of-file and terminate.
FILES _—
SEE ALSO if(I), goto(I), sh(I)
DIAGNOSTICS --
‘ BUGS --
OWNER dmr
{
-~-1i1-
[Page: 70]
3/15/72 FC (T)

NAME fc -- fortran compiler

SYNOPSIS fc [ -<¢ ] sfile,.f .-- ofile, ..-

DESCRIPTION fe is the UNIX Fortran compiler, It accepts
three types of arguments:

{ Arguments whose names end with “ £" are assumed
to be Fortran source programs; they are compiled,
and the object program is left on the file
sfile,.o (i.e. the, file whose name is that of
the sdurce with ",o substituted for f ).

Other arguments (except for "-c") are assumed to
be either loader flags, or object programs, typi-

: cally produced by an earlier fe run, or perhaps

libr aries of Fortran-compatible routines. These
programs, together with the results of any compi-
lations specified, are loaded (in the order
given) to produce an executable program with name
a,out.

The "-c" argument suppresses the loading phase,

as does any syntax error in any of the routines

being compiled.

The following is a list of aifferences between fc

ana ANSI standard Fortran (also see the BUGS

section):

4. Arbitrary combination of types is allowed in
expressions. Not all combinations are expect—
ed to be supported at runtime, All of the
normal conversions involving integer, real,
double precision and complex are allowed.

2. The ‘standard’ implicit statement is recog-
nized,

3, The types Goubl ecomplex, logical*1, integer*2

a and real*8 (doubl epr ecision) are supported.

4. & as the first character of a line signals a
continuation card,

5. ¢ as the first character of a line signals a
comment.

6. All keywords are recognized in lower case.
7, The notion of “column 7° 4s not implemented.
8, G-format input is free form-- leading blanks
are ignored, the first blank after the start
of the number terminates the field.
a
[Page: 71]
3/15/72 . FC (I)
9, A comma in any numeric or logical input field
terminates the field.
40. There is no carriage control on output,
In I/O statements, only unit numbers 0-19 are
support ed. Unit number nn corresponds to file
( fortnn;” (e.g. unit 9 is file “fort09"). For
input, the file must exist; for output, it will
be created,
FILES file.f input file
! a,out loaded output
£.tmp[123] temporary (deleted)
/usr /fort /£c [1234] compilation phases
4 /usr/lib/fr0.0o runtime startoff
i /usr/lib/filib.a interpreter library
| /usr/lib/libf.a builtin functions, etc.
/usr/lib/liba.a system library
SEE ALSO ANSI standard
DIAGNOSTICS Compile-time diagnostics are given by number. If
the source code is available, it is printed with
an underline at the current character pointer.
A Errors possible are:
1 statement too long
2 syntax error in type statement
3 redeclaration
4 missing ( in array declarator |
ss) , syntax error in dimension statement
6 inappropriate or gratuitous array de-
clarator
7 syntax error in subscript bound
' 8 illegal character
9 common variable is a parameter or already
in common
10 common syntax error
} 11 subroutine/blockdata/function not first
; statement
\ 12 subroutine/function syntax error
13 block data syntax error
' 14 redeclaration in external
415 external syntax error
16 implicit syntax error
17 subscript on non-array
’ 18 incorrect subscript count
19 subscript out of range
\ 20 subscript syntax error
23 equivalence inconsistency
| 24 equivalence syntax error
25 separate common blocks equiv alenced
26 common block illegally extended by
} equivalence
27 common inconsistency created by
-2-
[Page: 72]
3/15/72 FC (TI)
equivalence
29 () imbalance in expression
30 expression syntax error
. 31 illegal variable in equivalence
33 non array/function used with
subscripts/arguments
; 35 goto syntax error
‘ 37 illegal return
38 continue, return, stop, call, end, or
pause syntax error
39 assign syntax error
40 if syntax error
41 I/o syntax error
42 do or I/O iteration error
43 do end missing
i 50 illegal statement in block data
51 multiply defined labels
52 undefined label
53 dimension mismatch
54 expression syntax error
55 end of statement in hollerith constant
56 array too large
i 99 B table overflow
101 unrecognized statement
Runtime diagnostics:
1 invalid log argument
2 bad arg count to amod
3 bad arg count to atanz2
4 excessive argument to cabs
. 5 exp too large in cexp
6 bad arg count to cmp1x
7 bad arg count to dim
8 excessive argument to exp
9 bad arg count to idim
10 bad arg count to isign
11 bad arg count to mod
12 bad arg count to sign ,
13 illegal argument to sqrt
( 14 assigned/computed goto out of range
45 subscript out of range
400 illegal I/O unit number
101 inconsistent use of I/O unit
102 cannot create output file
103 cannot open input file
104 EOF on input file
105 illegal character in format
106 format does not begin with (
107 no conversion in format but non-empty
list ,
108 excessive parenthesis depth in format
109 illegal format specification
110 illegal character in input field
111 end of format in hollerith specification
-3-
[Page: 73]
3/15/72 Fc (TI)
999 unimplemented input conversion
BUGS The following is a list of those features not yet
implement ed:
’ loading of common (a BLOCK DATA program must be
written to allocate common).
\
- arithmetic statement functions
data statements
backspace, endfile, rewind runt ime
binary 1/0
| ( no scale factors on input
| OWN ER dmr, ken
)
(
ae
[Page: 74]
6/15/72 FED (T)
NAME fed -- edit associative memory for form letter
SYNOPSIS fed
DESCRIPTION fed is used to edit a form letter associative
memory file, form.m, which consists of named
. strings. Commands consist of single letters fol-
lowed. by a list of string names separated by a
single space and ending with a new line. The
conventions of the Shell with respect to ’*’ and
“5° hold for all commands but e and m where
literal string names are expected. The commands
are:

' | e name, .o-

—_ 1

| edit writes the string whose name is name,

y onto a temporary file and executes the sys-
tem editor ed. On exit from the system edi-
tor the temporary file is copied back into

| the associative memory. Each argument is
operated on separately. The sequence of
commands to add the string from ‘file’ to
memory with name ‘newname’ is as follows:

' e newname

fe) (printed by ed)
r file
w
q (get out of ed)
q (get out of fe)
To dump a string onto a files
' e name
200 (printed by ed)
w filename
' q (get out of ed)
\ q (get out of fe)
;
a [ NAME, oe }
deletes a string and its name from the
memory. When called with no arguments d
operates in a verbose mode typing each
' string name and deleting only if a ‘y’ is
typed. A ‘q’ response returns to command
, level. Any other response does nothing.
|
m name, Names ees
(move) changes the name of name, to name,
and removes previous string name if one
exists, Several pairs cf argumehts may be
|
-1-
[Page: 75]
6/15/72 FED (I)
given.
n [ name, «+s 7}
(names) lists the string names in the
: memory. If called with the optional argu—
ments, it just lists those requested.
p name, ---
prints the contents of the strings with
names given by the arguments.
(
q (quit) returns to the system.
e{fpllil .
checks the associative memory file for con—-
sistency. The optional arguments do the
following:
p causes any unaccounted for string to be
printed
f fixes broken memories by adding
unaccounted-for headers to free storage
and removing references to released
headers from associative memory.
FILES /tmpo/ftmo? temporary
form.m associative memory
SEE ALSO form(I), eda(T), sh(T)
DIAGNOSTICS ‘>’ unknown command
‘ ‘cannot open temp. file’-- cannot create a tem-
porary file for ed command
“name not in memory.’ if string ‘name’ is not in
the associative memory and is used as an argument
for d or Mm.
BUGS --
_ OWNER rhm,lic
-2-
[Page: 76]
3/15/72 . FIND (I)

NAME find — find file with given name

SYNOP SIS find name or number .e-«

DESCRIPTION find searches the entire file system hierarchy

and gives the path names of all files with the

‘ specified names or (decimal) i-numbers.

FILES . £

SEE ALSO --

DIAGNOSTICS -- .
; BUGS --
OWNER amr

-i-
[Page: 77]
6/15/72 ae FORM (I)
' NAME form -- form letter generator
SYNOPSIS form proto arg, «es
DESCRIPTION form genefates a form-letter from a prototype
letter, an associative memory, arguments and in a
{ special case, the current date. .
If form is invoked with the proto argument *x’,
the associative memory is searched for an entry
with name ’x’ and the contents filed under that
name are used as the prototype. If the search
4 fails, the message "Ex] 2" is typed on the console
, and whatever text is typed in from the console,
j terminated by two new lines, is used as the pro-
totype.
If the prototype argument is missing, tHetter}’
; is assumed.
Rasically, form is a copy process from the proto-
type to_the output file. If an element of the
form [n] (where n is & digit from 1 to 9) is
encountered, the nth argument arg, is inserted in
its place, and that argument is then rescanned. *
€ tf [oO] is encountered, the current a@ate is in-
serted. If the desired argument has not been
given, a message of the form "(nj]:" is typed.
The response typed in then 4s used for that argu-
“S ment.
‘, If an element of the form [name] or {name} is
. encountered, the name is looked up in the associ-
ative memory. If it is found, the contents of
. the memory under this name.replaces the original
element (again rescanned).. Tf the name is not
found, a message of the form "{name]:" is typed.
The response typed in is used for that element.
The response is entered in the memory under the
_ name if the name is enclosea in []. The response
* is not entered in the memory but is remembered
for the duration of the letter if the name is
enclosed in {}. mS
In both of the above cases, the response is typed
- dn by entering arbitrary text terminated by two
. new lines. Only the first of the two new lines
is passed with the text.
” ; If one of the special characters ({J}\ is preced-
ed by a \, it loses 4ts special character.
If a filE named "corma” already exists in the
users directory, "“formb” is used as the output
file and so forth to “formz .
-1-
[Page: 78]
6/15/72 FORM (T)

The file "form.m” is created if none exists.

Because form.m is overated on by the disc allo-
cater, it should only be changed by using fed,
the form letter editor, or form.

FILES form.m associative memory

\ form? output file (read only)

SEE ALSO fed(I), tyve(I), roff(I)

DIAGNOSTICS “cannot open output file” “cannot open memory
file” when the appropriate files cannot be locat-—
ed or created.

i BUGS An unbalanced ] or } acts as an end of file but
may add a few strange entries to the associative
memory.

OWNER rhm,lic

4
{
|
-2- .
[Page: 79]
3/15/72 GoTo (I)
NAME goto -- command transfer
SYNOPSIS goto label
DESCRIPTION goto 4s only allowed when the Shell is taking
commands from 4 file. The file is searched, (from
; the beginning) for 4 line beginning with : fol-
lowed by one or more spaces followed by the
label. If such a line is found, the goto command
returns. Since the read pointer in the command
file points to the line after the label, the
effect is to cause the Shell to transfer to the
labelled line.
"." 4s a do-nothing command that only serves to
A, place a label.
FILES — ;
SEE ALSO sn(I), 2(Z).
DIAGNOST ICS "goto error’, if, the input file is a typewriter;
label not found .
BUGS -—
OWN ER dadmr
-1-
[Page: 80]
3/15/72 IF (I)
NAME if -- conditional command
SYNOPSIS if expr command [ arg, «+. j
DESCRIPTION if evaluates the expression expr, and if its
value is true, executes the given command with
i the given arguments.
. The following primitives are used to construct
the expr:
true if the file exists and is readable.
-w file
‘ true if the file exists and is writable
—¢ file
true if the file either exists and is
writable, or does not exist and is
creatable.
si = s2
true if the strings si and s2 are equal.
si j= s2
true if the strings si and s2 are not
. equal.
These primaries may be combined with the follow-
ing operators:
a
unary negation operator
=3
binary and operator
=o
binary or operator
i :
{ expr
parent heses for grouping.
-a has higher precedence than -O.- Notice that
all the operators and flags are separate argu-
ments to if and hence must be surrounded by
spaces.
Co
FILES --
SEE ALSO sh(T)
DIAGNOSTICS "af error”, if the expressign has the wrong
synt ax}5 command not found.
-i-
[Page: 81]
3/15/72 IF (I)
BUGS "_o” always indicates the file is creatable, even
if it isn’t.
OWNER dmr
-2-
[Page: 82]
6/12/72 IstatT (1)
NAME 4stat -— get inode status
SYNOPSIS jstat inumber, «+e
DESCRIPTION jstat gives jnformation about one or more i-nodes
on the file system /aev/rk0. |
The information is pasically in the same for as
that for stat(I). All information is self-
explanatory except the mode. The mode is a
sev en-—char act er string whose characters mean the
following:
4 as 4-node is allocated
u: i-node is free (no file)
\ 2s: file is small (smaller than 4096 pytes)
1: file is large
3 a: file is a directory
x; file is executable
uz: set user ID on execution
-: none of the above
4 r: owner can read
-: owner cannot read
5 w: owner can write : ,
-; owner cannot write
6 rz non-owner can read
-; non-owner cannot read
JT ows non-owner can write
-; non-owner cannot write
The owner is almost always given in symbolic
form; however if ne cannot be found in
fetc/uids 4 number is given.
; If the number of arguments to stat is not exactly
{ 4 a neader is generated jaentifying the fields of
the status information.
’ FILES /etc/uids, J/aev/rkO
SEE ALSO stat( I) ys(1I) (-1 option )
DIAGNOSTICS “name?” for any error
| | BUGS istat should take an optional alternate filesys~
tem argument.
'
OWNER amr
4 _4-
[Page: 83]
3/15/72 LD (I)
NAME jag -- link editor
SYNOPSIS 1a [ —usaol ] name, «--
DESCRIPTION id combines several object programs into one;
resolves external references; and searches li-
F praries. In the simplest case the names of
several object programs are given, and 1d com-
bines them, producing an object module which can
be either executed or become the input for a
further 1d run, In the latter case, the "-r"
option must be given to preserve the relocation
bits.
The argument routines are concatenated in the
4 order specified. The entry point of the output
is the beginning of the first routine.
. If any argument is 4 library, it is searched
exactly once. Only those routines defining an
unr esolved external reference are loaded. If a
routine from a library references another routine
in the library, the referenced routine must ap—
pear after the referencing routine in the li-
brary. Thus the order of libraries is important.
id understands several fla arguments which are
written preceded by 4 "Ns
_-s “squash” the output, that is, remove the
symbol table and relocation bits to save
space (but impair the usefulness of the
debugger). This information can also be
removed by strip.
-u take the following argument as 2 symbol and
enter it as undefined in the symbol table.
This is useful for loading wholly from 4
library, since initially the symbol table
is empty and an unresolved reference is
{ needed to force the loading of the first
routine.
-1 This option is an abbreviation for a li-
prary name. “_3" alone stands for
" hasr/lib/liba.a’, which is the standard
system library for assembly language pro-,,
grams. "ix" stands for “Yusr/lib/libx.a
where x is any character.,, There are li-
praries for Fortran (x= £ J, C¢ (x="c )y
Explor (x= e ) and B (x= b , ,
-x Do not preserve local (non-.globl ) symbols
in the output symbol table; only enter
external symbols. This option saves some
space in the output file.
-1- ‘
[Page: 84]
3/15/72 LD (TI)
-r generate relocation bits in the output file
so that it can be the subject of another 1d
run.
The output of id is left on aout. This file is
executable only if no errors occurred during the
‘ load.
FILES /usr/lib/lib? .a libraries
a,out output file
SEE ALSO as(I), ar(I)
DIAGNOSTICS "eile not found”-- bad argument
“bad format™-- bad argument
“relocation error’-- bad argument (relocation
pits corrupted)
“mult iply defined -- same symbol defined twice in
same load
“yn —- stands for “undef ined symbol”
"symbol not founa”-- loader bug
“can’t move output file’-- can’t move temporary
to a,out file
“no relocation pits"-- and input file lacks relo-
cation information
“too many symbols"-- too many references to
: external symbols in a given routine
"premature EOF"
“can’t create 1,out™-- cannot make temporary file
{ “multiple entry point’ —- more than one entry
. point specified (not possible yet).
, BUGS Instructions in the data segment are not relocat—
ed properly.
OWNER dmr
| i
~ « « _ 2 _
[Page: 85]
cal .
2,
3/15/72 \ LN (I)
NAME in -- make a link &.
SYNOP SIS in name, [ name j
es _ 1 2 ;
DESCRIPTION in creates a link to an existing file-name,. If
names is given, the link has that name; otherwise
{ 4t if placed in the current directory and its
name is the last component of name4.
- Tt is forbidden to link to a directory or to link
across file systems. .
FILES --
SEE ALSO rm( TI)
= ¥ .

DIAGNOSTICS "9"

BUGS There is nothing particularly wrong with ln, but
links don’t work right with respect to the backup
systems one copy is packed up for each link, and
(more serious) in case of a file system reload
both copies are restored and the information that
a link was involved is lost.

| OWNER ken, dmr
(
[Page: 86]
3/15/72 LOGIN (1)
NAME login -- sign onto UNIX
SYNOPSIS login | {[ username [ password 1)
DESCRIPTION The login commana is used when 4 user initially
signs onto UNIX, or it may be used at any time: to
( change from one user to another. The latter case
is the one summarized above ana described here.
See login (vII) for how to dial up initially.
If login is invoked without an argument, it will
ask for a user name, and, if appropriate, @ pass—
word, Echoing is turned off (if possible) during
the typing of the password, SO {it will not appear
on the written record of the session.
After a successful login, accounting files are
updated and the user is informed of the existence
of mailbox and messag e-of -the-day files.
Login is recognized by the Shell and executed
directly (without forking).
FILES /tmp/utmp account ing
/tmp/wtmp account ing
mailbox mail
/etc/motda message-of-the-day
SEE ALSO login(VII), jnit(VII), getty(VII), mail(T)
DIAGNOSTICS “login, incorrect, if the name or the password is
bad. No Shell, ; cannot open password file,
no directory: consult a UNIX programming coun-—
cilor.
BUGS -—
OWNER dmr, ken
i
~-i-
[Page: 87]
; 3/15/72 LS (TI)
NAME ls -—— list contents of directory
SYNOPSIS is [ =ltasd ] name, «+»
DESCRIPTION ls lists the contents of one or more directories
under control of several options: ,
{ | ,

1 list in long format, giving j—-number, mode,
owner, size in pytes, and time of last
modification for each file. (see stat for
format of the mode)

t sort by time modified (latest first) instead
of by name, as is normal

‘ a list all entries; usually those beginning
with . are suppressed

s give size in blocks for each entry

a if argument is a directory, list only its

name, not its contents (mostly used with
-1" to get status on directory)
If no argument is given, " " ds listed. If an
, argument is not 4 @irectory, its name is given.
FILES /etc/uids to get user ID’s for ls -#¥
SEE ALSO stat( I) .
DIAGNOSTICS “name nonexistent” ; "name unreadable’ ; “name
unstatable.
BUGS --
OWN ER amr, ken
bo,
-i-
[Page: 88]
3/15/72 MAIL (T)
NAME mail -- send mail to another user
SYNOPSIS mail [ letter person «+. j
DESCRIPTION mail without an argument searches for a file :
Called mailbox, prints it if present, and asks if
: it should be saved, If the answer is y , the
mail is renamed mbox, otherwise it is deleted.
The answer to the above question may be supplied
in the letter argument.
when followed by the names of a letter and one or
more people, the letter is appended to each
person’s mailbox, Each letter is preceded by the
; senaer’s name and a postmark.
&
A person is either the name of an entry in the
directory /UuSr, in which case the mail is sent to
/usr/person/mailbox, or the path name of a airec-
tory, in which case mailbox in that directory is
used.
when a user logs in he is informed of the pres—
ence of mail.
FILES /etc/uids to map uids
mailbox input mail ;
mbox saved mail
SEE ALSO login(T)
DIAGNOSTICS “who are you? if the user cannot be identifed,
for some reason (a bug). Cannot send to user
4£ mailbox cannot be opened.
BUGS --
OWNER ken
(
-~i-
[Page: 89]
3/15/72 MAN (T)
NAME man — run off section of UNIX manual
SYNOPSIS man title [ section j
“ DESCRIPTION man is a shell command file that will locate and
run off a particular section of this manual,
( Title is the the desired part of the manual.
Section is the section number of the manual. (in
Arabic, not Roman numerals.) If section is miss—
ing, 1 is assumed, For example,
man man
would reproduce this page.
FILES /sys/man/man? /*
SEE ALSO sh(I), roff (TI)
DIAGNOSTICS “Pile not founda”, “usage a
BUGS --
OWNER ken
i
~1-
[Page: 90]
[Page: 91]
3/15/72 MESG (T)
NAME mesg —-- permit or deny messages
SYNOPSIS mesg [n]ly ]
DESCRIPTION mesg n forbids messages via write by revoking
non-user write permission on the user’s typewrit—
er. mesg y reinstates permission. mesq with no
; argument reverses the current permission. In all
cases the previous state is reported.
FILES /aev/tty?
SEE ALSO write(I)
; DIAGNOSTICS “o" af the standard input file is not a typewrit-
\ er
BUGS -—
OWNER amr, ken
{
-i-
[Page: 92]
3/15/72 MEDIR (I)

NAME mkdir -- make a directory

SYNOPSIS mkdir dirname «ee

DESCRIPTION mkdir creates specified directories in mode 17.
| The standard entries "" and"... are made au-
tomatically.

FILES --

SEE ALSO rmdir (T)

DIAGNOST ICS “dirname ?”
‘ BUGS --

OWN ER ken, Gmr .

(
-~-i-
[Page: 93]
3/15/72 MOUNT (T)
NAME mount —-- mount file system
SYNOPSIS /etc/mount special dir
DESCRIPTION mount announces to the system that a removable
file system has been mounted on the device
; corresponding to special file special. Directory
dir (which must exist already) becomes the name
of the root of the newly mounted file system.
FILES -
SEE ALSO umount (I) .
. DIAGNOST ICS "o" af the special file is already in use, can-
t not be read, Or if dir does not exist.
BUGS Should be usable only by the super—user.
It is possilbe to mount the same file system pack
twice. This is a very efficient way to destroy 4
pack.
OWNER ken, Gmr
4.
[Page: 94]
6/12/72 MT (TI)
NAME mt -- manipulate magtape ,
SYNOPSIS mt [ key ] [ name ... }
DESCRIPTION mt saves and restores selected portions of the
file system hierarchy on magtape. Its actions
{ are controlled by the key argument. The key is a
string of characters containing at most one func-
tion letter and possibly one or more function
modifiers. Other arguments to the command are
file or directory names specifying which files
are to be dumped, restored, or tabled.
The function portion of the key is specified by
one of the following letters:
é .

r The indicated files and directories, to-

. gether with all subdirectories, are dumped
onto the tape. The old contents of the
tape are lost.

x extracts the namea files from the tape to
the file system. The owner, mode, and
date-modified are restored to what they
were when the file was dumped. If no file
argument is given, the entire contents of
the tape are extracted.

t lists the names of all files stored on the
tape which are the same as or are hierarch-
ically below the file arguments. Tf no
file argument is given, the entire contents
of the tape are tabled.

1 is the same as t except that an expanded
listing is produced giving all the avail-
able information about the listed files.

The following characters may be used in addition - og
to the letter which selects the function desired.
{

O, esos 7 This modifier selects the drive on
which the tape is mount ed. 0 is the
default.

y Normally mt does its work silently. The v
(verbose) option causes it to type the name

of each file it treats preceded by 4 letter
to indicate what is happening.
a file is being added
x file is being extracted .
The v option can be used with xr and X only.
f causes new entries copied on tape to be
-i-
[Page: 95]
6/12/72 mT (TI)
‘fake’ in that only the entries, not the
data associated with the entries are updat-
ed. Such fake entries cannot be extracted.
Usable only with r.
| w causes mt to pause pefore treating each
; file, type the indicative letter and the
‘ file name (as with v) and await the user’s
response. Response Y means yes , SO the
file is treated. Null response means no ,
and the file does not take part in whatever
is being done. Response x means exit ;
the mt command terminates immediately. In
the x function, files previously asked
( about have been extracted already. With r,
: no change has been made to the tape.

m make (create) directories during an x if
necessary.

i ignore tape errors. It is suggested that
this option be used with caution to read
damaged tapes.

FILES /dev/mt?
SEE ALSO tap(I), tap(Vv) .
DIAGNOSTICS Tape open error
Tape read error
Tape write error
Directory checksum
| Directory overflow
Tape overflow
Phase error (a file has changed after it was
selected for dumping but before it was dumped )
’ BUGS The m option does not work correctly. The i
option is not yet implement ed.
4
{ OWNER Ken
i}
-2-
[Page: 96]
3/15/72 mv (TI)
NAME my —-- move or rename a file
SYNOPSIS my name, names
DESCRIPTION my changes the name of name, by linking to it
under the name name and then unlinking name, -
If the new name is 4 directory, the file is moved
to that directory under its old name. Direc-—
tories may only pe moved within the same parent
directory (just renamed).
_ FILES --
SEE ALSO -—
DIAGNOSTICS --

BUGS Since mv is implement ed by combinations of link
and unlink, it cannot be used to move between
file systems.

OWNER ken, Gmr

-~i-
[Page: 97]
3/15/72 m6 (T)
NAME m6 —— general purpose macro processor
SYNOPSIS m6 [{ —d argi } [ arg2 [ arg3 ] ]
DESCRIPTION m6 takes input from file arg2 (or standard input
if arg2 is missing) and places output on file
. arg3 (or standard output). A working file of
we definitions, m,def , is initialized from file
argi if that is supplied. M6 aiffers from the
stanaard [1] in these respects:
#trace:, #source?: ana #end: are not aefined.
#meta,arg1,arg2: transfers the role of metachar-—
acter arg1 to character arg2. If two metacharac—
\ ters become identical thereby, the outcome of
further processing is not guaranteed. For exam—
ple, to make [1{} play the roles of #:<> type
\#meta, A#>,L?
[meta,<2>,] °
[meta, (substr,<<>>019154 11
[meta,(substr, {{>>,2.139 1]
#del,arg1: @eletes the definition of macro argi.
#save: and #rest: save and restore the definition
table together with the current metacharacters on
file m.def.

; #def,arg1,arg2,arg3: works as in the standard
with the extension that an integer may be sup-
plied to arg3 to cause the new macro to perform
the action of a specified puiltin before its
replacement text is evaluated. Thus all bultins
except #def: can be retrieved even after dele-
tion. Codes for arg3 are:

0 - no function
- 442,394,998 — gt,eq,ge,it,ne,le
( 7,8 - seq,sne
9,10,11,12,13 - ada, sub, mpy, div, exP
20 - if
21,22 - def, copy’ ,
23 -— meta
24 - size
25 - substr
26,27 - go, gobk
29 - dnl
30,31 - save,rest
FILES m, Gef--working file of definitions
/sys/lang/mair/m6a——me processor proper (/bin/mé
is only an jnitializer) _
Zeys/lang/mair/méb-—default jnitialization for
-1-
[Page: 98]
3/15/72 M6 (IT)
m.def
SEE ALSO [1] m6é reference
DIAGNOSTICS “orr” —- a bug, an unknown puiltin or a bad de-
finition table
“opra—-can)t open input or initial a€efinitions
opwr _-can’t open output Ove ~~ overflow of
nested calls
ova, overflow of nested arguments
,OVd,, _- overflow of definitions
rdd, -- can’t read definition table
wra” -- can’t write definition table, either on
#save: or on garbage collection
BUGS Characters in internal tables are stored one per
word, They really should be packed to improve
capacity. For want of space (and because of
unpacked formats) no file arguments have been
provided to #saves: or #rest: Again to save space,
garbage collection makes calls on #save; and
#rest: and so overwrites m,def.
OWNER doug
~2-
[Page: 99]
3/15/72 NM (TI)

NAME nm — print name list

SYNOPSIS nm [ name 7]

DESCRIPTION nm prints the symbol table from the output file
of an assembler Or joader run, Each symbol name
is preceded by its value (blanks if undef ined)
and one of the letters U (undef ined) A (abso-
lute) T (text segment symbol), D (data seg-
ment symbol), or B (bss segment symbol). Glo-
pal symbols have their first character und er—
lined, The output is sorted alphabetically.

Tf no file is given, the symbols in a,out are
. listed.
FILES a,out
SEE ALSO as(I), 1a(I)
DIAGNOSTICS "9"
BUGS --
OWNER dmr, ken
-i-
[Page: 100]
3/15/72 op (1)
NAME od -- octal dump
SYNOPSIS od name [ origin ]
DESCRIPTION od dumps a file in octal, eight words per line
with the origin of the line on the left. If a
octal origin 4s given it 4s truncated to 0 mod 16
and dumping starts from there, otherwise from 0.
Printing continues unt i] an end-of -file condition
or until halted by sending an interrupt signal.
Since od does not seek, but reads to the desired
starting point, od (rather than ab) should be
used to dump special files.
FILES _
SEE ALSO db( I)
DIAGNOSTICS "on |
BUGS —_—
OWNER ken, amr
(
{
-i-
[Page: 101]
3/15/72 OPR (T)
NAME opr —— off line print
SYNOPSIS opr file, «+.
DESCRIPTION opr will arrange to have the 201 data phone dae-
mon submit a job to the Honeywell 6070 to print
{ the file arguments. Normally, each file is
, printed in the state it is found when the data
phone daemon reads it. If a particular file
argument is preceded by + then opr will make a
copy for the daemon to print. If the file argu-
ment is preceded by = then opr will unlink the
file.
; FILES /usr /apa/* spool area
\ /etc/ident personal ident cards
/etc/dpd daemon

SEE ALSO apda( I), ident (V)

DIAGNOSTICS --

BUGS Since all but the + option in opr is implement ed
with links, one cannot use these options for
files not in /usr.
opr should recognize + and = alone and apply them
to all subsequent arguments.

OWNER ken

-i-
[Page: 102]
6/12/72 ov( I)
NAME ov -- overlay pages
SYNOPSIS ov filename
DESCRIPTION ov is a postprocessor for producing double column
formatted text when using nroff(I). ov assumes
i that the named file contains an even number of 66
‘ line pages and literally overlays successive
pairs of pages.
FILES none
SEE ALSO nroff (TI)
; DIAGNOSTICS none
BUGS Other page lengths should be permitted.
OWNER jfo .
'
.
{ .
)
t
’
| _4-
[Page: 103]
3/15/72 PR (TI) .
NAME pr -- print file
SYNOPSIS pr { -—lcem J name, eoce
DESCRIPTION pr produces a print ed listing of one or more
files. The output js separated into pages headed
py the name of the file, 4 date, and the page
number.
The optional flag -] causes each page to contain
78 lines instead of the standard 66 to accommo—
date legal size paper.
The optional flags —¢ (current date) and -—m
(modified date) specify which date will head all
‘ subsequent files. = is default.
Int erconsole messages via write(I) are forbidden
during a pr.
FILES /dev/tty? to suspend messages.
SEE ALSO eat(I), ep(I), mesg (TI)
DIAGNOSTICS -- (files not found are ignored)
BUGS none
OWNER ken, amr ;
i}
4
(
-~-i-
[Page: 104]
3/15/72 © REw (TI)
NAME rew —~ rewind tape
SYNOPSIS rew [ digit ]
DESCRIPTION rew rewinds DECt ape drives. The digit is the
logical tape number, and should range from O to
J 7. A missing digit indicates drive 0.
FILES /aev/tap?
SEE ALSO -——
DIAGNOSTICS "o" 4f there is no tape mounted on the indicated
drive or if the file cannot be opened.
\ BUGS --
OWNER ken, Gamr
{
-i1-
[Page: 105]
3/15/72 RM (TI)

NAME rm -- remove (unlink) files

SYNOPSIS xm name, eee

DESCRIPTION rm removes the entries for one or more files from
a directory. If an entry was the last link to
the file, the file is destroyed. Removal of a
5 file requires write permission in its directory,
put neither read nor write permission on the file
itself.
Directories cannot be removed by rm; cf. rmdir.
FILES none
( SEE ALSO rmdir(T)

DIAGNOSTICS If the file cannot be removed or does not exist,
the name of the file followed by a question mark
is typed.

BUGS rm probably should ask whether a read-only file
is really to be removed.

OWNER ken, amr

oe
' .
i
'
j
4
-i-
[Page: 106]
3/15/72 RMDIR (I)
NAME rmdir -- remove directory
SYNOPSIS rmdir dir, se. .
DESCRIPTION rmdir removes (deletes) directories. The direc—
tory must be empty (except for the standard en—
( tries "." and ".. , which rmdir itself removes).
Write permission is required in the Girectory in
which the directory appears.
FILES none
SEE ALSO --
DIAGNOSTICS “dir?” is printed if directory dir cannot be
( found, is not a directory, or is not removable,
“Gir -- directory not empty” is printed if dir
has entries other than . OY ee «
BUGS --
OWNER ken, amr
'
)
y
-i1-
[Page: 107]
6/12/72 ROFF (I)

NAME roff -—-- format text .

SYNOPSIS roff [ +number1 } [ =number2 ] [ -stop ] name, ..-

DESCRIPTION roff formats text according to control lines
embedded in the text in files name,, «++ «

( Encountering 2 nonexistent file terminates print-—

, ing. The optional argument +number1 causes
printing to begin at the first page number ed
number1; the optional argument numb er2 stops
printing after the page numbered number? . The
optional argument -stop or -—§& causes printing
to stop before each page including the first to
allow paper manipulation; printing is resumed

. upon receipt of an interrupt signal. An inter-

\ rupt signal received during printing terminates
all printing. Incoming interconsole messages are
turned off during printing, and the original mes—
sage acceptance state is restored upon termina-—
tion.
roff is described in a separate publication [1].

_ FILES /etc/suft ab suffix hyphenation tables
/tmp/rtm? temporary
. SEE ALSO [1] (See J. F. ossanna) .

DIAGNOSTICS none |

BUGS --

OWNER jfo

f
~1i1-
[Page: 108]
3/15/72 SALV (T)
NAME salv -- file system salvage
SYNOPSIS /etc/salyv
DESCRIPTION salv will reconstruct the file system /dev/rk0 to
a consistent state. This is the first step in
‘ putting things together after a bad crash. Salv
performs the following functions:
A valid free list is constructed.
All bad pointers in the file system are
zeroed,

4 All duplicate pointers to the same block are
resolved by changing one of the pointers to
point at a new block containing 4 copy of the
data, :

After a salv, a warm boot must be performed _in-
stantly to effect the change made. (Because the
salv works on the disk copy of the file system
super—block, and the core copy is unaffected. )

After a salv, files may be safely created and
removed without causing more trouble. However,
it is more likely than not that directories are
corrupted as well, so ads should be performed.

FILES /aev/rk0

SEE ALSO check( I), ds(I) ,

DIAGNOSTICS --

BUGS The file system to be salvaged should be an argu-
ment.

OWNER ken

i
-i-
[Page: 109]
3/15/72 SH (I)
NAME sh -—-. shell ( command interpreter ) ,
SYNOPSIS sh [ name [ arg, se [ ardg 1] 3)
DESCRIPTION sh is the standard command interpreter. It is
the program which reads and arranges the execu-
tion of the command lines typed by most users.
It may itself be called as 4 command to interpret
files of commands. Before discussing the argu-
ments to the shell used as a command, the struc—
ture of command lines themselves will be given.
Command lines
: Command lines are sequences of commands separ ated
by command delimiters. Each command is a Sé—
quence of non-blank command arguments separated
by blanks. The first argument specifies the name
of a command to be executed. Except for certain
types of special argument s discussed below, the
argument S other than the command name are simply
passed to the invoked command.
If the first argument is the name of an execut—
abl e file, it is invoked; otherwise the string
/pin/ is prepended to the argument. (In this
way the standard commands, which, reside in
/pin , are found.) If the /pin” file exists,
but is not executable, it is used by the shell as
a command file. That is to say it is executed as
input as though it were typed from the console.
If all attempts fail, 4 diagnostic is printed.
The remaining non-special arguments are simply
passed to the command without further interpr eta—
tion by the shell.
command delimiters
F There are thr ee command delimiters: the new—
‘ line, $3 » and & . The semicolon 3; specifies
sequent ial execution of the commands SO
separ ated; that is,
. coma; comb
causes the execution first of command coma, then
of comb, The ampersand & causes simultaneous
, execution:
coma & comb
causes coma to be called, followed immediately by
comb without waiting for coma to finish. Thus
coma and comb execute simultaneously. AS 4 spe-
cial case,
-i1-
[Page: 110]
3/15/72 SH (TI)
coma &
causes coma to be executed and the shell immedi-
ately to request another command without waiting
for coma.
Termination Reporting
If a command (not followed by "o") terminates
abnormally, a message is printed, (All termin a—
tions other than exit and interrupt are con—
sidered abnormal.) The following is a list of the
abnormal termination messages:
i Bus error
Trace trap
Tllegal instruction
-JoT trap ;
Power fail trap
EMT trap
Bad system call
Quit -
Error
If a core image is produced, "_- Core dumped” is
appended to the appropriate message.
Redirection of 1/0
Three character sequences cause the immediately
following string to be interpreted as a special
argument to the shell itself, not passed to the
command. -
An argument of the form “carg” causes the file
arg to be used as the standard input file of the
given command.
An argument of the form “Sarg” causes file “arg”
; to be used as thé standard output file for the
‘ given command. arg” is created if it did not
exist, and in any case is truncated at the
, outset.
An argument of the form "Ssarg” causes file “arg”
to be used as the, standard output for the given
command, If arg dia not exist, it is created;
if it did exist, the command output is appended
a to the file.
Generation of argument lists .
If any argument contains any of the characters
qo", “#" or “[’, it is treated specially as fol-
lows. The current directory is searched for
files which match the given argument.
-2-
[Page: 111]
3/15/72 SH (TI)
The character “*" in an argument matches any
string of characters in a file name (including
the null string).

The character "oe" matches any single character in

a file name.
rach "(" must be paired with 3 matching "J". The
characters between (" and "]" specify 4 class of
characters, It matches any single character in a
file name which is in the class. An ordinary
character in the brackets specifies that char ac-
ter to be in the class. A pair of characters
separated by — specifies each character lexi-

i cally greater than or equal to the first and less
than or equal to the second member of the pair is
to be included in the class. If the first member
of the pair lexically exceeds the second, the
second member is the sole character specified.
Other characters match only the same character in
the file name.

For example, “* matches all file names; "?"
matches all one-character file names; "[ab]*.s"
matches all file names, beginning with "a or b-
and ending with ws 3) 2 [zi-m] matches all two-
character file names ending with "2" or the
letters i through mM .
If the argument with "x" or "2" also contains 4
/", a slightly aifferent procedure is used:
instead of the current directory, the directory
used is the one obtained by taking the argument
up to the last "7" pefore a * or 7 - The
matching process matches the remainder of the
argument after this "7" against the files in the
derived directory. For example: "/usr/dmr/a* .s
matches all files in directory */usr/amr which
; pegin with "a and end with ".S.
In any event, 4 list of names is obtained which
match the argument. This list is sorted into
alphabetical order, and the resulting sequence of
argument § replaces the single argument containing
the "*", "[", ox “"o" The same process is car-
ried out for each argument (the resulting lists
are not merged) and finally the command is called
( with the resulting list of arguments.
For example: directory /usr/damr contains the
files ai oSy a2.S, eoeys a9.S. From any Airectory,
the command
as /usr/dmr/a?.s
~3-
[Page: 112]
3/15/72 SH (I)
calls as with arguments /usr/dmr/ai.s,
/usr/dmr/a2.Sy eee /usr/amr/a9.s in that order.
Quoting
the character "\" causes the immediately follow-—

{ ing character to lose any special meaning it may
have to the shell; in this way "<, > » and
other characters meaningful to the shell may be
passed as part of arguments. A special case of
this feature allows the continuation of commands
onto more than one line: a new-line preceded by

\" is translated into a blank.

i Sequences of characters enclosed in double (") or
single (’) quotes are also taken literally.
Argument passing
when the shell is invoked as a command, it has
additional string processing capabilities. Re-
call that the form in which the shell is invoked
is

sh [ name [ arg, see [ argg Jj]
The name is the name of a file which will be read
and interpreted, If not given, this subinstance
of the shell will continue to read the standard
input file.
In the file, character sequences of the form
$n, where n is a digit O, secs 9, are replaced
by the nth argument to the invocation of the
shell (arg). $0" is replaced by name.
End of file
An end-of-file in the shell’s input causes it to
exit. A side effect of this fact means that the
way to log out from UNIX is to type an end of
file,
Special command s
Two commands are treated specially by the shell.
“chdir” is done without spawning a new process by
executing the sys chdir primitive.
“Login” is done by executing /pin/login without
creating a new process.
These peculiarities are inexorably imposed upon
the shell by the basic structure of the UNIX pro-
cess control system. It is a rewarding exercise
-4-
[Page: 113]
3/15/72 SH (TI)
to work out why.
Command file errors
Any shell-detected error in a file of commands
causes that shell to cease executing that file.
{
FILES /etc/glob, which interprets "e™ "2", and “[".
SEE ALSO “The UNIX Time-sharing System’, which gives the
theory of operation of the shell.
DIAGNOSTICS “Input not found’, when a command file is speci-
fied which, cannot be read;
{ Arg count , if the number of arguments to the ,,
chdir pseudo-—command 4s not exactly 1, or if * ,
a? 9 OF [ is,used inappropriately;
pad directory , if the a@irectory given in
,cmMir cannot be switched to;
Try again , if no new process can be created to
execute the specified command 5
‘ gmbalance , if single or double quotes are
not matched; wow
Input file , if an argument after < cannot be
' read; " orl Ot A]
Output file , if an argument after > or >>
cannot be written (or created);
' No command , if the specified command cannot be
execut ed. ,,
No match’, if no arguments are generated for a
command which contains * , ? , or {.
Termination messages described above.
; BUGS . If any argument contains a quoted "#", "2", or
[", then all instances of these characters must
pe quoted, This is because sh calls the glob
; routine whenever an unquoted * . ? , oF [- is
noticed; the fact that other instances of these
Characters occurred quoted is not noticed by
= giob.
OWNER dmr, ken
-~5-
[Page: 114]
3/15/72 SORT (I)
NAME sort -- sort a file .

SYNOPSIS sort input output

DESCRIPTION sort will sort the input file and write the sort-
ed file on the output file. The sort is line-
' by-line in increasing ASCII collating sequence.
. Space required is 6*number—of -—lines in bytes.
FILES /tmp/stm?
SEE ALSO -—
i DIAGNOSTICS -- .

BUGS Sort does not put a maximum on the size of file
that it sorts. -fhus a bus error will occur if
too large an input file is supplied.

The input is copied to 4 temporary file, Thus
the maximum file that can be sorted is the max—
jmum non-special file (currently 64K pytes. )

OWN ER dmr, ken

{
~ji-
[Page: 115]
3/15/72 STAT (T)
NAME stat -- get file status
SYNOPSIS stat name, eee
DESCRIPTION stat gives several kinds of information about one
. or more files:
i—number
access mode ;
number of links
owner
size in bytes
date and time of last modification
name (useful when several files are named)
All information is self—explanatory except the
mode. The mode is 4 six—-character string whose
characters mean the following:
4 s: file is small (smaller than 4096 bytes)
1: file is large
2 a: file is a directory
x: file is executable
uz: set user ID on execution
-: none of the above
3 r: owner can read
~~: owner cannot read
4 ws: owner can write
—: owner cannot write.
, 5 rz: non-owner can read
-: non-owner cannot read
6 we: non-owner can write
-: non-owner cannot write
The owner is almost always given in symbolic
, form; however if he cannot be found in
/etc/uids a number is given.
If the number of arguments to stat is not exactly
4 a header is generated identifying the fields of
the status information.
. FILES /etc/uids
SEE ALSO istat(I), 1s(T) (-1 option)
DIAGNOSTICS “name?” for any error.
OWNER dmr
| .
a a
[Page: 116]
3/15/72 STRIP (I)
NAME strip -- remove symbols and relocation bits
SYNOPSIS strip name, e+.
DESCRIPTION strip removes the symbol table and relocation
bits ordinarily attached to the output of the
4 assembler and loader. This is useful to save
space after a program has been debugged.
The effect of strip is‘the same as use of the -s
option of ld.
FILES /tmp/stm? temporary file
{ SEE ALSO 1d(I), as(I)
DIAGNOSTICS Diagnostics are given for: non-existent argument}
jnability to create temporary file;
improper format (not an object file);
inability to re-read temporary file.
BUGS -—-
OWNER dmr
-i-
[Page: 117]
6/12/72 sTTY (TI)
NAME stty -- set teletype options
SYNOPSIS stty option, eee
DESCRIPTION stty will set certain I/O options on the current
output teletype. The option strings are selected
from the following set:
even allow even parity.
-—even disallow even parity.
odd allow odd parity
—odd disallow odd parity
raw raw input (no erase/kill)
-—canon
( —raw negate raw mode (erase/kill)
canon
cr allow (and echo) cr for lf.
=nl
ni negate cr mode.
=cr "
echo echo back every character typed.
full "
-half
half do not echo characters as typed.
—echo .
-full
lcase map upper case to lower case
-ucase
ucase do not map case
—lcase "
space map tabs into spaces
—-tab
tab do not map tabs
—space "
delay calculate cr and tab delays.
—delay no cr/tab delays
ebcdic ebcdic ball conversion (2741 only)
—corres
, corres correspondence ball conversion (2741 only)
-ebcdic
FILES standard output.
,
SEE ALSO stty( IT)
, DIAGNOSTICS “Bad options”
. BUGS --
OWNER jfo
! .
H
-~-4i-
[Page: 118]
3/15/72 su (TI)
NAME su. --— become privileged user
SYNOPSIS su password
DESCRIPTION su allows one to become the super-user, who has
all sorts of marvelous powers. In order for su
to do its magic, the user must pass as an argu-
ment a password. If the password is correct, su
will execute the shell with the UID set to that
of the super-user. To restore normal UID
privileges, type an end-of-file to the super—us er
shell.
FILES -
; SEE ALSO sh( I)
DIAGNOSTICS "Sorry" if password is wrong
BUGS -——
OWNER amr, ken
‘
{
-i-
[Page: 119]
3/15/72 SUM (I)
NAME sum -—- sum file
SYNOPSIS sum name, eee
DESCRIPTION sum sums the contents of one or more files. A
separate Sum is printed for each file specified,
f along with the number of whole or partial 512-
word blocks read.
In practice, Sum is often used to verify that all
of a special file can be read without error.
FILES none
{ SEE ALSO -—
DIAGNOSTICS “opra” if the file cannot opened; “o" 4f if an
; error is discovered during the read.
BUGS none
OWN ER ken
-i-
[Page: 120]
6/12/72 TACCT (I)
NAME tacct —- login accounting by date
SYNOPSIS tacct [ wtmp ]
DESCR IPT ION tacct will produce a printout giving daily con-
. nect time and total number of connects for all
t transactions found in the wtmp file. If no wtmp
file is given, /tmp/wtmpis used.
FILES /tmp/wtmp
SEE ALSO jnit(VII), acct(I), login(I), wtmp(V)
DIAGNOSTICS “cannot open ‘wtmp’” |
BUGS acet(I) and taect(I) should be compined
OWNER dmr, ken ,
-i-
[Page: 121]
3/15/72 . TAP (TI)
NAME tap -- manipulate DECtape
SYNOPSIS tap [key ] [ name... J
DESCRIPTION tap saves and restores selected portions of the
file system hierarchy on DECtape. Its actions
‘ are controlled by the key argument. The key is a
string of characters containing at most one func—
: tion letter and possibly one or more function
modifiers, other arguments to the command are
. file or directory names specifying which files
are to be dumped, restored, or tabled.
: The function portion of the key is specified by
{ one of the following letters:
r The indicated files and directories, to-
gether with all subdirectories, are dumped
onto the tape. If files with the same
names already, exist, they are replaced
(hence the TF ). Same is determined by
. string comparison, so ./abe can never be
the same as /usr/dmr/abec even if
/usr/amr is the current directory. If no
file argument is given, - is the default.
u updates the tape. U is the same as xr, but
a file is replaced only if its modification
date is later than the date stored on the
tape; that is to say, if it has changed
since it was dumped. u is the default com-
mand if none is given.

ad deletes the named files and directories
from the tape. At least one file argument
must be given.

x extracts the named files from the tape to
the file system. The owner, mode, and
Gate-modified are restored to what they

were when the file was dumped. If no file
argument is given, the entire contents of
the tape are extracted.

t lists the names of all files stored on the
tape which are the same as or are hierarch-
ically below the file arguments. If no
file argument is given, the entire contents

: of the tape are tabled.

1 is the same as t except that an expand ed .
listing is produced giving all the avail-
able information about the listed files.

The following characters may be used in addition
to the letter which selects the function desired.
-i-
[Page: 122]
3/15/72 TAP (TI)
O, esos 7 This modifier select§ the drive on
which the tape is mounted. Oo is the
default.
y Normally tap does its work silently. The v
(verbose) option causes it to type the name
t of each file it treats preceded by 4 letter
to indicate what is happening.
r file is being replaced
a file is being adaea (not there before)
x file is being extracted
a file is being deleted
{ The v option can be used with xX, Us dad, and
x only.

c means a fresh dump is being created; the
tape directory will be zeroed before begin-
ning, Usable only with x and u.

f causes new entries copied on tape to be

‘Fake’ in that only the entries, not the
data associated with the entries are updat—
ed, such fake entries cannot be extracted.
Usable only with £ and u.

w causes tap to pause before treating each
file, type the jndicative letter and the
file name (as with v) and await the user’s
response. Response Y means yeS , §S9Q the
file is treated. Null response means NO »
ana the file does not take part in whateyer

is being done. Response x means exit 3
the tap command terminates immediately. In
the x function, files previously asked
about have been extracted already. With I,
u, and d no change has been made to the
tape.

m make (create) directories a@uring an x if
necessary.

i ignore tape errors. it is suggested that
this option be used with caution to read
damaged tapes.

FILES /dev/tap?
SEE ALSO mt ( I)
‘ DIAGNOSTICS Tape open error .
Tape read error .
Tape write error
Directory checksum
Directory overflow
-2-
[Page: 123]
3/15/72 TAP (TI)
Tape overflow
Phase error (a file has changed after it was
selected for dumping but before it was dumped )
BUGS The m option does not work correctly. The i
option is not yet implement ed.
;
OWNER ken
{
(
{
~3-
[Page: 124]
.
3/15/72 TM (T)
NAME tm -- provide time information
SYNOPSIS tm [ command arg, «ees |
DESCRIPTION tm is used to provide timing information, When
used without an argument, output like the follow-
\ ing is given: .
tim 371:51:09 2:00.8
ovh 20:00:33 17,0
swp 13:43:20 4,6
ask 27:14:35 4.5
idl 533:08:03 1:33.3
usr 24:53:50 1.2
i der O, 54 0, 0
The first column of numbers gives totals in the
named categories since the last time the system
was cold-—booted; the second column gives the
changes since the last time tm was invoked. The
tim row is total real time (hours:minutes:
Seconds); unlike the other times, its origin is
the creation date of tm’s temporary file. ovh is
time spent executing in the system; swp is time
waiting for swap 1/0; dsk is time spent waiting
for file system disk I/o; idl is idle time; usr
is user execution time; der is RF disk error
count (left number) and RK a@isk error count
(right number).
tm can be invoked with arguments which are as—
sumed to constitute a command to be timed, In
this case the output is as follows:
. tim 2.7
ovh 0.3
swp 0.5 :
dsk 1.8 .
idl 0.0
: usr 0.0
The given times represent the number of seconds
spent in each category during execution of the
command .

FILES /tmp/ttmp, /dev/rf0 (for absolute times) contains

the information used to calculate the differen-
tial times.
{ 2

SEE ALSO file system(V)

D IAGNOST ICS “o" 4f the command cannot be executed; “can’t
creat temp file if trouble with ttmp; cant read
super—block if times cannot be read from system.

BUGS (1) when invoked with a command argument,

-1-
[Page: 125]
3/15/72 TM (TI)
everything going on at the moment is counted, not
just the command itself. (2) Two users doing tm
simult aneously interfere with each other’s use of
the temporary file.

OWNER ken, Gmr

co
~-2-
[Page: 126]
[Page: 127]
3/15/72 Tss (I)

NAME tss -- interface to Honeywell TSS

SYNOPSIS tss

DESCRIPTION tss will call the Honeywell 6070 on the 201 data
phone. It will then go into direct access with

{ T™sS, Output generated by TSS is typed on the
standard output and input requested by TSS is
read from the standard input with UNIX typing
conventions.

An interrupt signal (ASCII DEL) is transmitted as
a “break to TSS.

i Input lines beginning with | are interpreted as
UNIX commands. Input lines beginning with _ are
interpreted as commands to the interface routine.
“file insert input from named UNIX file
~Sfile deliver tss output to named UNIX file
~p pop the output file
~q disconnect from tss (quit)
~; file receive from HIS routine CSR/DACCOPY
~s file send file to HIS routine CSR/DACCOPY

Ascii files may be most efficiently transmitted
using the HIS routine CSR/DACCOPY in this
fashion. Underlined text comes from TSS.
AFTname is the 6070 file to be dealt with.
SYSTEM? CSR/DACCOPY (s) AFTname
Send_Encoded File s file
SYSTEM? csR/DACCOPY (r) AFTname
F Receive Fnceoded File fF file
5
FILES /aev/ano, /aev/apOo
SFE ALSO --
DIAGNOSTICS DONE when communication is proken.
BUGS When diagnostic problems occur, tss exits rather
abruptly.
OWNER csr
-i-
[Page: 128]
3/15/72 TTY (TI)
NAME tty -- get tty name
SYNOPSIS tty
DESCRIPTION tty gives the name of the user’s typewriter in
the form ttyn for n a digit. The actual path
; name is then /dev/ttyn .
FILES —
SEE ALSO -—
DIAGNOSTICS "not a tty” if the standard input file is not a
typewriter.
‘ BUGS _
OWNER amr, ken
i
4
\
4
} .
i
-~-i-
[Page: 129]
6/12/72 TYPE (TI)
NAME type — type on single sheet paper
SYNOPSIS type name, .e-
DESCRIPTION type copys its input files to the standard out-—
put, After every 66 lines, type stops and reads
F the standard input for a new line character be—
fore continuing. This allows time for insertion
of single sheet paper.
FILES -——
SEE ALSO -_—
; DIAGNOSTICS --
BUGS -—
OWNER dmr
{ ; |
4
;
- 41 - i
[Page: 130]
3/15/72 UMOUNT (T)
NAME umount —- dismount file system
SYNOPSIS /etc/umount special
DESCRIPTION umount announces to the system that the removable
file system previously mount ed on special file
f special is to be removed.
only the super-user may issue this command.
FILES --
SEE ALSO mount (I)
DIAGNOSTICS "9"
. BUGS This command is not, in fact, restricted to the
super—-user.
OWNER ken, amr
{
-i1i-
[Page: 131]
. 3/15/72 UN (I)
NAME un -- undefined symbols
SYNOPSIS un [ name ]
DESCR IPT ION un prints a list of undefined symbols from an
assembly or loader run. If the file argument is
j not specified, a.out is the default. Names are
listed alphabetically except that non-global sym—
bols come first. Undefined global symbols (un-
resolved external references) have their first
character underlined.
FILES a,out
. SEE ALSO as(I), 14(T)
DIAGNOSTICS "o" s£ the file cannot be found.
BUGS --
OWNER dmr, ken
-i-
[Page: 132]
3/15/72 we (I)
NAME we —-- get (English) word count
SYNOPSIS we name, «--
DESCRIPTION we provides a count of the words, text lines, and
roff control lines for each argument file.
\ A text line is a sequence of characters not be-
ginning with ". and ended by 4 new-line, A roftft
control line is 4 line beginning with .. A
word is a sequence of characters bounded by the
beginning of a line, by the end of a line, or by
a blank or a tab.
; FILES --
{ ;
SEE ALSO roff(I)
DIAGNOSTICS none; arguments not found are ignored.
BUGS -— °
OWNER jfo
{
~-i-
[Page: 133]
3/15/72 a WHO (TI)
NAME who -- who is on the system
SYNOPSIS who [ who-file ]
, DESCRIPTION who, without an argument, lists the name, type-
writer channel, and login time for each current
( UNIX user.
Without an argument, who examines the /tmp/utmp
file to obtain its information. If a file is
7 given, that file is examined. Typically the
given file will be /tmp/wtmp, which contains a
record of all the logins since it was created.
Then who will list all logins and logouts since
the creation of the wtmp file.
FILES /tmp/utmp
SEE ALSO login(I), init( VII)
DIAGNOSTICS "o" 4£ a named file cannot be read.
BUGS —_
OWNER amr, ken
}
i
’
'
( *.
{
’
'
-~-1i1-
[Page: 134]
3/15/72 WRITE (I)

NAME write -—-- write to another user

SYNOPSIS write user .

DESCRIPTION write copies lines from your typewriter to that
of another user. When first called, write sends

( the message
message from yourname... ;

The recipient of the message should write back at
this point. Communication continues until an end
of file is read from the typewriter or an inter-
rupt is sent. At that point write writes EOT

( on the other terminal.

Permission to write may be denied or granted by
use of the mesq command. At the outset writing
is allowed. Certain commands, in particular roff
and pr, disallow messages in order to prevent
messy output. ;

If the character "!" is found at the beginning of
a line, write calls the mini-shell msh to execute
the rest of the line as a command.

The following protocol is suggested for using
write: When you first write to another user, wait
for him to write back before starting to send.
Each party should, end, each message with a dis-—

- tinctive signal ( (0) for over is convent ion—-
al) that the other may reply. (co) (for over
and out") is suggested when conversation is about
to be terminated.

FILES /tmp/utmp to find user
/etc/msh to execute |!
SEE ALSO mesg(I), msh(VII) .
( DIAGNOSTICS “user not logged in’; “permission denied”.
BUGS —
OWN ER amr, ken
-1-
[Page: 135]
3/15/72 BREAK (II)
; NAME break -- set program break
SYNOPSIS sys break; addr / break = 17. .
DESCRIPTION break sets the system’s idea of the highest loca-
( tion used by the program to addr. Locations
greater than addr and below the stack pointer are
not swapped and are thus liable to unexpected
modification.
An argument of O is taken to mean 8K words. If
the argument is higher than the stack pointer the
entire user core area is swapped.
‘ When a program begins execution via exec the
‘ break is set at the highest location defined by
; the program and data storage areas. Ordinarily,
therefore, only programs with growing data areas
need to use break.
FILES --
SEE ALSO exec(II) .
DIAGNOSTICS none; strange addresses cause the break to be set
to include all of core.
BUGS -—
q
OWN ER ken, dmr
4
UY
{
’
i
)
)
[Page: 136]
3/15/72 CEMT (II)
NAME cemt -- catch emt traps
SYNOPSIS sys cemt; arg / cemt = 29.
DESCRIPTION This call allows one to catch traps resulting
i from the emt instruction. Arg is a location
within the program; emt traps are sent to that
location. The normal effect of emt traps may be
restored by giving an arg equal to O.
Prior to the use of this call, the result of an
emt instruction is a simulated rts instruction.
The operand field is interpreted as a register,
; and an rts instruction is simulated for that
: register (after verifying that various registers
have appropriate values). This feature is useful
for debugging, since the most dangerous program
bugs usually involve an rts with bad data on the
stack or in a register.
FILES --
SEE ALSO --
DIAGNOSTICS -—
BUGS --
OWN ER ken, dmr
4
i)
’
’
\
[Page: 137]
3/15/72 CHDIR (II)
NAME chair -- change working directory
SYNOPSIS sys chdir; dirname / chdir = 12.
DESCRIPTION dirname is address of the pathname of a directo-
H ry, terminated by a O byte. chair causes this
directory to become the current working directo-
rye
FILES --
SEE ALSO chdir (I)
! DIAGNOSTICS The error bit (c-bit) is set if the given name is
- not that of a directory.
BUGS -
OWN ER ken, dmr
[Page: 138]
3/15/72 CHMOD (II)
NAME chmod -- change mode of file
SYNOPSIS sys chmod; name; mode / chmod = 15.
DESCRIPTION The file whose name is given as the null-
po terminated string pointed to by name has its mode
changed to mode. Modes are constructed by oring
together some combination of the following:
01 write, non-owner
O02 read, non-owner
04 write, owner
40 read, owner
; 20 executable
\ 40 set user ID on execution
Only the owner of a file (or the super-user) may
. change the mode.

FILES --

SEE ALSO ~ ehmod(T)

DIAGNOSTICS Error bit (c-bit) set if name cannot be found or
4f current user is neither the owner of the file
nor the superuser.

BUGS --

OWN ER ken, dmr
[Page: 139]
3/15/72 CHOWN (II)
NAME chown -- change owner of file
SYNOPSIS sys chown; name; owner / chown = 16.
DESCRIPTION The file whose name is given by the null-
terminated string pointed to by name has its own—
er changed to owner. Only the present owner of a
file (or the super-user) may donate the file to
another user. Also, one may not change the owner
of a file with the set-user-ID bit on, otherwise
one could create Trojan Horses able to misuse
other’s files.
j FILES -—
SEE ALSO chown(I), uids(V)
DIAGNOSTICS The error bit (e-bit) is set on illegal owner
changes.
BUGS --
OWN ER ken, amr
[Page: 140]
3/15/72 CLOSE (II)
NAME close -- close a file
SYNOPSIS (file descriptor in r0)

sys close / close = 6.

i DESCRIPTION Given a file descriptor such as returned from an
open or creat call, close closes the associated
file. A close of all files is automatic on exit,
but since processes are limited to 10 simultane-
ously open files, close is necessary to programs
which deal with many files.

FILES --
SEE ALSO creat(II), open(II) |
DIAGNOSTICS The error bit (c-bit) is set for an unknown file
descriptor.
BUGS _
OWN ER ken, dmr
(
[Page: 141]
3/15/72 CREAT (II)
NAME creat -- create a new file
SYNOPSIS sys creat; name; mode / creat = 8.
(file descriptor in r0)
{ DESCRIPTION creat creates a new file or prepares to rewrite
an existing file called name; name is the address
of a null-terminated string. If the file did not
exist, it is given mode mode; if it did exist,
its mode and owner remain unchanged but it is
truncated to O length.
The file is also opened for writing, and its file
i descriptor is returned in r0O.
The mode given is arbitrary; it need not allow
writing. This feature is used by programs which
deal with temporary files of fixed names. The
creation is done with a mode that forbids writ-
ing. Then if a second instance of the program
attempts a creat, an error is returned and the
program knows that the name is unusable for the
moment.
If the last link to an open file is removed, the
file is not destroyed until the file is closed.
FILES -—
SEE ALSO write(II), close(II)
DIAGNOSTICS The error bit (c-bit) may be set if; a needed
directory is not readable; the file does not
exist and the directory in which it is to be
created is not writable; the file does exist and
is unwritable; the file is a directory.
BUGS --
OWN ER ken, dmr
|
[Page: 142]
3/15/72 EXEC (II)

NAME exec -- execute a file

SYNOPSIS sys exec; name; args / exec = 11.4

name: <...\0>
args: argi; arg2; eee} 0
argi: <...\0?

DESCRIPTION ~ exec overlays the calling process with the named
file, then transfers to the beginning of the core
image of the file. The first argument to exec is

i a pointer to the name of the file to be executed.
; The second is the address of a list of pointers
to arguments to be passed to the file. Conven-
tionally, the first argument is the name of the
file. Each pointer addresses a string terminated
by a null byte.
There can be no return from the file; the calling
core image is lost.
The program break is set from the executed file;
see the format of a.out.
Once the called file starts execution, the argu ‘
ments are passed as follows. The stack pointer
points to the number of arguments. Just above
this number is a list of pointers to the argument
strings.
sp-> nargs
arg1
argn
argi: <arg1\0
i argn: <argn\0>
The arguments are placed as high as possible in
core: just below 60000(8).
Files remain open across exec calls. However;
the illegal instruction, emt, quit, and interrupt
trap specifications are reset to the standard
values. (See ilgins, cemts quit, intr.)

Each user has a real user ID and an effective .
user ID (The real ID jdentifies the person using
the system; the effective ID determines his ac-
cess privileges. ) exec changes the effective user
ID to the owner of the executed file if the file
has the  set-user-ID mode. The real user ID is
not affected.
[Page: 143]
3/15/72 EXEC (II)
FILES -_ =
SEE ALSO fork(II)
DIAGNOSTICS If the file cannot be read or if it is not exe-

( cutable, a return from exec constitutes the diag~-

nostic. The error bit (c-bit) is set.

BUGS -_—
OWN ER ken, dmr

i

i
[Page: 144]
3/15/72 EXIT (II)
NAME exit -— terminate process
SYNOPSIS (status in r0O)

sys exit / exit = 1

L DESCRIPTION exit is the normal means of terminating a pro-

° cess. All files are closed and the parent pro-
cess is notified if it is executing a wait. The
low byte of rO is available as status to the
parent process.

This call can never return.

FILES --

‘.

SEE ALSO wait(II)

DIAGNOSTICS -

BUGS --

OWNER ken, dmr
(
[Page: 145]
3/15/72 FORK (II)

NAME fork -- spawn new process

SYNOPSIS sys fork / fork = 2.

(new process return )
(old process return)

DESCRIPTION fork is the only way new processes are created.
The new process's core image is a copy of that of
the caller of fork; the only distinction is the
return location and the fact that rO in the old
process contains the process ID of the new pro-
cess. This process ID is used by wait.

i FILES -—

SEE ALSO wait(II), exec(II)

DIAGNOSTICS The error bit (c-bit) is set in the old process
if a new process could not be created because of
lack of process space.

BUGS See wait(II) for a subtle bug in process destruc
tion.

OWNER ken, amr

(
[Page: 146]
3/15/72 . FSTAT (II)
NAME fstat -- get status of open file
SYNOPSIS (file descriptor in r0)
sys fstat; buf / fstat = 28.
{ DESCRIPTION This call is identical to stat, except that it ”
operates on open files instead of files given by
name. It is most often used to get the status of
the standard input and output files, whose names
are unknown. \
FILES -- (
SEE ALSO stat(II) .
DIAGNOSTICS The error bit (c-bit) is set if the file descrip-
tor is unknown.
BUGS -— °
OWN ER ken, amr
(
[Page: 147]
3/15/72 , GETUID (II)
NAME getuid -- get user identification
SYNOPSIS sys getuid / getuid = 24.

(user ID in -r0O)

i DESCRIPTION getuid returns the real user ID of the current
process. The real user ID identifies the person
who is logged in, in contradistinction to the
effective user ID, which determines his access
permission at each moment. It is thus useful to
programs which operate using the set user ID
mode, to find out who invoked them.

: FILES /etc/uids can be used to map the user ID number

. into a name.

SEE ALSO setuid(II)
DIAGNOSTICS -—
BUGS --
OWN ER - ken, amr
(
[Page: 148]
3/15/72 GTTY (II)
NAME gtty -- get typewriter status
SYNOPSIS (file descriptor in r0)
sys gtty; arg / gtty = 32.
‘ arg: e«=.+6
DESCRIPTION qtty stores in the three words addressed by arg
the status of the typewriter whose file descrip-
tor is given in r0. The format is the same as
that passed by stty.
FILES --
‘ SEE ALSO stty(II) .
DIAGNOSTICS Error bit (c-bit) is set 4f the file descriptor
does not refer to a typewriter.
BUGS -—
OWNER ken, dmr
[Page: 149]
3/15/72 HOG (II)
NAME hog -- set program in low priority
SYNOPSIS sys hog / hog = 34.
DESCRIPTION The currently executing process is set into the
i lowest priority execution queue. Background jobs
. that execute a very long time should do this. A
higher priority will be reinstituted as soon as
the process is dismissed for any reason other
than quantum overflow.
FILES --
SEE ALSO --
DIAGNOSTICS --
BUGS -—-
OWN ER ken, dmr
;
[Page: 150]
3/15/72 ILGINS (II)
NAME ilgins -- catch illegal instruction trap
SYNOPSIS sys ilgins; arg / ilgins = 33.
DESCRIPTION ilgins allows a program to catch illegal instruc—
( tion traps. If arg is zero, the normal instruc—
tion trap handling is done: the process is ter-
minated and a core image is produced. If arg is
a location within the program, control is passed
to arg when the trap occurs.
This call is used to implement the floating point
simulator, which catches and interprets 11/45
floating point instructions.
FILES _
SEE ALSO fptrap(III)
DIAGNOSTICS -
BUGS -
OWN ER ken, dmr
)
\
’
’
’
[Page: 151]
3/15/72 INTR (II)
NAME intr -- set interrupt handling
SYNOPSIS sys intr; arg / intr = 27.
DESCRIPTION When arg is 0, interrupts (ASCII DELETE) are
i ignored. When arg is 1, interrupts cause their
normal result, that is, force an exit. When arg
is a location within the program, control is
transferred to that location when an interrupt
OCCUL Se
After an interrupt is caught, it is possible to
resume execution by means of an rti instruction;
i however, great care must be exercised, since all
‘ I/O is terminated abruptly upon an interrupt. In
particular, reads of the typewriter tend to re-
turn with O characters read, thus simulating an
end of file.
FILES --
SEE ALSO quit(II)
DIAGNOSTICS -—
BUGS It should be easier to resume after an interrupt,
but I don’t know how to make it work.
OWN ER . ken, dmr
[Page: 152]
6/12/72 KILL (II)
NAME kill -- destroy process
SYNOPSIS (process number in r0)
sys kill / kill = 37.3; not in assembler
' DESCRIPTION kill destroys a process, given its process
number. The process leaves a core image.
This call is restricted to the superuser, and is
intended only to kill an otherwise unstoppable
process.
FILES --
| SEE ALSO —_ |
DIAGNOSTICS c-bit set if user is not the super-user, or if
process does not exist.
BUGS kill has been known to be ineffective.
OWN ER ken, amr
{
[Page: 153]
3/15/72 LINK (IT)
NAME link -- link to a file
SYNOPSIS sys link; name,; name / link = 9.
. DESCRIPTION A link to name, is created; the link has name
{ ° name. Either name may be an arbitrary path
name.
'
' FILES --
SEE ALSO link(I), unlink(II)
)
DIAGNOSTICS The error bit (c-bit) is set when name, cannot be
( found; when name, already exists; when the direc
| . tory of names cafinot be written; when an attempt
is made to link to a directory by a user other
' than the super-user.
BUGS -—
; OWN ER ken, amr
4 .
b
’
’
{
[Page: 154]
3/15/72 MAKDIR (II)
NAME makdir —— make a directory
SYNOPSIS sys makdir; name; mode / makdir = 14.
DESCRIPTION makdir creates an empty directory whose name is
i the null-terminated string pointed to by name.
The mode of the directory is mode. The special
entries .« and ..- are not present.
makdir can only be invoked by the superuser.
FILES — -~
= SEE ALSO mkdir (I) |
DIAGNOSTICS Error bit (c-bit) is set if the directory already
exists or if the user is not the super-user.
BUGS --
OWN ER ken, dmr
)
[Page: 155]
3/15/72 . MDATE (II)
NAME mdate -- set modified date on file
SYNOPSIS (time to AC-MQ)

sys mdate; file / mdate = 30.

i DESCRIPTION File is the address of a null-terminated string
giving the name of a file. The modified time of
the file is set to the time given in the AC-MQ
registers.

This call is allowed only to the super-user or to
the owner of the file.

( FILES --

SEE ALSO -—

DIAGNOSTICS Error bit is set if the user is not the super-
user or if the file cannot be found.

BUGS -

OWN ER ken, dmr
[Page: 156]
3/15/72 MOUNT (II)
NAME mount —- mount file system
SYNOPSIS sys mount; special; name / mount = 21.
DESCRIPTION mount announces to the system that a removable
Z file system has been mounted on special file
special; from now on, references to file name
will refer to the root file on the newly mounted
file system. Special and name are pointers to
null-terminated strings containing the appropri-
ate path names.
Name must exist already. If it had useful con-
{ tents, they are jnaccessible while the file sys-
—- tem is mounted.
! Almost always, name should pe a directory so that
| an entire file system, not just one file, may
exist on the removable device.
| FILES --
| SEE ALSO mount(I), umount(IT)
| DIAGNOSTICS Error bit (e-bit) set if special is inaccessible
. or dir does not exist.
| BUGS At most two removable devices can be mounted at a
time. The use of this call should be restricted
to the super-user.
| OWNER ken, dmr
(
|
[Page: 157]
3/15/72 OPEN (II)
NAME open -- open for reading or writing
SYNOPSIS sys open; name; mode / open = 5.
(descriptor in r0)
£ DESCRIPTION open opens the file name for reading (if -mode is
0) or writing (if mode is non-zero). mame is the
address of a string of ASCII characters
representing a path name, terminated by a null
character.
The file descriptor should be saved for subse-
quent calls to read (or write) and close.
—— In both the read and write case the file pointer
is set to the beginning of the file.
If the last link to an open file is removed, the
| file is not destroyed until it is closed.
FILES -——
SEE ALSO creat(II), read(II), write(II), close(II)
' DIAGNOSTICS The error bit (c-bit) is set if the file does not
’ exist, if one of the necessary directories does
, not exist or is unreadable, or if the file is not
readable.
’
BUGS -—
OWN ER ken, dmr
| :
’
'
y
’
[Page: 158]
3/15/72 QUIT (II)
NAME quit -- turn off quit signal
SYNOPSIS sys quit; flag / quit = 26.
DESCRIPTION When flag is 0, this call disables quit signals
from the typewriter (ASCII FS). When flag is 1,
quits are re-enabled, and cause execution to
cease and a core image to be produced. When flag
is an address in the program, a quit causes con—
trol to be sent to that address.
Quits should be turned off only with due con-
sideration. .
: FILES --
SEE ALSO intr (II) ;
DIAGNOSTICS -_
BUGS -
OWN ER ken, dmr
i
—_ 4 _
[Page: 159]
3/15/72 READ (II)
- NAME read -- read from file ,
_ SYNOPSIS (file descriptor in r0)
sys read; buffer; nchars / read = 3.
(nread in rO)
DESCRIPTION A file descriptor is a word returned from a suc—
cessful open call.
Buffer is the location of nchars contiguous bytes
into which the input will be placed. It is not
guaranteed that all nchars bytes will be read,
however; for example if the file refers to a
{ typewriter at most one line will be returned. In
oO any event the number of characters read is re-
turned in r0O.
If rO returns with value O, then end-of-file has
been reached. .
FILES --
SEE ALSO open(ITI)
DIAGNOSTICS As mentioned, rO is O on return when the end of
| the file has been reached. If the read was
otherwise unsuccessful the error bit (c-bit) is
set. Many conditions, all rare, can generate an
error: physical I/O errors, bad buffer address,
. preposterous nchars, file descriptor not that of
an input file.
BUGS -—-
OWN ER ken, amr
F
[Page: 160]
3/15/72 RELE (II)
NAME rele -- release processor
SYNOPSIS sys rele / rele = 0; not in assembler
DESCRIPTION This call causes the process to be swapped out
t immediately if another process wants to run. Its
main reason for being is internal to the system,
namely to implement timer-runout swaps. However,
4t can be used beneficially by programs which
wish to loop for some reason without consuming
more processor time than necessary.
FILES --
| : SEE ALSO --
; DIAGNOSTICS --
| BUGS --
4
OWN ER ken, dmr
f
[Page: 161]
3/15/72 SEEK (II)

NAME seek -- move read/write pointer

SYNOPSIS (file descriptor in r0)
sys seek; offset; ptrname / seek = 19.

: DESCRIPTION The file descriptor refers to a file open for
. reading or writing. The read (or write) pointer
for the file is set as follows:
if ptrname is 0, the pointer is set to offset.
if ptrname is 1, the pointer is set to its
current location plus offset.
. if ptrname is 2, the pointer is set to the
size of the file plus offset.

FILES --

SEE ALSO tell(II)

DIAGNOSTICS The error bit (c-bit) is set for an undefined
file descriptor.

BUGS A file can conceptually be as large as 2**20 :
bytes. Clearly only 2**16 bytes can be addressed
by seek. The problem is most acute on the tape
files and RK and RF. Something is going to be
done about this.

OWN ER ken, dmr
[Page: 162]
3/15/72 . SETUID (II)
NAME setuid -- set process ID
SYNOPSIS (process ID in rO0)
sys setuid / setuid = 23.
( DESCRIPTION The user ID of the current process is set to the
argument in r0. Both the effective and the real
user ID are set. This call is only permitted to
the super-user or if rO is the real user ID.
FILES --
SEE ALSO getuid(II)
. DIAGNOSTICS Error bit (c-bit) is set if the current user ID
is not that of the super-user.
BUGS -—
OWNER ken, dmr
|
)
'
) ;
| .
[Page: 163]
3/15/72 ; SLEEP (II)
NAME sleep -- stop execution for interval
SYNOPSIS (60ths of a second in r0)
sys sleep / sleep = 35.; not in assembler
t DESCRIPTION The current process is suspended from execution
for the number of 60ths of a second specified by
the contents of register 0.
FILES -- ;
SEE ALSO -—
. DIAGNOSTICS --
BUGS Due to the implementation, the sleep interval is
only accurate to 256 60ths of a second (4.26
sec). Even then, the process is placed on a low
priority queue and must be scheduled.
OWN ER ken, dmr
[Page: 164]
3/15/72 STAT (II)
NAME stat -- get file status
SYNOPSIS sys stat; name; buf / stat = 18.
; DESCRIPTION name points to a null-terminated string naming a
( file; buf is the address of a 34(10) byte buffer
into which information is placed concerning the
file. It is unnecessary to have any permissions
at all with respect to the file, but all direc
tories leading to the file must be readable.
After stat, buf has the following format:
i buf, +1 i-number
. +2,+3 flags (see below)
+4 number of links
+5 user ID of owner
+6,+7 size in bytes
+8,+9 first indirect block or contents block
+22,+23 eighth indirect block or contents block.
+24,+25,+26,+27 creation time
+28,+29,+30,+31 modification time
+32,+33 unused
The flags are as follows:
400000 used (always on)
, 040000 directory
020000 file has been modified (always on)
010000 large file
000040 set user ID
000020 executable
, 000010 read, owner
. 000004 write, owner
000002 read, non-owner
000001 write, non-owner
FILES -—
SEE ALSO stat(I), fstat(II)
DIAGNOSTICS Error bit (c-bit) is set if the file cannot be
found.
BUGS The format is going to change someday.
OWNER ken, dmr
[Page: 165]
3/15/72 STIME (II)
NAME stime -- set time
SYNOPSIS (time in AC-MQ)
sys stime / stime = 25.
DESCRIPTION stime sets the system’s idea of the time and
, date. Only the super-user may use this call.
FILES -_—
SEE ALSO date(I), time(II)
DIAGNOSTICS Error bit (c-bit) set if user is not the super
usere
BUGS —_
OWN ER ken, dmr
[Page: 166]
6/12/72 sTTY (II)

NAME stty -— set mode of typewriter

SYNOPSIS (file descriptor in r0}
sys stty; arg / stty = 31.

' arg: dcrsr; dcpsr; mode

DESCRIPTION stty sets mode bits for a typewriter whose file
descriptor is passed in r0. First, the system
delays until the typewriter is quiescent. Then,
the argument dcrsr is placed into the typewri-
ter’s receiver control and status register, and
depsr is placed in the transmitter control and

i status register. The pCc-11 manual must be con—

‘ sulted for the format of these words. For the
purpose of this call, the most important role of
these arguments is to adjust to the speed of the
typewriter.

The mode arguments contains several bits which
determine the system’s treatment of the
typewriter:
200 even parity allowed on input (e. g. for m37s)
400 odd parity allowed on input
040 raw mode: wake up on all characters
— 020 map CR into LF; echo LF or CR as LF-CR
010 echo (full duplex)
004 map upper case to lower on input (e- g- M33)
002 echo and print tabs as spaces
001 inhibit all function delays (e. g- CRTs)
Characters with the wrong parity, as determined
by bits 200 and 100, are ignored.
In raw mode, every character is passed back im-
mediately to the program. No erase or kill pro-
cessing is done; the end-of-file character (EOT),
the interrupt character (DELETE) and the quit
‘ character (FS) are not treated specially.
Mode 020 causes input carriage returns to be
turned into new-lines; input of either CR or LF
causes LF-CR both to be echoed (used for GE Ter
miNet 300’s and other terminals without the new™
line function).
Additional bits in the high order byte of the
mode argument are used to indicate that the ter-
minal is an IBM 2741 ana to specify 2741 modes.
These mode bits ares
400 terminal is an IBM 2741
4000 the 2741 has the transmit interrupt feature
(currently ignor ed)
2000 use correspondence code conversion on output
[Page: 167]
6/12/72 STTY (II)
4000 use correspondence code conversion on input
(currently ignored) ;
Normal input and output code conversion for 2741s
is EBCDIC (e. g- 963 ball and corresponding key~-
{ board). The presence of the transmit interrupt
. feature permits the system to do read-ahead while
no output is in progress. In 2741 mode, the low
order bits 331 are ignored.
. FILES --
SEE ALSO stty(I), gtty(II)
\ DIAGNOSTICS The error bit (c-bit) is set if the file descrip-
tor does not refer to a typewriter.
BUGS This call should be used with care. It is all
too easy to turn off your typewriter.
OWN ER ken, dmr
[Page: 168]
6/12/72 SYNC (II)
NAME sync -- update super-—block
SYNOPSIS sys sync / sync = 36.3; not in assembler
; DESCRIPTION syne causes the super block for all file systems
i to be written out. It is only necessary on sySs—
tems in which this writing may be delayed for a
long time, i.e., those which incorporate hardware
protection facilities.
It should be used by programs which examine a
file system, for example check, df, tm, etc.
' FILES --
SEE ALSO -
DIAGNOSTICS -- |
BUGS --
OWN ER ken
{
—_ 4 =
[Page: 169]
3/15/72 TELL (II)
NAME tell -- get file pointer
SYNOPSIS (file descriptor in r0O)
sys tell; offset; ptrname / tell = 20.
_ (value returned in r0)
DESCRIPTION The file descriptor refers to an open file. The
value returned in rO is one of:
if ptrname is 0, the value returned is offset;
if ptrname is 1, the value is the current
pointer plus offset;
{
if ptrname is 2, the value returned is the
number Of bytes in the file plus offset.
FILES -- |
SEE ALSO seek (II)
DIAGNOSTICS The error bit (c-bit) is set if the file descrip-
tor is unknown.
BUGS Tell doesn’t work. Complain if you need it.
OWNER ken, Gmr
[Page: 170]
3/15/72 , TIME (II)
NAME time -- get time of year
SYNOPSIS sys time / time = 13.
(time AC-MQ)
: DESCRIPTION time returns the time since 00:00:00, Jan. 1,
1971, measured in sixtieths of a second. The
high order word is in the AC register and the low
order is in the MQ.
FILES --
SEE ALSO date(I), stime(IT)
DIAGNOSTICS --
BUGS The chronological-minded user will note that
. 2##32 sixtieths of a second is only about 2.5
years.
OWN ER ken, dmr
| .
| ;
{
[Page: 171]
3/15/72 UMOUNT (II)
NAME umount -- dismount file system
SYNOPSIS sys umount; special / umount = 22.
DESCRIPTION umount announces to the system that special file
. special is no longer to contain a removable file
system. The file associated with the special
file reverts to its ordinary interpretation (see
mount).
The user must take care that all activity on the
file system has. ceased.
FILES —_
SEE ALSO umount(I), mount(II)
DIAGNOSTICS Error bit (c-bit) set if no file system was
mounted on the special file. ;
BUGS Use of this call should be restricted to the
super—-usere
OWN ER ken, dmr
{
[Page: 172]
3/15/72 . UNLINK (II)

NAME unlink -- remove directory entry

SYNOPSIS sys unlink; name / unlink = 10.

DESCRIPTION Name points to a null-terminated string. Unlink

{ removes the entry for the file pointed to by name
from its directory. If this entry was the last
link to the file, the contents of the file are
freed and the file is destroyed. If, however,
the file was open in any process, the actual des-
truction is delayed until it is closed, even
though the directory entry has disappeared.

. FILES _—

SEE ALSO rm(I), rmdir(I), link(II)

DIAGNOSTICS The error bit (c-bit) is set to indicate that the
file does not exist or that its directory cannot
be written. Write permission is not required on
the file itself. It is also illegal to unlink a
directory (except for the super-user ).

BUGS Probably write permission should be required to

remove the last link to a file, but this gets in
other problems (namely, one can donate an un~
aeletable file to someone else).
If the system crashes while a file is waiting to
be deleted because it is open, the space is lost.
OWN ER ken, dmr
’
[Page: 173]
3/15/72 WAIT (II)
NAME wait -— wait for process to die
SYNOPSIS sys wait / wait = 7.
(process ID in r0)
(termination status/user status in MQ)
DESCRIPTION wait causes its caller to delay until one of its
child processes terminates. If any child has
already died, return is immediate; if there are
no children, return is immediate with the error
bit set. In the case of several children several
waits are needed to learn of all the deaths.
i If the error bit is not set on return, the MQ
. high byte contains the low byte of the child pro-
cess rO when it terminated. The MQ low byte con-
tains the termination status of the process from
the following list;
O exit
1 bus error
2 trace trap
3 illegal instruction
4 IOT trap
5 power fail trap
6 EMT trap
7 bad system call
8 quit
; 9 interrupt
40 kill (see kill(II))
+16 core image produced
FILES --
SEE ALSO exit(II), fork(II)
| DIAGNOSTICS error bit (c-bit) on if no children not previous-—
; ly waited for.
t BUGS A child which dies but is never waited for is not
really gone in that it still consumes disk swap
) and system table space. This can make it impos-
sible to create new processes. The bug can be
noticed when several & separators are given to
the shell not followed by a command without an
) ampersand. Ordinarily things clean themselves up
) when an ordinary command is typed, but it is pos-
sible to get into a situation in which no com—-
mands are accepted, so no waits are done; the
} system is then hung. .
The fix, probably, is to have a new kind of fork
| which creates a process for which no wait is
necessary (or possible); also to limit the number
of active or inactive descendants allowed to a
proc 2ss.
[Page: 174]
3/15/72 WRITE (II)
NAME write -—- write on file
SYNOPSIS (file descriptor in r0)
sys write; buffer; nchars / write = 4.
(number written in r0)
(
DESCRIPTION A file descriptor is a word returned from a suc—
cessful open or creat call.
buffer is the address of nchars contiguous bytes
which are written on the output file. The number
of characters actually written is returned in rQ.
It should be regarded as an error if this is not
! ( the same as requested.
| For disk and tape files, writes which are multi-
ples of 512 characters long and begin on a
| 542-byte boundary are more efficient than any
others.
| FILES -- .
4 .
SEE ALSO creat(II), open(II)
| DIAGNOSTICS The error bit (c-bit) is set on an error: bad
descriptor, buffer address, or count. physical
I/O errors;
; BUGS —-
OWN ER ken, dmr
y
\
’ .
i
j
[Page: 175]
3/15/72 ATAN, ATAN2 (III)
NAME atan -- arc tangent function
SYNOPSIS jsr r5,atan[2]
DESCRIPTION The atan entry returns the arc tangent of frO in
frO. The range is zero to pi/2. The atan2 entry
returns the arc tangent of frO/fri in frO. The
5 range is -pi to pi. The floating point simula-
tion should be active in either floating or dou-
ble mode, but in single precision integer mode.
FILES kept in /usr/lib/liba.a
SEE ALSO fptrap(III)
\ DIAGNOSTICS --
BUGS oe
OWNER rhm, Gmr, Ken
— 4 _ ‘
[Page: 176]
3/15/72 ATOF (III)
NAME atof -- ascii to floating
SYNOPSIS jsx r5,atof; subr
DESCRIPTION atof will convert an ascii stream to a floating
number returned in fro. The subroutine subr is
called on r5 for each character of the ascii
: stream. subr should return the character in r0.
The first character not used in the conversion is
left in rO. The floating point simulation should
be active in either floating or double mode, but
in single precision integer mode.
FILES kept in /usr/lib/liba.a
7 SEE ALSO fptrap(III)
DIAGNOSTICS -
BUGS The subroutine subr should not disturb any regis
ters.
OWNER ken
-i-7-
[Page: 177]
3/15/72 ATOIL (III)
NAME atoi -- ascii to integer
SYNOPSIS jsxr r5,atoi; subr
DESCRIPTION atoi will convert an ascii stream to a binary
number returned in mq. The subroutine subr is
; called on r5 for each character of the ascii
7 stream. subr should return the character in r0.
The first character not used in the conversion is
left in r0O.
FILES kept in /usr/lib/liba.a
SEE ALSO -_
( DIAGNOSTICS --
BUGS The subroutine subr should not disturb any regis-
terSe
OWNER ken
. _4-
[Page: 178]
3/15/72 CONST (III)
NAME const -- floating point constants
SYNOPSIS -
DESCRIPTION The following floating point constants are
eorrectly represented in double precision.
one 1.0
pi2 0.5%3.1415.6-
FILES kept in /usr/lib/liba.a
SEE ALSO fptrap(III)
DIAGNOSTICS --
BUGS -— |
OWNER rhm, amr, ken.
{
-1{1-
[Page: 179]
3/15/72 CTIME (III)
NAME ctime -- convert date and time to ASCII
SYNOPSIS (move time to AC-MQ)
mov sbuffer, r0
jsr pce,ctime
; DESCRIPTION The buffer is 15 characters long. The time has
‘ the format ,
Oct 9 17:32:24
The input time is in the AC and MQ registers in
the form returned by sys time.
FILES kept in /usr/lib/liba.a
, SEE ALSO ptime(III), time(II)
DIAGNOSTICS -- .
BUGS --
OWNER amr
i
-41-
[Page: 180]
3/15/72 EXP (III)
NAME exp -—— exponential function
SYNOPSIS jsr r5,eXp
DESCRIPTION The exponential of frO is returned in frO. The
floating point simulation should be active in
F either floating or double mode, but in single
precision integer mode.
FILES kept in /usr/lib/liba.a
SEE ALSO fptrap(III) .
DIAGNOSTICS The c-bit is set if the result is not represent—
; able.
BUGS -- .
OWNER rhm, dmr, ken
-i-
[Page: 181]
3/15/72 FPTRAP (IIL)
NAME fptrap -— ppp-11/45 floating point simulator
SYNOPSIS eglobl fptrap
sys ilgins; fptrap
DESCRIPTION fptrap is a package which picks up instructions
which are illegal for the ppp-11/20, and if they
\ correspond to 11/45 floating point instructions,
simulates their operation. The following in-
structions are supported:
cfcc
setf
seti
setd
{ setl
clrf fdst
tstf fsre
absf fdst
negf fdst
mulf fsrc,fr
modft fsrce,fr
addf fsrce,fr
movt fsrc,fr (=1df)
movf fr,fdst (=stf )
subf fsre,fr
cmpf fsrc,fr
divt fsrc,fr
movfi fr,dst (=stcfi)
movif src,fr (=ldcif )
| movfo fr,fdst (=stexy )
movoft fsrc,fr (=1dcyx)

) Here sre and dst stand for source and destina-

) tion, fsre and fdst for floating source and des-
tination, and fr for floating register. Notice
that the names of several of the opcodes have

| changed. The only strange instruction is movt,
which turns into stf£ if its source operand is a

, floating register, and into ldf if not.

(
. The simulator sets the floating condition codes
on both ldf and stf. The 41/45 hardware does not

p set the fcc on stf.

Short and long format for both floating point

) numbers and integers is supported. Truncation
mode is always in effect. Traps for overflow and

, other arithmetic errors are not supported. Iile-

gal instructions OF addresses cause 4 simulated
trap so that a core image is produced.
The condition code bits are maintained correctly.
‘ For floating-point source operands, immediate
mode ((pe)+) is not supported, since the
—-i1-
[Page: 182]
3/15/72 | FPTRAP (III)
ppPp-11/45 handbook is not clear on what to do
about it.

After an arithmetic error the result is generally
meaningless.

j The arithmetic is always done in double-

‘ precision, so exact but unrounded results are to
be expected in single-precision mode. Double
precision results are probably less correct than
the hardware will be.

The lower parts of the floating registers become
meaningless during single-precision operations.

_ FILES kept in /usr/lib/liba.a

SEE ALSO PpPp-11/45 handbook, ilgins(II)

DIAGNOSTICS trap, c-bit, v-bit

BUGS see above

OWN ER ken, dmr

:
-2-
[Page: 183]
3/15/72 FTOA (III)
NAME ftoa — floating to ascii conversion
SYNOPSIS jsr r5,ftoa; subr
DESCRIPTION ftoa will convert the floating point number in
fro into ascii in the form [-]a.daddadadde [-] da*.
The floating point simulator should be active in
: either floating or double mode, but in single
integer mode. For each character generated by
ftoa, the subroutine subr is called on register
r5 with the character in r0.
FILES kept in /usr/lib/liba.a
; SEE ALSO fptrap(III)
DIAGNOSTICS -—
BUGS The subroutine subr should not disturb any regis~
terse
OWN ER ken
} °
' .
4
’
,
j
- 4 _
[Page: 184]
3/15/72 CONNECT, GERTS (III)

NAME connect, gerts —— Gerts communication over 201

SYNOPSIS jsr r5,connect
(error return)/

; jsr r5,gerts; fe; oc; ibuf; obuf
(error return )

DESCRIPTION The GECOS GERTS interface is so bad that a
description here is inappropriate. Anyone need-
ing to use this interface should contact the own
ere

i FILES /aev/ano, /dev/dapOo
kept in /usr/lib/liba.a

SEE ALSO an(Iv), ap(IVv), HIS documentation

DIAGNOSTICS -- .

BUGS --

OWNER ken

)
i
|
{
'
’
4
’
-i1i-o-
[Page: 185]
3/15/72 GETC, GETW, FOPEN (III)
NAME getw, getc, fopen -- buffered input
SYNOPSIS mov $filename,rO
jsr r5,fopen; iobuf
jsxr r5,getc; iobuf
, (character in r0)
. jsr r5,getw; iobuf
(word in r0)
DESCRIPTION These routines are used to provide a buffered
input facility. jobuf is the address of a
518(10) byte buffer area whose contents are main-
; tained by these routines. Its format is:
. joptr: .«=+2 / file descriptor
o=et2 / characters left in puffer
e=et2 / ptr to next character
o=et512- / the buffer
fopen may be called initially to open the file.
On return, the error bit (c-bit) is set if the
open failed. If fopen is never called, get will
read from the standard input file.
| getc returns the next byte from the file in r0.
| The error bit is set on ena of file or a read
errore
getw returns the next word in r0. gete and getw
may be used alternately; there are no odd/even
problems.
' jobuf must be provided by the user; it must be on
a word boundary.
, FILES kept in /usr/lib/liba.a
SEE ALSO open(II), read(II), putc( III)
, DIAGNOSTICS c-bit set on EOF or error
BUGS -—
OWNER dmr
—-i-
[Page: 186]
6/12/72 HYPOT (III)
NAME hypot -— calculate hypotenuse
SYNOPSIS (A in £r0)
(B in fr0)
jsr r5,hypot
DESCRIPTION The square root of frO*frO + fri*fr1 is returned
: in frO. The calculation is done in such a way
that overflow will not occur unless the answer is
not representable in floating point.
The floating point simulator should be active in
either single or double mode.
. FILES kept in /usr/lib/liba.a
. SEE ALSO fptrap(III)
DIAGNOSTICS The c-bit is set if the result cannot be
represented.
BUGS -
OWN ER ken, Gmr
_4-
[Page: 187]
3/15/72 ITOA (III)
NAME itoa -- integer to ascii conversion
SYNOPSIS jsr r5,itoa; subr | ;
DESCRIPTION jtoa will convert the number in rO into ascii
decimal possibly preceded by a — sign. For each
character generated by itoa, the subroutine subr
co is called on register r5 with the character in
r0.
FILES kept in /usr/lib/liba.a
SEE ALSO -—
; DIAGNOSTICS --
BUGS The subroutine subr should not disturb any regis-
ters.
OWNER ken
i
—-i1-
[Page: 188]
3/15/72 LOG (III)
NAME log -—- logarithm base e
SYNOPSIS jsr r5,log
DESCRIPTION The logarithm base e of frO is returned in fr0.
The floating point simulation should be active in
; either floating or double mode, but in single
N. precision integer mode. .
Ao
FILES kept in /usr/lib/liba.a
SEE ALSO fptrap 8
DIAGNOSTICS The error bit (c-bit) is set if the input argu-
‘ ment is less than or equal to zero.
t
Oe BUGS --
OWNER ken
4
-i-
[Page: 189]
3/15/72 MESG (III)
NAME mesg -- write message on typewriter
SYNOPSIS jsr r5,mesg; <Now is the time\O>; .even
DESCRIPTION mesg writes the string immediately following its
call onto the standard output file. The string
is terminated by a O byte.
FILES kept in /usr/lib/liba.a
SEE ALSO -—-
DIAGNOSTICS --
| BUGS --
OWNER ken, dmr
|
{
-1{-
[Page: 190]
| 6/12/72 NLIST (III)

NAME nlist -- get entries from name list

SYNOPSIS jsr r5,nlist; file; list

file: <file name\0O>
list:
<name1xxx>; type1; valuet
\ <name2xxx>; type2; value2
0 .

DESCRIPTION nlist will examine the name list in an assembler
output file and selectively extract a list of
values. The file name is a standard UNIX path

. name. The name list consists of a list of 8-

- 4 character names (null padded) each followed by
two words. The list is terminated with a zero.
Fach name is looked up in the name list of the
file. If the name is found, the type and value
of the name are placed in the two words following
the name. If the name is not found, the type
entry is set to —1.
This subroutine is useful for examining the sys-—
tem name list kept in the file /sys/sys/unix. In

’ this way programs can obtain system ‘magic’

numbers that are up to date.

) FILES kept in /usr/lib/liba.a

SEE ALSO _ a,out(V)

| DIAGNOSTICS All type entries are set to -1 if the file cannot
be found or if it is nota valid namelist.

)

BUGS - :
' OWNER ken
}
- 1 ~
[Page: 191]
3/15/72 PTIME (III)
NAME ptime -—~ print date and time
SYNOPSIS (move time to ac-—mq )
, mov file,rO
jsrxr pc, ptime
DESCRIPTION ptime prints the date and time in the form
Oct 9 17:20:33
on the file whose file descriptor is in rO. The
string is 15 characters long. The time to be
printed is placed in the AC and MQ registers in
the form returned by sys time.
‘ FILES kept in /usr/lib/liba.a
SEE ALSO time(II), ctime(III) (used to do the conversion )
DIAGNOSTICS -—
BUGS see ctime
OWN ER dmr, ken
]
’
| -i- .
[Page: 192]
6/12/72 PUTC, PUTW, FCREAT, FLUSH (III)
NAME putc, putw, fereat, flush —— buffered output
SYNOPSIS mov sfilename,rO
jsxr r5,fcreat; iobuf
(get byte in r0)
; jsx r5,putc; iobuf
(get word in r0)
jsr r5, putw; jobuf
jsr r5,flush; iobuf
DESCRIPTION foreat creates the given file (mode 17) and sets
. up the buffer jobuf (size 518(10) bytes); putc
7 and putw write a byte or word respectively onto
the file; flush forces the contents of the buffer
to be written, but does not close the file. The
format of the buffer is:
iobuf: e=e+2 / file descriptor
e=et2 / characters unused in buffer
e=et2 / ptr to next free character
e=et51 26 / buffer
fereat sets the error bit (c-bit ) if the file
creation failed; none of the other routines re-
turn error information.
Before terminating, a program should call flush
to force out the last of the output.
The user must supply jobuf, which should begin on
a word boundary.
FILES kept in /usr/lib/liba.a
SEE ALSO creat(II), write(II), getc(III)
DIAGNOSTICS error bit possible on fereat call
BUGS -— |
OWNER dmr
. - 4 -
[Page: 193]
6/12/72 QSORT (IIT)
NAME qsort -- quicker sort
SYNOPSIS (base of data in r1)

(end of data in r2 )

(element width in r3)

jsr pc,qsort

\

DESCRIPTION gsort is an implement ation of the quicker sort
algorithm, It is designed to sort equal length
pyte strings. Registers r1 and r2 delimit the
region of core containing the array of byte
strings to be sorted: r1 points to the start of
the first string, r2 to the first location above
the last string. Register r3 contains the length
of each string. r2-ri should be a multiple of

( r3. On return, r0, ri, r2, v3, r4, AC and MQ are
destroyed.

FILES _-

SEE ALSO -—

DIAGNOSTICS —_—

BUGS The user should be able to supply his own compar-—
ison routine.

OWNER ken |

)

4

q

\
[Page: 194]
6/15/72 . SALLOC (III)
NAME salloc -- string manipulation routines
SYNOPSIS (get size in r0)
jsr pe, allocate
(get source pointer in r0,
t destination pointer in r1)
jsr pc, copy
jsr pe,we
(all following instructions assume ri‘ contains pointer)
jsr pe,release
| (get character in r0)
jsr pe, putchar
jsr pc, lookchar
(character in r0)
jsr pe, getchar
(character in r0)
(get character in r0)
jsr pe, alterchar
(get position in r0)
jsex pe, seekchar
jsr pc, backspace
(character in r0)
. (get word in r0)
jsr pc, putword
jsr pc, lookword
(word in r0)
- jsr pe,getword
(word in r0)
(get word in r0)
jsr pe, alterword
jsr pc, backword
(word in r0)
jsr pc,length
(length in r0) .
jsr pe, position
(position in r0)
jsr pc,rewind
-4{-
[Page: 195]
6/15/72 SALLOC (III)
jsr pe, create
jsr pe, fsfile
jsr pe,zero |
DESCRIPTION This package is a complete set of routines for
dealing with almost arbitrary length strings of
words and byteSe The strings are stored on a
disk file, so the sum of their lengths can be
considerably larger than the available core.
For each string there is a header of four wordS,
namely a write pointer, & read pointer and
i pointers to the beginning and end of the block
containing the string. Initially the read and
write pointers point to the beginning of the
string. All routines that refer to a string
require the header address in r1.e Unless the
string is destroyed by the call, upon return r1
will point to the same string, although the
string may have grown to the extent that it had
to be be movede
allocate obtains & string of the requested size
and returns a pointer to its header in rie
release releases 4 string back to free storages
putchar and putword write a byte or word respec
tively into the string and advance the write
pointer.
lookchar and lookword read a byte or word respec—
tively from the string but do not advance the
read pointere
getchar and getword read a pyte or word respec—
tively from the string and advance the read
| pointere
alterchar and alterword write 4 pyte or word
respectively into the string where the read
pointer is pointing and advance the read pointer.
backspace and backword read the last byte or word
written and decrement the write pointere
All write operations will automatically get a
larger block 4f the current block is exceeded.
All read operations return with the error pit set
if attempting to read beyond the write pointer.
seekchar moves the read pointer to the offset
| specified in r0.
-2-
[Page: 196]
6/15/72 SALLOC (III)
length returns the current length of the string
(beginning pointer to write pointer ) in rO0.
position returns the current offset of the read
pointer in rO5
rewind moves the read pointer to the current
position of the write pointer.
create returns the read and write pointers to the
beginning of the string.
fsfile moves the write pointer to the current
position of the read pointer.
. zero zeros the whole string and sets the write
pointer to the beginning of the stringe
copy copies the string whose header pointer is in
ro to the string whose header pointer is in rte
Care should be taken in using the copy instruc—
tion since r1 will be changed if the contents of
the source string is bigger than the destination
string.
we forces the contents of the internal buffers
ana the header blocks to be written on aisce .
FILES The allocator proper is in Jusr/1le/alloc/alloca.
._ The archive Jusr/1lce/alloc/allocb contains the
individual routines discussed above.
alloc.d is the temporary file used to contain the
stringSe
SEE ALSO _
DIAGNOSTICS “error in copy” if a disk write error occurs dur-
; ing the execution of the Copy instruction.
error in allocator if any routine is called
with a bad header pointer. Cannot open output
file if file alloc.d cannot be created or
opened, Out of space if there’s no available
block of the requested size or no headers avail-
able for a new blocke
BUGS -—
OWNER lle,rhm
. - 3 -
[Page: 197]
3/15/72 , SIN, cos (IIT)
NAME sin, cos —- sine cosine
SYNOPSIS jsr r5,sin (cos)
DESCRIPTION The sine (cosine) of fr0O (radians) is returned in
a frO. The floating point simulation should be
active in either floating or double mode, but in
single precision integer mode. All floating
registers are used.
FILES kept in /usr/lib/liba.a
SEE ALSO fptrap(III)
i DIAGNOSTICS -_
BUGS Size of the argument should be checked to make
sure the result is meaningful.
OWN ER ken, Gmr
|
)
’
-— 1 =
[Page: 198]
3/15/72 SQRT (III)

NAME sqrt -- square root function |

SYNOPSIS jsxr r5,sqrt

DESCRIPTION The square root of frO is returned in fr0. The
floating point simulation should be active in
either floating or double mode, but in single

precision integer mode.

FILES kept in /usr/lib/liba.a

SEE ALSO fptrap(III)
DIAGNOSTICS The c-bit is set on negative arguments.
| BUGS --

OWNER rhm, dmr, ken

—-i1i-
[Page: 199]
3/15/72. . SWITCH (III)

NAME switch -- switch on value

SYNOPSIS (switch value in r0)
jsr r5,switch; swtab
(not-found return )

f swtab: val1; lab1;

valn; labn
ee3 O

DESCRIPTION switch compares the value of rO against each of
the val,; if a match is found, control is
transferred to the corresponding lab, (after pop-

i ping the stack once). If no match has been found

by the time a null lab, occurs, switch returns.

FILES kept in /usr/lib/liba.a

SEE ALSO -—

DIAGNOSTICS -—-

BUGS --

OWNER ken, dmr

4
| '
~ 4 -
[Page: 200]
3/15/72 DNO (IV)
NAME anO -—- dn-11 ACU interface
SYNOPSIS _
DESCRIPTION dnO is a write-only file. Bytes written on dn0Q
must be ASCII digits. Each digit corresponds to
i a digit of a telephone number to be called. The
entire telephone number must be presented in a
single write system call. The call must complete
with the last digit.
FILES found in /dev
SEE ALSO apO(IV), write(II)
i
* DIAGNOSTICS -—
BUGS -_
OWN ER ken, dmr
}
’
.]
)
{
)
|
| -i-
[Page: 201]
3/15/72 pp (IV)
NAME apO -—- dp-11 201 data-phone interface
SYNOPSIS --
DESCRIPTION dpO is a 201 data-phone interface file. read and
write calls to dpO are limited to a maximum of
{ 400 bytes. Each write call is sent as a single
record. Seven bits from each byte are written
along with an eighth odd parity bit. The sync
must be user supplied. Each read call returns
characters received from a single record. Seven
bits are returned unaltered; the eighth bit is
set if the byte was not received in odd parity.
A 20 second time out is set and a zero byte
i record is returned if nothing is received in that
, time.
FILES found in /dev
SEE ALSO anO(IV), gerts(III)
DIAGNOSTICS -—
BUGS The dp file is GECOS oriented. It should be more
flexible.
OWN ER ken, dmr
| ;
U
) ;
i
-1-
[Page: 202]
6/12/72 . LPR (IV)
NAME . /aev/ipr -- line printer
SYNOPSIS --
DESCRIPTION The line printer special file is the UNIX inter-
face to a DEC LP-11 line printer. This file may
po only be opened (or creat’ed) for writing. Any-
thing written on this file is printed on the line
printer. The following special cases for the
printer are handled:
On opening and on closing, the paper is slewed
to the top of the next page.
{ For the 64 character printer (LP11-FA), all
. lower case letters are converted to upper
Casee
Tabs are converted to align on every eighth
column.
New lines and form feeds are ignored when the
printer is at the top of a page. This is done
so that pr and roff output may be directed to
the printer and sync on page boundaries even
with automatic page slew.
Carriage return and back space can cause mul—
tiple printing on a single line to allow for
overstruck graphics.
FILES found in /dev
SEE ALSO -—
DIAGNOSTICS --
BUGS -_
- OWN ER ken, dmr
-1-
[Page: 203]
3/15/72 MEM (IV)
NAME mem -—- core memory
SYNOPSIS —
DESCRIPTION mem maps the core memory of the computer into a
file. It may be used, for example, to examine,
: and even to patch the system using the debugger.
Mem is a byte-oriented file; its bytes are num—
bered O to 65,535.
FILES found in /dev
SEE ALSO -—
: DIAGNOSTICS --
BUGS If a location not corresponding to implemented
memory is read or written, the system will incur
a bus-error trap and, in panic, will reboot it-
self.
OWN ER ken, dmr
' ,
.
’
’
) 7
!
| _1-
[Page: 204]
6/12/72 MTO (IV)
NAME mtO -- magtape
SYNOPSIS -
DESCRIPTION mtO is the DEC TU10/TM11 magtapee When opened
for reading or writing, the magtape is rewound.
‘ A tape consists of a series of 256 word records
terminated by an end-of-file. Reading less than
256 words (512 bytes) causes the rest of a record
to be ignored. Writing less than a record causes
null padding to 512 bytes. When the magtape is
closed after writing, an end-of-file is written.
Seek has no effect on the magtape.e The IMagtape
Jd can only be opened once at any instant.
FILES found in /dev
SEE ALSO mt (I)
DIAGNOSTICS -- ,

. BUGS Seek should work on the magtape. Also, a provi-
sion of having the tape open for reading and
writing should exist. A multi-file and multi-
reel facility should be jncorporated.

OWN ER ken, dmr
-d1-
[Page: 205]
3/15/72 PPT (IV)
NAME ppt -- punched paper tape
SYNOPSIS -_ :
DESCRIPTION ppt refers to the paper tape reader or punch,
. depending on whether it is read or written.
4
When ppt is opened for writing, a 100-character
leader is punched. Thereafter each byte written
is punched on the tape. No editing of the char-
acters is performed. When the file is closed, a
400-character trailer is punched.
When ppt is opened for reading, the process waits
; until tape is placed in the reader and the reader
, is on-line. Then requests to read cause the
characters read to be passed back to the program,
again without any editing. This means that
several null characters will usually appear at
the beginning of the file; they correspond to the
tape leader. Likewise several nulls are likely
to appear at the end. End-of-file is generated
when the tape runs. out.
Seek calls for this file are meaningless and are
effectively ignored (however, the read/write
pointers are maintained and an arbitrary sequence
of reads or writes intermixed with seeks will
give apparently correct results when checked with
tell).
, FILES found in /dev
, SEE ALSO --
DIAGNOSTICS -—
BUGS —_
OWN ER ken, dmr
4
-j{1-
[Page: 206]
3/15/72 RFO (IV)
NAME rf£0 —-- RFI1-RS11 fixed-head disk file
SYNOPSIS — ;
DESCRIPTION This file refers to the entire RF disk. It may
be either read or written, although writing is
£ inherently very dangerous, since a file system
resides there.
The disk contains 4024 256-word blocks, numbered
0 to 1023. Like the other plock-structured dev—
ices (tape, RK disk) this file is addressed in
blocks, not bytes. This has two consequences:
seek calls refer to block numbers, not byte
i numbers; and sequential reading or writing always
advance the read or write pointer by at least one
block. Thus successive reads of 10 characters
from this file actually read the first 10 charac”
ters from successive blocks.
FILES found in /dev
SEE ALSO tapO(IV), rkO(IV)
DIAGNOSTICS -- ,
BUGS The fact that this device is addressed in terms
of blocks, not bytes, is extremely unfortunate.
It is due entirely to the fact that read and
write pointers (and consequently the arguments to
seek and tell) are single-precision numbers.
This really has to be changed but unfortunately
the repercussions are serious.
OWN ER ken, amr
| -41-
[Page: 207]
3/15/72 . RKO (IV)
NAME rkO — RKO3 (or RKOS) disk
SYNOPSIS -
DESCRIPTION rkO refers to the entire RKO3 disk as a single
sequentially-addressed file. Its 256-word blocks
are numbered O to 4871. Like the RF disk and the
tape files, its addressing is block-oriented.
Consult the rfO(IV) section.
FILES found in /dev
SEE ALSO rfO(IV), tapO(IV)
; DIAGNOSTICS --
BUGS See rfO(IV)
OWN ER ken, dmr
-i-
[Page: 208]
6/12/72 RPO (IV)
NAME rpO -- RP11/RP02 disk .
SYNOPSIS -— ,
DESCRIPTION rpO refers to the entire RPO2 disk as a single
sequentially-addressed file. Its 256-word blocks
are numbered O to 40599. Like the RF disk and
the tape files, its addressing is block-oriented.
Consult the rfO(IV) section.
FILES found in /dev
SEE ALSO rfO(Iv), tapO(IV)
i DIAGNOSTICS -—
BUGS See rfO(IV)
Due to a hardware bug, block 40599 on the RP can-—
not be accessed.
OWN ER ken, dmr
-1-
[Page: 209]
3/15/72 TAPO ... TAP7 (IV)
NAME tapO ... tap7

SYNOPSIS -

DESCRIPTION These files refer to DECtape drives 0 to 7.

Since the logical drive number can be manually
set, all eight files exist even though at present
; there are fewer physical drives.

The 256-word blocks on a standard DECtape are

numbered O to 577. However, the system makes no

assumption about this number; a block can be read

or written if it exists on the tape and not oth-—-

erwise. An error is returned if a transaction is
attempted for a block which does not exist.

Like the RK and RF special files, addressing on

the tape files is block-oriented. See the RFO

section.
FILES found in /dev
SEE ALSO /aev/rf£0, /dev/rk0O
DIAGNOSTICS --
BUGS see /dev/rf0
OWN ER ken, dmr
- 1 -
[Page: 210]
3/15/72 TTy (IV)
NAME tty — console typewriter
SYNOPSIS -
DESCRIPTION tty (as distinct from ttyO, eee, ttyn) refers to
the console typewriter hard-wired to the PDP-11.
. Generally, the disciplines involved in dealing
with tty are similar to those for ttyO ... and
the appropriate section should be consulted. The
following differences are salient:
The system calls stty and gtty do not apply to
this device. It cannot be placed in raw mode; on
i input, upper case letters are always mapped into
, lower case letters; a carriage return is echoed
when a line-feed is typed.
The quit character is not FS (as with tty0...-) .
but is generated by the key labelled alt mode.
By appropriate console switch settings, it is
possible to cause UNIX to come up as a single-
user system with I/o on this device.
FILES found in /dev
SEE ALSO ttyO(IV), init(VII)
' DIAGNOSTICS -
BUGS —
; OWN ER ken, dmr
'
!
’
-1-
[Page: 211]
6/12/72 TTYO (IV)
NAME . ttyO ... tty? —— communications interfaces
SYNOPSIS —_
DESCRIPTION These files refer to pci1i asynchronous communica—
tions interfaces. At the moment there are eight
i of them, but the number is subject to change.
When one of these files is opened, it causes the
process to wait until a connection is esta-
blished. (In practice, however , user’s programs
seldom open these files; they are opened by init
and become a user’s standard input and output
file.) The very first typewriter file open in 4
: process becomes the control typewriter for that
process. The control typewriter plays a special
role in handling quit or interrupt signals, as
discussed below. The control typewriter is in-
herited by a child process during a fork.
A terminal associated with one of these files
ordinarily operates in full-duplex mode. Charac—
ters may be typed at any time, even while output
is occurring, and are only lost when the system’s
Character input buffers become completely choked,
which is rare, or when the user has accumulated
the maximum allowed number of input characters
which have not yet been read by some progralle
Currently this limit is 150 characters. When
‘ this is happening the character # is echoed for
every lost input character.
When first opened, the standard interface mode ,
; assumed includes: ASCII characters; 150 baud;
even parity accepted; 40 bits/character (one stop
bit); and newline action character. The system
delays transmission after sending certain func—
tion characters; delays for horizontal tab, new
line, and form feed are calculated for the Tele- _
type Model 37; the delay for carriage return is
‘ calculated for the GE TermiNet 300. Most of
these operating states can be changed by using
the system call stty(II). In particular the fol-
lowing hardware states are program settable in-
dependently for input and output (see DC11
manual): 110, 13465; 450, 300, 600, or 4200 baud;
one or two stop bits on output; and 5, 6, 7, or 8
bits/character. In addition, the following
: software modes can be invoked: acceptance of even
parity, odd parity, or both; a raw mode in which
all characters may be read one at a time; a car-
riage return (CR) mode in which CR is mapped into
newline on input and either CR or line feed (LF)
cause echoing of the sequence LF-CR; mapping of
upper case letters into lower case; suppression
of echoing; suppression of delays after function
-1-
[Page: 212]
6/12/72 TTYO (IV)
characters; the echoing of input tabs as spaces;
and setting the system to handle IBM 2741s. See
getty(VII) for the way that terminal speed and
type are detected.

Normally, typewriter input is processed in units
of lines. This means that a program attempting
to read will be suspended until an entire line
has been typed. Also, no matter how many charac—
ters are requested in the read call, at most one
line will be returned. It is not however neces—
sary to read a whole line at once; any number of
Characters may be requested in a read, even one,
without losing information.
During input, erase and kill processing is nor-
mally done. The character # erases the last
character typed, except that it will not erase
beyond the, beginning of a line or an EOF. The
character "e kills the entire line up to the
point where it was typed, but not beyond an EOF.
Both these characters operate on a keystroke
basis independently of any backspacing OF tabbing
that may have been done. Either @ or wf, may
be entered literally by preceding it by \ 3 the
erase or kill character remains, but the \-
disappears.
; It is possible to use raw mode in which the pro-
gram reading is wakened on each character. The
program waits only until at least one character
has been typed. In raw mode, no erase or kill
processing is done; and the EOT, quit and inter-
rupt characters are not treated specially.
The ASCII EOT character may be used to generate
an end of file from a typewriter. When an EOT is
received, all the characters waiting to be read
are immediately passed to the program, without
waiting for a new-line. Thus if there are no
characters waiting, which is to say the EOT oc—
curred at the beginning of a line, zero charac
ters will be passed back, and this is the stan-
dard ' end-of-file signal.
When the carrier signal from the dataset drops
(usually because the user has hung up his termi-
nal) any read returns with an end-of-file indica-
tion. Thus programs which read a typewriter and
test for end-of-file on their input can terminate
appropriately when hung up on. .
Two characters have a special meaning when typed.
The ASCII DEL character (sometimes called rub-
out”) is the interrupt signal. When this charac~
ter is received from a given typewriter, a search
-2-
[Page: 213]
6/12/72 TTYO (IV)
is made for all processes which have this type-
writer as their control typewriter, and which
have not informed the system that they wish to
ignore interrupts. If there is more than one
such process, one of these is selected, for prac-—
tical purposes at random. If interrupts aren’t

i being ignored, the process is either forced to
exit or a trap is simulated to an agreed-upon
location in the process. See intr(II). .
The ASCII character FS is the quit signal. Its
treatment is identical to the interrupt signal
except that unless the receiving process has made
; other arrangements it will not only be terminated

F but a core image file will be generated. See

. quit(II).

Output is prosaic compared to input. When one or
more characters are written, they are actually
transmitted to the terminal as soon as

. previously-written characters have finished typ-
ing. Input characters are echoed by putting them
in the output queue as they arrive. When a pro-
gram produces characters more rapidly than they
can be typed, it will be suspended when its out—
put queue exceeds some limit. When the queue has
drained down to some threshold the program is
resumed. Even parity is always generated on out—
put. The EOT character is not transmitted to
prevent terminals which respond to it from being
hung upe
The system will handle IBM 2741 terminals. See
getty(VII) for the way that 2741s are detected.
In 2741 mode, the hardware state is: 134.5 baud;
one output stop bit; and 7 bits/character. Be-
cause the 2741 is inherently half-duplex, input
is not echoed. Proper function delays are pro-

vided. For 2741s without a feature known as

"transmit interrupt. it is not possible to col-

: lect input ahead of the time that a program reads
the typewriter, because once the keyboard has
been enabled there is no way to send further out-
put to the 2741. It is currently assumed that
the feature is absent; thus the keyboard is un~

locked only when some program reads. The inter-

rupt signal (normally aAs¢it DEL) is simulated
when the 2741 “attention. key is pushed to gen—
erate either a 2741 style EOT or a break. It is
not possible to generate anything corresponding
to the end-of-file EOT or the quit signal.
Currently IBM EBCDIC is default for input and
output; correspondence code output is settable
(see stty(I)). |The full ASCII character set is
not available: "(", "), {» Js, , are miss-
ing on input and are printed as blank on output;

- 3 -
[Page: 214]
6/12/72 TTYO (IV)
"¢. is used for mre Ma" for sor ™e" for both
7" anda” *"on output; and ' maps into ‘" on
input. Similar mappings occur with correspon—
dence code output.
FILES found in /dev
SEE ALSO tty(I), getty(VIT)
DIAGNOSTICS | -
BUGS The primarily Model 37 oriented delays may not be
appropriate for all other ASCII terminals.
OWN ER ken, dmr, jfo
-4-
[Page: 215]
3/15/72 A.OUT (Vv)
NAME a.out -- assembler and link editof output
/
SYNOPSIS -- /
DESCRIPTION a.out is the output file of the agsembler as and
; the link editor ld. In both cases, a.out is exe-
i. cutable provided there were no errors and no
unresolved external references. ‘
This file has four sections: a header, the pro-
gram and data text, a symbol table, and reloca-
tion bits (in that order). The last two may, be
empty if the program was loaded with the "-s
7 option of ld or if the symbols and relocation
} have been removed by strip.
The header always contains 8 words:
4 a “br .+20” instruction (407(8))
2 The size of the program text segment
3 The size of the initialized data segment
4 The size of the uninitialized (bss) segment
5 The size of the symbol table
6 The entry location (always O at present)
7 The stack size required (O at present)
8 A flag indicating relocation bits have been
suppressed
The sizes of each segment are in bytes but are
even. The size of the header is not included in
any of the other sizes.
When a file produced by the assembler or loader
is loaded into core for execution, three logical
segments are set up: the text segment, the data
segment, and the uninitialized segment, in that
order. The text segment begins at the lowest
location in the core image; the header is not .
loaded. The data segment begins immediately
i after the text. segment, and the bss segment im-
mediately after the data segment. The bss seg-
ment is: initialized by O’s. In the future the
text segment will be write-protected and shared.
The start of the text segment in the file is
20(8); the start of the data segment is 20+S,
(the size of the text) the start of the reloéa-
. tion information is 20+5,+S.; the start of the
| symbol table is 20+2(s,+8,)°if the relocation
information is present, 20+s, +84 if not.
The symbol table consists of 6-word entries. The
first four contain the ASCII name of the symbol,
null-padded. The next word is a flag indicating
the type of symbol. The following values are
possible:
[Page: 216]
3/15/72 A.OUT (V)
00 undefined symbol
01 absolute symbol
02 text segment symbol
03 data segment symbol
04 bss segment symbol |
. 40 undefined external (.globl) symbol
: 41 absolute external symbol
42 text segment external symbol
43 data segment external symbol
44 bss segment external symbol
Values other than those given above may occur if
the user has defined some of his own instruc
tions.
The last word of a symbol table entry contains
the value of the symbol.
If the symbol’s type is undefined external, and
the value field is non-zero, the symbol is inter-
preted by the loader 1d as the name of a common
region whose size is indicated by the value of
the symbol.
If a.out contains no unresolved global refer-
ences, the text portions are exactly as they will
appear in core when the file is executed. If the
value of a word in the text portion involves a
reference to an undefined global, the word is
replaced by the offset to be added to the
symbol’s value when it becomes defined.
If relocation information is present, it amounts
to one word per word of program text or initial-
ized data. There is no relocation information if
the suppress relocation flag in the header is
on.
Bits 3-1 of a relocation word indicate the seg-
i ment referred to by the text or data word associ-
ated with the relocation word:
00 indicates the reference is absolute
02 indicates the reference is to the text seg-
ment
04 indicates the reference is to the data seg-
ment
06 indicates the reference is to the bss seg-
. ment
40 indicates the reference is to an undefined
external symbol. °
Bit 0 of the relocation word indicates if on that
the reference is relative to the pc (e.g. clr
: x"); if off, the reference is to the actual sym-
bol (eege, clr *$x ).
-~-2-
[Page: 217]
3/15/72 A.ouT (V)
The remainder of the relocation word (bits 15-4)
contains a symbol number in the case of external
references, and is unused otherwise. The first
symbol is numbered 0, the second 1, etc.
FILES —
SEE ALSO as ld, strip, nm, un(I)
DIAGNOSTICS -—
BUGS --
OWN ER amr
’
| .
5
H
’
’
-3-
[Page: 218]
3/15/72 ARCHIVE (V)
NAME archive (library) file format
SYNOPSIS —
DESCRIPTION The archive command ar is used to combine several
files into one. Its use has three benefits: when
( files are combined, the file space consumed by
the breakage at the end of each file (256 bytes
on the average) is saved; directories are smaller
ana less confusing; archive files of object pro-
grams may be searched as libraries by the loader
ld.
A file produced by ar has a “magic number” at the
F start, followed by the constituent files, each
preceded by a file header, The magic number is
-147(10), or 177555(8) (it was chosen to be un-
likely to occur anywhere else). The header of
each file is 16 bytes long:
0-7
file name, null padded on the right
B-11
Modification time of the file
12
User ID of file owner
13
file mode
14-15
file size
If the file is an odd number of bytes long, it is
padded with a null byte, but the size in the
header is correct.
Notice there is no provision for empty areas in
an archive file.
’ FILES --
SEE ALSO ar, id
DIAGNOSTICS -—
| BUGS --
OWNER ken, amr
-i1-
[Page: 219]
3/15/72 CORE (Vv)
NAME format of core image
, SYNOPSIS --
DESCRIPTION Three conditions cause UNIX to write out the core
image of an executing program: the program gen-—

. erates an unexpected trap (by a bus error or
illegal instruction); the user sends a quit”
signal (which has not been turned off by the
program); a trap is simulated by the floating
point simulator. The core image is called "core™
and is written in the current working directory
(provided it can be; normal access controls ap-
ply).

\

° The size and structure of the core image file
depend to some extent on which system is in-
volved, In general there is a 512-byte area at
the end which contains the system’s per-process
data for that process. The remainder represents
the actual contents of the user’s core area when
the core image was written. In the current sys-
tem, this area is variable in size in that only
the locations from user 0 to the program break,
plus the stack, is dumped.
when any trap which is not an t/o interrupt oc-
curs, all the useful registers are stored on the

stack, After all the registers have been stored,
the contents of sp are placed in the first cell
of the user area; this cell is called u.SDp.
Therefore, within the core image proper, there is
an area which contains the following registers in
the following order (increasing addresses):
(u.sp)->s¢
mq
ac
_ rs
r4
r3
r2
ri
ro
pe (at time of fault)
processor status (at time of fault)
The last two are stored by the hardware. It fol-
lows that the contents of sp at the time of the
fault were (u.sp) plus 22(10).
The actual location of this data depends on which
system is being used, In the current system,
which has relocation and protection hardware, the
stack discussed above is the system stack, and is
kept in the per-user area; in older systems,
_4-
[Page: 220]
3/15/72 CORE (Vv)
there is only one stack, and it is located in the
user’s core area,

In general the debugger db(I) should be used to
deal with core images.
‘ FILES -—

SEE ALSO —~

DIAGNOSTICS -—

BUGS --

, OWNER ken, dmr
'
-2-
[Page: 221]
3/15/72 DIRECTORY (Vv)
NAME format of directories
SYNOPSIS --
: DESCRIPTION A directory behaves exactly like an ordinary
file, save that no user may write into a directo-
ry. The fact that a file is a directory is indi-
cated by a bit in the flag word of its i-node
entry.
Directory entries are 10 bytes long. The first
word is the i-node of the file represented by the
entry, if non-zero; if zero, the entry is empty.
- Bytes 2-9 represent the (8-character) file name,
null padded on the right. These bytes are not
necessarily cleared for empty slots.
By convention, the, first tyo entries in each
directory are for ".. and ... The first is an
entry for the directory itself. The second is
for the parent directory. The meaning of .. is
modified for the root directory of the master
file system and for the root Girectories of re-
movable file systems, In the first case, there
is no parent, and in the second, the system does
not permit off-device references without a mount
system call, Therefore in both cases .. has
the same meaning as. «
FILES -—
SEE ALSO file system format
DIAGNOSTICS -—
BUGS --
OWNER ken, dmr
-1-
[Page: 222]
3/15/72 FILE SYSTEM (Vv)
NAME format of file system
SYNOPSIS _
DESCRIPTION Every file system storage volume (e.g. RF disk,
RK disk, DECtape reel) has a common format for
certain vital information.
Every such volume is divided into a certain
number of 256 word (512 byte) blocks. Blocks 0
and 1 are collectively known as the super-—block
for the device; they define its extent and con-
tain an i-node map and a free-storage map. The
first word contains the number of bytes in the
\ free-storage map; it is always even. It is fol-
lowed by the map. There is one bit for each
block on the device; the bit is “1 if the block
is free. Thus if the number of free-map bytes is
n, the blocks on the device are numbered 0
through 8n-1. The free-map count is followed by
the free map itself. The bit for block k of the
device is in byte k/8 of the map; it is offset
k(mod 8) bits from the right. Notice that bits
exist for the superblock and the i-list, even
though they are never allocated or freed. ;
After the free map is a word containing the byte
count for the i-node map. It too is always even.
I-numbers below 41(10) are reserved for special
files, and are never allocated; the first bit in
the i-node free map refers to i-number 41.
Therefore the byte number in the i-node map for
j-node i is (i-41)/8. It is offset (4-41) (mod
8) bits from the right; unlike the free map, a
“oO” bit indicates an available i-node.
I-numbers begin at 1, and the storage for i-nodes
begins at block 2. Also, i-nodes are 32 bytes
long, so 16 of them fit into a block. Therefore,
i-node i is located in block (4431)/16 of the
file system, and begins 32° ( (4431) (mod 16)) bytes
from its start.
There is always one file system which is always
mounted; in standard UNIX it resides on the RF
disk. This device is also used for swapping.
The swap areas are at the high addresses on the
device. It would be convenient if these ad-
dresses did not appear in the free list, but in
fact this is not 50. Therefore a certain number
of blocks at the top of the device appear in the
free map, are not marked free, yet do not appear
within any file. These are the blocks that show
up "missing in a check of the RF disk.
Again on the primary file system device, there
-~{t-
[Page: 223]
3/15/72 FILE SYSTEM (Vv)
are several pieces of information following that
previously discussed. They contain basically the
information typed by the tm command; namely, the
times spent since a cold boot in various ca-
tegories, and a count of I/O errors. In particu-
lar, there are two words with the calendar time

7 (measured since 00:00 Jan 1, 1971); two words
with the time spent executing in the system; two
words with the time spent waiting for I/O on the
RF and RK disks; two words with the time spent
executing in a user’s core; one byte with the
count of errors on the RF disk; and one byte with
the count of errors on the RK disk. All the
times are measured in sixtieths of a second,

I-node 41(10) is reserved for the root directory
of the file system. No i-numbers other than this
one and those from 1 to 40 (which represent spe-
cial files) have a built-in meaning. Each i-node
represents one file, The format of an i-node is
as follows, where the left column represents the
offset from the beginning of the i-node:

O-1 flags (see below)
2 number of links
3 user ID of owner
4-5 size in bytes
6-7 first indirect block or contents block
20-21 eighth indirect block or contents block
22-25 creation time
26-29 modification time
30-31 unused
The flags are as follows:
400000 i-node is allocated
040000 directory
020000 file has been modified (always on)
010000 large file
000040 set user ID on execution
000020 executable
000010 read, owner
000004 write, owner
000002 read, non-owner
000001 write, non-owner
The allocated bit (flag 100000) is believed even
if the i-node map says the i-node is free; thus
corruption of the map may cause i-nodes to become
unallocatable, but will not cause active nodes to
be reused,
Byte number n of a file is accessed as follows: n
‘{s divided by 512 to find its logical block
number (say b) in the file. If the file is small
-2-
[Page: 224]
3/15/72 FILE SYSTEM (v)
(flag 010000 is 0), then b must be less than 8,
and the physical block number corresponding to b
is the bth entry in the address portion of the
i-node.

If the file is large, b is divided by 256 to

Oe yield a number which must be less than 8 (or the

file is too large for UNIX to handle). The
corresponding slot in the i-node address portion
gives the physical block number of an indirect
block. The residue mod 256 of b is multiplied by
two (to give a byte offset in the indirect block)
and the word found there is the physical address
of the block corresponding to b.

. If block b in a file exists, it is not necessary
that all blocks less than b exist. A zero block
number either in the address words of the i-node
or in an indirect block indicates that the
corresponding block has never been allocated.
Such a missing block reads as if it contained all
zero words.

FILES --

SEE ALSO format of directories

DIAGNOSTICS _

BUGS Two blocks are not enough to handle the i- and
free-storage maps for an RPO2 disk pack, which
contains around 10 million words.

OWNER --

'
9
-3-
[Page: 225]
6/12/72 IDENT (Vv)
NAME ident -- IDENT card file
SYNOPSIS —
DESCRIPTION ident is a file used to generate GECOS SIDENT
. cards by the off-line print program opr(I).
i There is one entry per line in the following
styles:
05 :m1234,m789,name
which causes the following SIDENT card to be
generated:
$ IDENT mi 234,m789,name
FILES kept in /etc/ident.
SEE ALSO opr(T)
DIAGNOSTICS -—
BUGS --
OWNER ken, amr
-1-
[Page: 226]
3/15/72 ; PASSWD (v)
NAME passwd —-- password file
SYNOPSIS --
DESCRIPTION passwd contains for each user the following |
informations:
, name (login name)
password
numerical user ID
default working directory
program to use as Shell
This is an ASCII file. Each field within each
. user’s entry is separated from the next by a
colon. Each user is separated from the next by a
new-line. If the password field is null, no
password is demanded; if the Shell field is null,
the Shell itself is used.
This file, naturally, is inaccessible to anyone
but the super-—user.
This file resides in directory fete.
FILES -—
SEE ALSO /etc/init
DIAGNOSTICS --
BUGS ———
OWNER super—-user
-~-1-
[Page: 227]
6/12/72 TAP (Vv)
NAME tap -- DEC/mag tape formats
SYNOPSIS —_—
DESCRIPTION The DECtape command tap and the magtape command
mt dump and extract files to and from their
respective tape media. The format of these tapes
, are the same.
Block zero of the tape is not used. It is avail-
able as a boot program to be used in a stand
alone enviornment. This has proved valuable for
DEC diagnostic programs.
Blocks 1 thru 24 contain a directory of the tape.
: There are 192 entries in the directory; 8 entries
per block; 64 bytes per entry. Each entry has
the following format:
path name 32 bytes
mode 1 byte
uid 1 byte
size 2 bytes
time modified 4 bytes
tape address 2 bytes
unused 20 bytes
check sum 2 bytes
The path name entry is the path name of the file
when put on the tape. If the pathname starts
with a zero word, the entry is empty. It is at
most 32 bytes long and ends in a null byte.
Mode, uid, size and time modified are the same as
described under inodes (see file system (v)) The
tape address is the tape block number of the .
start of the contents of the file. Every file
starts on a block boundary. The file occupies
(size+511)/512 blocks of continuous tape. The
checksum entry has a value such that the sum of
the 32 words of the directory is zero.
| Blocks 25 on are available for file storage.
A fake entry (see mt(I), tap(I)) has a size of
zero.
FILES --
. SEE ALSO filesystem(V), mt(I), tap(I)
DIAGNOSTICS --
BUGS -—
OWNER ken, amr .
, 4
[Page: 228]
3/15/72 UIDS (Vv) |

NAME /etc/uids -- map user names to user IDs

SYNOPSIS -—

DESCRIPTION This file allows programs to map user names into
user numbers and vice versa. Anyone can read it.
‘ It resides in directory /etc, and should be up-

- dated along with the password file when a user is
added or deleted.
The format is an ASCII name, followed by a colon,
followed by a decimal ASCII user ID number.

FILES --

SEE ALSO --

DIAGNOSTICS -—-

BUGS -_

OWNER amr, ken

-1-
[Page: 229]
3/15/72 UTMP (Vv)
NAME — /tmp/utmp -- user information
SYNOPSIS -—
DESCRIPTION This file allows one to discover information
about who is currently using UNIX. The file is
binary; each entry is 46(10) bytes long. The
first eight bytes contain a user’s login name or
are null if the table slot is unused. The low
order byte of the next word contains the last
character of a typewriter name (currently, “0° to
‘5’ for /dev/tty0 to /dev/tty5). The next two
words contain the user’s login time. The last
word is unused.
{
. This file resides in directory /tmp.
FILES -—
SEE ALSO /etc/init, which maintains the file.
DIAGNOSTICS -—
BUGS -—
OWNER ken, dmr
-1-
[Page: 230]
3/15/72 wrMP (Vv)
NAME /tmp/wtmp -——- user login history
SYNOPSIS -—-
DESCRIPTION ° This file records all logins and logouts. Its
format is exactly like utmp(V) except that a null
( user name indicates a logout on the associated
. typewriter, and the typewriter name ‘x’ indicates
that UNIX was rebooted at that point.
Wtmp is maintained by login(I) and {nit(VII).
Neither of these programs creates the file, so if
4t 4s removed record-keeping is turned off.
FILES --
SEE ALSO init(VII), login(I), tacct(I), acct(T)
DIAGNOSTICS — .
BUGS --
OWNER ken, dmr
 {
-1-
[Page: 231]
3/15/72 BASIC (VI)

NAME basic -- DEC supplied BASIC

SYNOPSIS basic [file]

DESCRIPTION Basic is the standard BASIC vOO0O AGistributed as a
stand alone program. The optional file argument
is read before the console. See DEC-11-AJPB-D

‘ manual.
Since bas is smaller and faster, basic is not
maintained on line.

FILES -_

. SEE ALSO bas
t .

DIAGNOSTICS See manual

BUGS GOK

OWN ER amr

4
-_ 4 _
[Page: 232]
6/12/72 BC (VI)
NAME be -- B interpreter
SYNOPSIS be [ -c ] sfile,sb ... ofile, ---
DESCRIPTION be is the UNIX B interpreter. It accepts three
types of arguments:
. Arguments whose names end with ".b are assumed
to be B source programs; they are compiled, and
the object program is left on the file sfile,.o
(i.e. the file whose name is that of the source
with ".o substituted for .b ).
Other arguments (except for "-c") are assumed to
: be either loader flag arguments, or B-compatible
object programs, typically produced by an earlier
be run, or perhaps libraries of B-compatible
routines. These programs, together with the
results of any compilations specified, are loaded
(in the order given) to produce an executable
program with name aout.
The "-c" argument suppresses the loading phase,
as does any syntax error in any of the routines
being compiled.
The language itself is described in [1].
The future if B is uncertain. The language has
been totally eclipsed by the newer, more power—
ful, more compact, and faster language C.
FILES file.b . input file
a.eout loaded output
b.tmp1 temporary (deleted)
b.tmp2 temporary (deleted)
/usr/lang/bdir/b[ca] translator
/usr/lang/bdir/brt [12] runtime initialization
/usr/lib/libb.a builtin functions, etc.
/uscr/lang/bdir/bilib.a interpreter library
| SEE ALSO (1] K. Thompson; MM-72-1271-15 Users’ Reference
to B.
c(T)
DIAGNOSTICS see [1].
BUGS Certain external initializations are illegal.
(In particular: strings and addresses of exter—
nals. )
OWNER ken, dmr ;
_— 4 _
[Page: 233]
3/15/72 BJ (VI)
NAME bj -- the game of black jack
SYNOPSIS /usr/games/bj
DESCRIPTION Black jack is a serious attempt at simulating the
dealer in the game of black jack (or twenty-one)
as might be found in Reno.
The following rules apply:
The bet is $2 every hand.
A player ‘natural’ (black jack) pays $3. A
dealer natural loses $2. Both dealer and
player naturals is a ‘push’ (no money ex-
change).
If the dealer has an ace up, the player is
allowed to make an “insurance’ bet against the
chance of a dealer natural. If this bet is
not taken, play resumes as normal. If the bet
is taken, it is a side bet where the player
wins $2 if the dealer has a natural and loses
$1 if the dealer does not.
If the player is dealt two cards of the same
value, he is allowed to “double’. He is al-
lowed to play two hands, each with one of
these cards. (The bet is doubled also; $2 on
each hand.)
If a dealt hand has a total of ten or eleven,
the player may ‘double down’. He may double
the bet ($2 to $4) and receive exactly one
more card on that hand.
Under normal play, the player may ‘hit’ (draw
a card) as long as his total is not over
twenty-one. If the player ‘busts’ (goes over
twenty-one), the dealer wins the bet.
When the player “stands’ (decides not to hit),
the dealer hits until he attains a total of
’ seventeen or more. If the dealer busts, the
player wins the bete
If both player and dealer stand, the one with
the largest total wins. A tie is a push.
The machine deals and keeps score. The following
questions will be asked at appropriate times.
Each question is answered by y followed by a new
line for ‘yes’, or just new line for ’no’.
? means ‘do you want a hit?’
Insureance?
. ” 1 ~
[Page: 234]
3/15/72 BJ (VI)
Double down?
Every time the deck is shuffled, the dealer so
states and the ‘action’ (total bet) and ’stand—-
ing’ (total won or loss) is printed. To exit,
hit the interrupt key (DEL) and the action and

standing will be printed.

FILES —_

SEE ALSO -—

DIAGNOSTICS -—

BUGS -_

OWNER ken

-2-
[Page: 235]
3/15/72 CAL (VI)
NAME cal -- print calendar
SYNOPSIS /usr/ken/eal year
DESCRIPTION Cal will print a calendar for the given year.
The year can be between O (really 1 BC) and 9999.
For years when several calendars were in vogue in
. different countries, the calendar of England (and
. therefore her colonies) is printed.
P.S. try cal of 1752.
FILES --
. SEE ALSO --
DIAGNOSTICS -—
BUGS -
OWNER ken
-~|{f-
[Page: 236]
6/13/1972 CHASH (VI)
NAME chash -- precompile a hash table for cref
SYNOPSIS chash file1 file2
DESCRIPTION CHASH takes symbols (character sequences; one per
line) from file1 and compiles a hash table for
the use of cref. The table is written on file2.
A subroutine suitable for searching such a hash
table is available from the author.
FILES ---
SEE ALSO cref
oS DIAGNOSTICS ---
BUGS There can only be 199 symbols; they may total
only 600 characters of text.
OWNER lem
. -1-
[Page: 237]
6/14/1972 CREF (VI)
NAME cref —— make cross reference listing
SYNOPSIS cref [ -soi ] name’ ...
DESCRIPTION CREF makes a cross reference listing of files in
Assembler format (see AS(I)). The files named as
. arguments in the command line are searched for
symbols (defined as a succession of alphabetics,
numerics, “°.’, or ‘_’, beginning with an alpha-
betic, °.°, or ‘_’).
The output report is in four columns:
(1) (2) (3) (4)
i symbol file see text as it appears in file
below
The third column contains the line number in the
file by default; the —s option will cause the
most recent name symbol to appear there instead.
CREF uses either an ignore file or an only file.
If the -i option is given, it will take the next
file name to be an ignore file; if the -o option
is given, the next file name will be taken as an
only file. Either ignore or only files must be
made by chash (qv) If an ignore file is
given, all the symbols in the file will be ig-
nored in columns (1) and (3) of the output. If
an only file is given, only symbols appearing in
the file will appear in column (1), but column
(3) will still contain the most recent name en-
countered. Only one of the options -i or -O may
be used. The default setting is -i; all symbols
predefined in the assembler are ignored, except
system call names, which are collected.
FILES Files t.0, t.1, te2, t.3 are created (i.e.
DESTROYED) in the working directory of anyone
; using cref. This nuisance will be repaired soon.
The output is left in file s.out in the working
Girectory.
/usr/lem/s.tab is the default ignore file.
SEE ALSO chash(VI); as(I)
DIAGNOSTICS "“J4ine too long” -- input line >131 characters
“symbol too long” -- symbol >20 characters
“too many symbols” -- >10 symbols in line
“cannot open t.?” -- bug; see author
-1-
[Page: 238]
6/14/1972 CREF (VI)
“cannot fork; examine t.out” -- can’t start sort
process; intermediate results are on files
t.0, t.1,t.2,t.3. These may be sorted in-
dependently and the results concatenated by
the user.

; "cannot sort” -- odd response from sort; examine

intermediate results, as above.
“impossible situation. -- system bug
“cannot open” file -- one of the input names

cannot be opened for reading.

i BUGS The destruction of unsuspecting users’ files
should soon be fixed. A limitation that may ~
eventually go away is the restriction to assem—
bler language format. There should be options for
FORTRAN, English, etc., lexical analysis.

File names longer than eight characters cause
misalignment in the output if tabs are set at
every eigth column.
OWNER lem
-2-
[Page: 239]
3/15/72 DAS (VI)

NAME das -- disassembler

SYNOPSIS -_—

DESCRIPTION . A PDP-11 disassembler exists. Contact the owner
for more information.

FILES | -—

SEE ALSO --

DIAGNOSTICS -—

BUGS —_
| OWNER ken

‘
-{-
[Page: 240]
3/15/72 DLI (VI)
NAME Ali -- load DEC binary paper tapes
SYNOPSIS dli output [input]
DESCRIPTION ali will load a DEC binary paper tape into the
( output file. The binary format paper tape is
: read from the input file (/dev/ppt is default. )
FILES /dev/ppt
SEE ALSO --
DIAGNOSTICS “checksum”
i BUGS --
OWNER amr
-4-
[Page: 241]
3/15/72 DPT (VI)
NAME dpt —- read DEC ASCII paper tape
SYNOPSIS apt output [input]
DESCRIPTION dpt reads the input file (/dev/ppt default) as-
suming the format is a DEC generated ASCII paper
tape of an assembly language program. The output
is a UNIX ASCII assembly program.
FILES /aev/ppt
SEE ALSO -—-
DIAGNOSTICS --
BUGS Almost always a hand pass is required to get a
correct output.
OWN ER ken, dmr
; -{4-
[Page: 242]
3/15/72 MOO (VI)

NAME moo -- a game

SYNOPSIS /usr/games/moo

DESCRIPTION moo is a guessing game imported from England.
| FILES _

SEE ALSO --

DIAGNOSTICS -—

BUGS -- |
OWNER ken

-1{1- |
[Page: 243]
3/15/72 PTX (VI)
NAME ptx — permuted index
SYNOPSIS ptx1 input temp
sort tempi temp2
ptx2 temp2 output
: DESCRIPTION ptx generates a permuted index from file input on
file output. It is in two pieces: the first does
the permutation, generating one line for each
keyword in an input line. The keyword is rotated
to the front. The permuted file must then be
sorted. ptx2 then rotates each line around the
_ middle of the page.
input should be edited to remove useless lines,
The following words are suppressed; <-Sre and y
was is , for , of , on, or , the , to,
up e
The index for this manual was generated using
ptx.
FILES -_
SEE ALSO sort
DIAGNOSTICS -
BUGS --
OWN ER amr
- 41 -
[Page: 244]
3/28/72 TG (VI)
NAME tmg -- compiler compiler
SYNOPSIS tmgq name
DESCRIPTION tmgq produces a translator for the language whose
syntactic and translation rules are described in
file name,t. The new translator appears in a.out
and may be used thus:
a.out input [ output ]
Except in rare cases input must be a randomly
addressable file. If no output file is speci-
fied, the standard output file is assumed.
The tmg language is described in (Reference).
FILES J/etc/tmg -- the compiler-—compiler
/etc/tmga, /etc/tmgb, /etc/tmge -- libraries
/etc/tmg0.s —- global definitions
SEE ALSO -
DIAGNOSTICS 22? -—- illegal input, offending line follows
fatal error codes, appear in tmg and a.out:
ad -- address out of bounds
so -- stack overflow
ga -- address out of bounds while generating
ko -- too much parse without output
to -- symbol table overflow
gn -- getnam on symbol not in table
co -- character string overflow
BUGS -- .
OWNER doug
-_ 1 _
[Page: 245]
3/15/72 TTT (VI)
. NAME ttt -- tic-tac-toe
SYNOPSIS /usr/games/ttt
DESCRIPTION ttt is the X’s and o0’s game popular in ist grade.
. This is a learning program that never makes the
same mistake twice.
FILES ttt.k -- old mistakes
SEE ALSO -_
DIAGNOSTICS -_
BUGS --
OWNER ken
-_ 4 -
[Page: 246]
[Page: 247]
6/12/72 ASCII (VII)
NAME ascii -- map of ASCII character set
SYNOPSIS cat /usr/pub/fascii
DESCRIPTION ascii is a map of the aAscil character set, to be
printed as needed, It contains:
. 1000 nul}001 soh{002 stx|003 etx }004 eot $005 enq{006 ack{|007 pel}
1010 bs {011 ht {012 nl 1013 vt {014 np {015 cr 1016 so {017 si |
: 1020 dlej021 de1!022 dc2{023 de3!024 dc4j025 nak!026 syn{027 etb}
1030 can}|031 em {032 subj 033 esc!034 fs {035 gs 1936 rs {037 us |
1040 sp {041 ! 1042 1043 # {044 § 1045 % {046 & 1047 ° |
fo050 ( {051 ) 1052 * {053 + 1054 , {055 - 1056 . {057 / i
'o60 O {061 1 1062 2 {063 3 1064 4 {065 5 1066 6 {067 7 {
1070 8 {071 9 1072 : {073 3 1074 < {O75 = 1076 > {O77 ? H
, 1400 @ {101 A 1402 B {103 C 1404 D {105 E 1106 F {107 G {
1440 H {111 TI 1412 J {113 K 1414 L {115 M 1416 N {117 O \
1420 P {121 Q 1422 R {123 S 1424 T {125 U {126 V 1427 WI
1430 X {131 Y 1432 Z {133 f 4134 \ 4135 ] {136 1437 _ |
(440 * {141 a {142 b 1443 c $144 @ j145 e 1146 f 1147 9 |
1450 h {151 i 1452 j {153 k 1454 1 {155 m 1456 n {157 © |
1460 p {161 q 1462 xr {163 Ss 1464 t {165 u {166 v 1467 w |
1470 x {171 y 1472 z {173 { $174 } {175 } {176 11477 del}
FILES found in /usr/pub
SEE ALSO --
DIAGNOSTICS -—
BUGS --
OWN ER jfo
-~-i1-
[Page: 248]
3/15/72 BOOT PROCEDURES (VII)
NAME bos, maki, rom, vcboot, msys, et al
SYNOPSIS —
DESCRIPTION On the RF disk, the highest 16K words are
reserved for stand-alone programs, These 16K
words are allocated as follows:
bos (1K)
Warm UNIX (7K) —
Cold UNIX (8K)
The UNIX read only memory (ROM) is home cut with
2 programs of 16 words each. The first (address
173000) reads bos from the RF disk into core
location 154000 and transfers to 154000. The
other ROM program (address 173040) reads a
DECtape sitting in the end-zone on drive O into
core location O and transfers to 0. This latter
operation is compatible with part of DEC’s stan-
dard ROM, The disassembled code for the UNIX ROM
follows:
173000; mov $177472,r0 127003177472
mov $3,-(r0) 12740 33
mov $140000,-(r0) 12740;140000
mov $154000,—(r0) 12740;154000
; mov $—2000 ,-(r0) 42740;176000
: MOV $5,-(r0) 12740;5
tstb (r0 ) 105710
bge e-2 2376
jmp #$154000 1373154000
173040: mov $177350,r0 127003177350
clr -(r0) 5040
mov r0,-(r0) 10040
mov $3,-(r0) 1274033
tstb (x0 ) 405710
bge 2-2 2376
tst *$177350 57373177350
bne ; 1377
movb $5,(x0) 11271035
tstb (rO) 105710
bge o-2 2376
clr pc 5007
, The program bos (Bootstrap Operating System)
examines the console switchs and executes one of
several internal programs depending on the set—
ting. The following settings are currently
recognized:
22? Will read Warm UNIX from the RF into core
location O and transfer to 600.
1 will read Cold UNIX from the RF into core
-~1-
[Page: 249]
3/15/72 BOOT PROCEDURES (VII)
location O and transfer to 600.
10 Will dump all of memory from core loca-
tion O onto DECtape drive 7 and then
halt.
20 Will read 256 words from RKO into core ¢)
: and transfer to zero, This is the pro-
cedure to boot DOS from an RK.
40 This is the same as 10 above, but instead
of halting, UNIX warm is loaded,
fe) will load a standard UNIX binary paper
tape into core location O and transfer to
! QO. ;
77500 will load the standard DEC absolute and
binary loaders and transfer to 77500.
Thus we come to the UNIX warm boot procedure: put
473000 into the switches, push load address and
then push start. The alternate switch setting of
473030 that will load warm UNIX is used as a sig-
nal to bring up a single user system for special
purposes, See init(VII). For systems without a
rom, UNIX (both warm and cold) have a copy of the
disk boot program at location 602. This is prob-
ably a better warm boot procedure because the
program at 602 also attempts to complete out—
Standing I/O.
Cold boots can be accomplished with the Cold UNIX
program, but they’re not. Thus the Cold UN IX
slot on the RF may have any program desired,
This slot is, however, used during a cold boot.
Mount the UNIX INIT DECtape on arive O positioned
in the end-zone, Put 473040 into the switches.
Push load address. Put 1 into the switches.
Push start. This reads a program called vcboot
from the tape into core location O and transfers
to it. veboot then reads 16K words from the
DECtape (blocks 4-32) and copies the data to the
highest 16K words of the RF. Thus this initial-
izes the read-only part of the RF. vcboot then
reads in bos and executes it. bos then reads in
Cold UNIX and executes that. Cold UNIX halts for
a last chance before it completely initializes
the RF file system. Push continue, and Cold UNIX
; will initialize the RF. It then sets into execu-
tion a user program that reads the DECtape for
initialization files starting from block 33.
When this is done, the program executes /etc/init
which should have been on the tape.
The INIT tape is made by the program maki running
-~-2-
[Page: 250]
3/15/72 BOOT PROCEDURES (VII)
under UNIX. maki writes vcboot on block O of
/dev/tap7. It then copies the RF 16K words
(using /dev/rf0) onto blocks 1 thru 32. It has
internally a list of files to be copied from
block 33 on. This list follows:
/etc/init
{ /bin/chmod
/bin/date
/bin/login
/bin/l1s
/bin/mkdir
/etc/mount
/bin/sh
/bin/tap
| Thus this is the set of programs available after
a cold boot. init and sh are mandatory. For
multi-user UNIX, getty and login are also neces—
sary. mkdir is necessary due to a bug in tap.
tap and mount are useful to bring in new files.
As soon as possible, date should be done, That
leaves ls and chmod as frosting.
The last link in this incestuous daisy chain is
the program msys.
msys char file
will copy the file file onto the RF read only
slot specified by the characacter char. Char is
taken from the following set:
b bos
u Warm UNIX
4A Cold UNIX ;
Due to their rarity of use, maki and msys are
maintained off line and must be reassembled be-
fore used,
FILES /aev/rf0, /dev/tap?

SEE ALSO init(VII), tap(I), sh(I), mkdir(TI)

DIAGNOSTICS -_—

BUGS This section is very configuration dependent.
Thus, it does not describe the boot procedure for
any one machine,

OWNER ken

-~3-
[Page: 251]
6/12/72 GETTY (VII)
NAME getty -- set typewriter mode and get user’s name
SYNOPSIS -_
DESCRIPTION getty is invoked by init (VII) immediately after
a typewriter is opened following a dial-in. The
user’s login name is read and the login(I) com-
mand is called with this name as an argument.
While reading this name getty attempts to adapt
the system to the speed and type of terminal
being used.
getty initially sets the speed of the interface
to 150 baud, specifies that raw mode is to be ;
_ used (break on every character), that echo is to
be suppressed, and either parity allowed. It
types the login: message (which includes the
characters which put the 37 Teletype terminal
into full-duplex and unlock its keyboard). Then
the user’s name is read, a character at a time.
If a null character is received, it is_assumed to
: be the result of the user pushing the “preak
- ("interrupt ) key, The speed is then changed to
300 baud and the "login:” is typed again, this
time with the appropriate sequence which puts a
GE TermiNet 300 into full-duplex. This sequence
is acceptable to other 300 baud terminals also.
If a subsequent null character is received, the
speed is changed again. The general approach is
to cycle through a set of speeds in response to
- null characters caused by breaks. The sequence
at this installation is 150, 300, and 134.5 baud.
Detection of IBM 2741s is accomplished while the
speed is set to 450 baud. The user sends a 2741
style eot character by pushing the attention
key or by typing return; at 150 baud, this char-
acter looks like the ascii “" (174,)- Upon
receipt of the eot 4 the system is set to
: operate 2741s and a login: message is typed.
The user’s name is terminated by a new-line or
carriage-return character. The latter results in
the system being set to to treat carriage returns
appropriately (see stty(II)).
The user’s name is scanned to see if it contains
any lower-case alphabetic characters; if not, the
system is told to map any future upper-case char—
acters into the corresponding lower-case charac—
ters. Thus UNIX is usable from upper-case-only
terminals.
Finally, login is called with the user’s name as
argument.
-1-
[Page: 252]
6/12/72 GETTY (VII)
FILES /etc/getty
SEE ALSO init(VII), login(I), stty(II)
DIAGNOSTICS --
‘ BUGS --
OWNER amr, ken, jfo
{
|
|
|
-2-
[Page: 253]
6/15/72 GLOB (VII)

NAME glob -- generate command arguments

SYNOPSIS --

DESCRIPTION glob is used to expand arguments to the shell
containing "*", ‘(’, or ?. It is passed the
argument list containing the metacharacters; qiob
expands: the list and calls the command itself.

FILES founda in /etc/glob

SEE ALSO sh(I)

DIAGNOSTICS "No match”, "No command”, “No directory

BUGS If any of ’*’, “(’, or ‘2° occurs both quoted and
unquoted in the original command line, even the
quoted metacharacters are expanded.
glob gives the "No match” diagnostic only if no
arguments at all result. This is never the case
if there is any argument without a metacharacter.

OWN ER amr

—-1-
[Page: 254]
6/15/72 INIT (VII)
NAME init -- process control initialization
SYNOPSIS -—
DESCRIPTION init is invoked inside UNIX as the last step in
the boot procedure. Generally its role is to
create a process for each typewriter on which a
user may log in.
First, init checks to see if the console switches
contain 173030. (This number is likely to vary
between systems.) If so, the console typewriter
tty is opened for reading and writing and the
Shell is invoked immediately. This feature is
used to bring up a test system, or one which does
not contain DC-11 communications interfaces.
When the system is brought up in this way, the
getty and login routines mentioned below and
Gescribed elsewhere are not needed.
Otherwise, init does some housekeeping: the mode
of each DECtape file is changed to 17 (in case ©
the system crashed during a tap command); direc—
tory /usr is mounted on the RKO disk; directory
/sys is mounted on the RK1 disk. Also a data-
phone daemon is spawned to restart any jobs being
sent.
Then init forks several times to create a process
for each typewriter mentioned in an internal
table. Each of these processes opens the ap-
propriate typewriter for reading and writing.
These channels thus receive file descriptors 0
and 1, the standard input and output. Opening
the typewriter will usually involve a delay,
since the open is not completed until someone is
Aialled in Cand carrier established) on the chan-
nel. Then the process executes the program
/etc/getty (qeVe )e etty will read the user’s
name and invoke login (q.v.) to log in the user
and execute the shell.
Ultimately the shell will terminate because of an
end—-of-file either typed explicitly or generated
as a result of hanging up. The main path of
init, which has been waiting for such an event,
wakes up and removes the appropriate entry from
the file utmp, which records current users, and
makes an entry in wtmp, which maintains a history
of logins and logouts. Then the appropriate
typewriter is reopened and getty reinvoked.
FILES kept in /etc/init; uses /aev/tap, /dev/tty,
/aev/tty?, /tmp/utmp, /tmp/wtmp
SEE ALSO login(I), login(VII), getty(VII), sh(I), dpda(TI)
-~4-
[Page: 255]
6/15/72 INIT (VII)
DIAGNOSTICS none possible
BUGS none possible
OWNER ken, dmr
- De
[Page: 256]
6/15/72 KBD (VII)
NAME kbd -- keyboard map
SYNOPSIS cat /usr/pub/kbd
DESCRIPTION kbd contains a map to the keyboard for model 37
Teletype terminals with the extended character
set feature. If kbd is printed on such a termi-
nal, the following will appears:
¢[1234567890-_]° \ >qwertyuiopée asdfghjkl;: zxevbnm, ./
£71234567890—--af¥ > v 33 »°/
ctr" #s%e’() =F SQWERTYUIOP* ASDFGHJKL+* ZXCVBNM, .?
<1 #s%&’() =7 >zxAsvecorel aeSOT¥xpat™ NEwVEnvs +?
FILES -—
SEE ALSO --
DIAGNOSTICS -—
BUGS --
OWN ER jfo
-1-
[Page: 257]
6/15/72 LOGIN, LOGOUT (VII)
NAME ~ logging in and logging out
SYNOPSIS -—
DESCRIPTION UNIX must be called from an appropriate terminal.
UNIX supports ASCII terminals typified by the
Teletype M37, the GE Terminet 300, the Memorex
1240, and various graphical terminals on the one
hand, and IBM 2741-type terminals on the other.
Not all installations support all these termi-
nals. Often the M33/35 Teletype is supported
instead of the 2741. Depending on the hardware
installed, most terminals operating at 110,
oF 434.5, 150, or 300 baud can be accommodated.
To use UNIX,. it is also necessary to have a valid
UNIX user ID and (if desired) password. These
may be obtained, together with the telephone
number, from the system administrators. :
The same telephone number serves terminals
| operating at all the standard speeds. The dis-
cussion below applies when the standard speeds of
434.5 (2741’s) 150 (TTY 37’s) and 300 (Terminet
300’s) are available.
When a connection is established via a_150—baud
terminal (e.g. TTY 37) UNIX types out "login: 3
you respond with your user name, and, if request-—
- ed, with a password. (The printer is turned off
while you type the, password. ) Tf the login was
successful, the @ character is typed by the
Shell to indicate login is complete and commands
may be issued. A message of the day may be typed
if there are any announcements. Also, if there
is a file called “mailbox”, you are notified that
someone has sent you mail. (See the mail com-
mand. )
From a 300—baud terminal, the procedure is
slightly different. Such terminals often have a
full-duplex switch, which should be turned on (or
conversely, half-duplex should be turned off).
When a connection with UNIX is established, a few
garbage characters are typed (these are the
login: message at the wrong speed). You should
depress the break key; this is a speed-
independent signal to UNIX that a 300-baud termi-
nal is in use. It will type login: (at the
correct speed this time) and from then on the
procedure is the same as described above.
From a 2741, no message will appear. After the
telephone connection is established, press the
ATTN” button. UNIX should type login: as
- 1 _
[Page: 258]
6/15/72 LOGIN, LOGOUT (VIT)
described above. If the greeting does not appear
after a few seconds, hang up and try again; some-
thing has gone wrong. If a password is required,
the printer cannot be turned off, so it will
appear on the paper when you type it.

For more information, consult getty(VII), which
aiscusses the login sequence in more detail, and
ttyO(IV), which discusses typewriter I/O.
Logging out is simple by comparison (in fact,
sometimes too simple). Simply generate an end-
of-file at Shell level by using the EOT
character; the login: message will appear again
to indicate that you may log in again.
It is also possible to log out simply by hanging
up the terminal; this simulates an end-of-file on
the typewriter.

FILES Jete/motd may contain a message—of—the-—day.

SEE ALSO init(VII), getty(VII), tty0(IV)

DIAGNOSTICS -- .

BUGS Hanging up on programs which never read the type-
writer or which ignore end-of-files is very
dangerous; in the worst cases, the programs can

only be halted by restarting the system.

OWNER ken, dmr

- Loe
[Page: 259]
6/15/72 MSH (VII)

NAME msh -- mini-shell

SYNOPSIS -—-

DESCRIPTION msh is a heavily simplified version of the Shell.
Tt reads one line from the standard input file,
interprets it as a command, and calls the com-
mand. .

The mini-shell supports few of the advanced
features of the Shell; none of the following
characters is special:

>< $\ 3 &
However, "*", "[", and "2" are recognized and
qlob is called. The main use of msh is to pro-
vide a command-executing facility for various
interactive sub-systems.

FILES found in /etc/msh

SEE ALSO sh, glob

DIAGNOSTICS "2"

BUGS -- .

OWN ER ken, dmr

- 4 -
[Page: 260]
6/15/72 : TABS (VII)
. NAME tabs -- tab stop set
SYNOPSIS cat /usr/pub/tabs ;
DESCRIPTION When printed on a suitable terminal, this file
4 will set tab stops at columns 8, 16, 24, 32,5 eee
; Suitable terminals include the Teletype model 37
and the GE TermiNet 300.
These tabs stop settings are desirable because
UNIX assumes them in calculating delays.
FILES -_—
SEE ALSO --
DIAGNOSTICS --
BUGS -_
OWNER ken
(
-4-
